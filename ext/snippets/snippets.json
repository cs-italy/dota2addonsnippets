{
    "CDOTA_Item_Lua:GetAssociatedSecondaryAbilities": {
        "body": [
            "GetAssociatedSecondaryAbilities(  )",
            "-- Returns other abilities that are stolen simultaneously, or otherwise related in functionality.  Generally hidden abilities."
        ],
        "prefix": "GetAssociatedSecondaryAbilities",
        "description": "Returns other abilities that are stolen simultaneously, or otherwise related in functionality.  Generally hidden abilities."
    },
    "CDOTA_BaseNPC:SwapItems": {
        "body": [
            "SwapItems( ${nSlot1}, ${nSlot2} )",
            "-- Swap the contents of two item slots (slot1, slot2)"
        ],
        "prefix": "SwapItems",
        "description": "Swap the contents of two item slots (slot1, slot2)"
    },
    "CDOTA_PlayerResource:GetPlayerLoadedCompletely": {
        "body": [
            "GetPlayerLoadedCompletely( ${iPlayerID} )",
            "-- "
        ],
        "prefix": "GetPlayerLoadedCompletely",
        "description": ""
    },
    "CBaseEntity:GetAnglesAsVector": {
        "body": [
            "GetAnglesAsVector(  )",
            "-- Get entity pitch, yaw, roll as a vector."
        ],
        "prefix": "GetAnglesAsVector",
        "description": "Get entity pitch, yaw, roll as a vector."
    },
    "CDOTA_BaseNPC_Hero:GetAgilityGain": {
        "body": [
            "GetAgilityGain(  )",
            "-- "
        ],
        "prefix": "GetAgilityGain",
        "description": ""
    },
    "CDOTA_PlayerResource:GetSelectedHeroEntity": {
        "body": [
            "GetSelectedHeroEntity( ${iPlayerID} )",
            "-- "
        ],
        "prefix": "GetSelectedHeroEntity",
        "description": ""
    },
    "CDOTA_BaseNPC:Kill": {
        "body": [
            "Kill( ${hAbility}, ${hAttacker} )",
            "-- Kills this NPC, with the params Ability and Attacker."
        ],
        "prefix": "Kill",
        "description": "Kills this NPC, with the params Ability and Attacker."
    },
    "CDOTABaseGameMode:ClearModifierGainedFilter": {
        "body": [
            "ClearModifierGainedFilter(  )",
            "-- Clear the script filter that controls the modifier filter."
        ],
        "prefix": "ClearModifierGainedFilter",
        "description": "Clear the script filter that controls the modifier filter."
    },
    "SUBQUEST_TEXT_REPLACE_VALUE_CURRENT_VALUE": {
        "body": [
            "SUBQUEST_TEXT_REPLACE_VALUE_CURRENT_VALUE"
        ],
        "prefix": "SUBQUEST_TEXT_REPLACE_VALUE_CURRENT_VALUE",
        "description": "(0) "
    },
    "ACT_DOTA_CAGED_CREEP_SMASH_OUT": {
        "body": [
            "ACT_DOTA_CAGED_CREEP_SMASH_OUT"
        ],
        "prefix": "ACT_DOTA_CAGED_CREEP_SMASH_OUT",
        "description": "(1647) "
    },
    "ACT_DOTA_SAND_KING_BURROW_IN": {
        "body": [
            "ACT_DOTA_SAND_KING_BURROW_IN"
        ],
        "prefix": "ACT_DOTA_SAND_KING_BURROW_IN",
        "description": "(1568) "
    },
    "CDOTA_BaseNPC:GetDeathXP": {
        "body": [
            "GetDeathXP(  )",
            "-- Get the XP bounty on this unit."
        ],
        "prefix": "GetDeathXP",
        "description": "Get the XP bounty on this unit."
    },
    "CDebugOverlayScriptHelper:Sphere": {
        "body": [
            "Sphere( ${Vector_1}, ${float_2}, ${int_3}, ${int_4}, ${int_5}, ${int_6}, ${bool_7}, ${float_8} )",
            "-- Draws a wireframe sphere. Specify center in world space."
        ],
        "prefix": "Sphere",
        "description": "Draws a wireframe sphere. Specify center in world space."
    },
    "CDOTA_BaseNPC:MakeIllusion": {
        "body": [
            "MakeIllusion(  )",
            "-- "
        ],
        "prefix": "MakeIllusion",
        "description": ""
    },
    "CDOTA_BaseNPC:GetInitialGoalEntity": {
        "body": [
            "GetInitialGoalEntity(  )",
            "-- Returns the initial waypoint goal for this NPC."
        ],
        "prefix": "GetInitialGoalEntity",
        "description": "Returns the initial waypoint goal for this NPC."
    },
    "CEntities:CreateByClassname": {
        "body": [
            "CreateByClassname( ${string_1} )",
            "-- Creates an entity by classname"
        ],
        "prefix": "CreateByClassname",
        "description": "Creates an entity by classname"
    },
    "SendToConsole": {
        "body": [
            "SendToConsole( ${string_1} )",
            "-- Send a string to the console as a client command"
        ],
        "prefix": "SendToConsole",
        "description": "Send a string to the console as a client command"
    },
    "CDOTA_Ability_Lua:OnSpellStart": {
        "body": [
            "OnSpellStart(  )",
            "-- Cast time finished, spell effects begin."
        ],
        "prefix": "OnSpellStart",
        "description": "Cast time finished, spell effects begin."
    },
    "CBaseEntity:EyeAngles": {
        "body": [
            "EyeAngles(  )",
            "-- Get the qangles that this entity is looking at."
        ],
        "prefix": "EyeAngles",
        "description": "Get the qangles that this entity is looking at."
    },
    "MODIFIER_ATTRIBUTE_PERMANENT": {
        "body": [
            "MODIFIER_ATTRIBUTE_PERMANENT"
        ],
        "prefix": "MODIFIER_ATTRIBUTE_PERMANENT",
        "description": "(1) "
    },
    "DOTA_HEROPICK_STATE_CD_SELECT2": {
        "body": [
            "DOTA_HEROPICK_STATE_CD_SELECT2"
        ],
        "prefix": "DOTA_HEROPICK_STATE_CD_SELECT2",
        "description": "(40) "
    },
    "CBaseEntity:GetBoundingMins": {
        "body": [
            "GetBoundingMins(  )",
            "-- Get a vector containing min bounds, centered on object."
        ],
        "prefix": "GetBoundingMins",
        "description": "Get a vector containing min bounds, centered on object."
    },
    "CDOTA_BaseNPC_Hero:IsReincarnating": {
        "body": [
            "IsReincarnating(  )",
            "-- "
        ],
        "prefix": "IsReincarnating",
        "description": ""
    },
    "CEntityInstance:RedirectOutput": {
        "body": [
            "RedirectOutput( ${string_1}, ${string_2}, ${handle_3} )",
            "-- Adds an I/O connection that will call the named function on the passed entity when the specified output fires."
        ],
        "prefix": "RedirectOutput",
        "description": "Adds an I/O connection that will call the named function on the passed entity when the specified output fires."
    },
    "CBodyComponent:SetBodyGroup": {
        "body": [
            "SetBodyGroup( ${string_1} )",
            "-- "
        ],
        "prefix": "SetBodyGroup",
        "description": ""
    },
    "DOTA_INVENTORY_ALLOW_NONE": {
        "body": [
            "DOTA_INVENTORY_ALLOW_NONE"
        ],
        "prefix": "DOTA_INVENTORY_ALLOW_NONE",
        "description": "(0) "
    },
    "CDOTA_PlayerResource:GetPlayerReservedState": {
        "body": [
            "GetPlayerReservedState( ${iPlayerID} )",
            "-- "
        ],
        "prefix": "GetPlayerReservedState",
        "description": ""
    },
    "DOTA_LOADOUT_TYPE_CURSOR_PACK": {
        "body": [
            "DOTA_LOADOUT_TYPE_CURSOR_PACK"
        ],
        "prefix": "DOTA_LOADOUT_TYPE_CURSOR_PACK",
        "description": "(39) "
    },
    "LinkLuaModifier": {
        "body": [
            "LinkLuaModifier( ${string_1}, ${string_2}, ${int_3} )",
            "-- Link a lua-defined modifier with the associated class ( className, fileName, LuaModifierType)."
        ],
        "prefix": "LinkLuaModifier",
        "description": "Link a lua-defined modifier with the associated class ( className, fileName, LuaModifierType)."
    },
    "LoadKeyValuesFromString": {
        "body": [
            "LoadKeyValuesFromString( ${string_1} )",
            "-- Creates a table from the specified keyvalues string"
        ],
        "prefix": "LoadKeyValuesFromString",
        "description": "Creates a table from the specified keyvalues string"
    },
    "ACT_DOTA_CAST_ABILITY_6": {
        "body": [
            "ACT_DOTA_CAST_ABILITY_6"
        ],
        "prefix": "ACT_DOTA_CAST_ABILITY_6",
        "description": "(1515) "
    },
    "CBodyComponent:DetachFromParent": {
        "body": [
            "DetachFromParent(  )",
            "-- Detach from its parent"
        ],
        "prefix": "DetachFromParent",
        "description": "Detach from its parent"
    },
    "CDOTA_Item_Lua:OnProjectileThink": {
        "body": [
            "OnProjectileThink( ${vLocation} )",
            "-- (Vector vLocation) Projectile is actively moving."
        ],
        "prefix": "OnProjectileThink",
        "description": "(Vector vLocation) Projectile is actively moving."
    },
    "DOTA_ModifyGold_SellItem": {
        "body": [
            "DOTA_ModifyGold_SellItem"
        ],
        "prefix": "DOTA_ModifyGold_SellItem",
        "description": "(6) "
    },
    "DOTA_ABILITY_BEHAVIOR_OPTIONAL_NO_TARGET": {
        "body": [
            "DOTA_ABILITY_BEHAVIOR_OPTIONAL_NO_TARGET"
        ],
        "prefix": "DOTA_ABILITY_BEHAVIOR_OPTIONAL_NO_TARGET",
        "description": "(32768) "
    },
    "CDOTA_Modifier_Lua:AllowIllusionDuplicate": {
        "body": [
            "AllowIllusionDuplicate(  )",
            "-- True/false if this modifier is active on illusions."
        ],
        "prefix": "AllowIllusionDuplicate",
        "description": "True/false if this modifier is active on illusions."
    },
    "DOTA_HEROPICK_STATE_COUNT": {
        "body": [
            "DOTA_HEROPICK_STATE_COUNT"
        ],
        "prefix": "DOTA_HEROPICK_STATE_COUNT",
        "description": "(55) "
    },
    "CEntities:FindByNameNearest": {
        "body": [
            "FindByNameNearest( ${string_1}, ${Vector_2}, ${float_3} )",
            "-- Find entities by name nearest to a point."
        ],
        "prefix": "FindByNameNearest",
        "description": "Find entities by name nearest to a point."
    },
    "CDOTA_PlayerResource:GetTowerDamageTaken": {
        "body": [
            "GetTowerDamageTaken( ${iPlayerID}, ${bTotal} )",
            "-- "
        ],
        "prefix": "GetTowerDamageTaken",
        "description": ""
    },
    "CDOTABaseAbility:SetInAbilityPhase": {
        "body": [
            "SetInAbilityPhase( ${bInAbilityPhase} )",
            "-- "
        ],
        "prefix": "SetInAbilityPhase",
        "description": ""
    },
    "CDOTA_Item_Lua:OnHeroCalculateStatBonus": {
        "body": [
            "OnHeroCalculateStatBonus(  )",
            "-- Caster (hero only) gained a level, skilled an ability, or received a new stat bonus."
        ],
        "prefix": "OnHeroCalculateStatBonus",
        "description": "Caster (hero only) gained a level, skilled an ability, or received a new stat bonus."
    },
    "DOTA_MAX_SPECTATOR_TEAM_SIZE": {
        "body": [
            "DOTA_MAX_SPECTATOR_TEAM_SIZE"
        ],
        "prefix": "DOTA_MAX_SPECTATOR_TEAM_SIZE",
        "description": "(40)  How many spectators can watch."
    },
    "UTIL_MessageText": {
        "body": [
            "UTIL_MessageText( ${int_1}, ${string_2}, ${int_3}, ${int_4}, ${int_5}, ${int_6} )",
            "-- Sends colored text to one client."
        ],
        "prefix": "UTIL_MessageText",
        "description": "Sends colored text to one client."
    },
    "CDOTA_Item_Lua:ProcsMagicStick": {
        "body": [
            "ProcsMagicStick(  )",
            "-- Returns true if this ability will generate magic stick charges for nearby enemies."
        ],
        "prefix": "ProcsMagicStick",
        "description": "Returns true if this ability will generate magic stick charges for nearby enemies."
    },
    "CDOTA_Buff:AddParticle": {
        "body": [
            "AddParticle( ${i}, ${bDestroyImmediately}, ${bStatusEffect}, ${iPriority}, ${bHeroEffect}, ${bOverheadEffect} )",
            "-- (index, bDestroyImmediately, bStatusEffect, priority, bHeroEffect, bOverheadEffect"
        ],
        "prefix": "AddParticle",
        "description": "(index, bDestroyImmediately, bStatusEffect, priority, bHeroEffect, bOverheadEffect"
    },
    "CreateModifierThinker": {
        "body": [
            "CreateModifierThinker( ${handle_1}, ${handle_2}, ${string_3}, ${handle_4}, ${Vector_5}, ${int_6}, ${bool_7} )",
            "-- Create a modifier not associated with an NPC. ( hCaster, hAbility, modifierName, paramTable, vOrigin, nTeamNumber, bPhantomBlocker )"
        ],
        "prefix": "CreateModifierThinker",
        "description": "Create a modifier not associated with an NPC. ( hCaster, hAbility, modifierName, paramTable, vOrigin, nTeamNumber, bPhantomBlocker )"
    },
    "CDOTABaseGameMode:GetTopBarTeamValuesVisible": {
        "body": [
            "GetTopBarTeamValuesVisible(  )",
            "-- Turning on/off the team values on the top game bar."
        ],
        "prefix": "GetTopBarTeamValuesVisible",
        "description": "Turning on/off the team values on the top game bar."
    },
    "DOTA_ABILITY_BEHAVIOR_TOGGLE": {
        "body": [
            "DOTA_ABILITY_BEHAVIOR_TOGGLE"
        ],
        "prefix": "DOTA_ABILITY_BEHAVIOR_TOGGLE",
        "description": "(512) "
    },
    "CDOTA_BaseNPC_Hero:ModifyStrength": {
        "body": [
            "ModifyStrength( ${flNewStrength} )",
            "-- Adds passed value to base attribute value, then calls CalculateStatBonus."
        ],
        "prefix": "ModifyStrength",
        "description": "Adds passed value to base attribute value, then calls CalculateStatBonus."
    },
    "CDOTA_BaseNPC:TimeUntilNextAttack": {
        "body": [
            "TimeUntilNextAttack(  )",
            "-- "
        ],
        "prefix": "TimeUntilNextAttack",
        "description": ""
    },
    "CBaseAnimating:SetBodygroup": {
        "body": [
            "SetBodygroup( ${iGroup}, ${iValue} )",
            "-- Sets a bodygroup."
        ],
        "prefix": "SetBodygroup",
        "description": "Sets a bodygroup."
    },
    "ACT_DOTA_ITEM_LOOK": {
        "body": [
            "ACT_DOTA_ITEM_LOOK"
        ],
        "prefix": "ACT_DOTA_ITEM_LOOK",
        "description": "(1628) "
    },
    "CBaseEntity:GetRightVector": {
        "body": [
            "GetRightVector(  )",
            "-- Get the right vector of the entity."
        ],
        "prefix": "GetRightVector",
        "description": "Get the right vector of the entity."
    },
    "ACT_DOTA_FLAIL": {
        "body": [
            "ACT_DOTA_FLAIL"
        ],
        "prefix": "ACT_DOTA_FLAIL",
        "description": "(1508) "
    },
    "MODIFIER_PROPERTY_BONUS_NIGHT_VISION": {
        "body": [
            "MODIFIER_PROPERTY_BONUS_NIGHT_VISION"
        ],
        "prefix": "MODIFIER_PROPERTY_BONUS_NIGHT_VISION",
        "description": "(81)  GetBonusNightVision"
    },
    "ACT_DOTA_STATIC_STORM": {
        "body": [
            "ACT_DOTA_STATIC_STORM"
        ],
        "prefix": "ACT_DOTA_STATIC_STORM",
        "description": "(1680) "
    },
    "ACT_DOTA_TINKER_REARM1": {
        "body": [
            "ACT_DOTA_TINKER_REARM1"
        ],
        "prefix": "ACT_DOTA_TINKER_REARM1",
        "description": "(1555) "
    },
    "ACT_DOTA_CAST_ABILITY_4": {
        "body": [
            "ACT_DOTA_CAST_ABILITY_4"
        ],
        "prefix": "ACT_DOTA_CAST_ABILITY_4",
        "description": "(1513) "
    },
    "DOTA_UNIT_TARGET_FLAG_NOT_CREEP_HERO": {
        "body": [
            "DOTA_UNIT_TARGET_FLAG_NOT_CREEP_HERO"
        ],
        "prefix": "DOTA_UNIT_TARGET_FLAG_NOT_CREEP_HERO",
        "description": "(131072) "
    },
    "CDOTA_BaseNPC:SetNightTimeVisionRange": {
        "body": [
            "SetNightTimeVisionRange( ${iRange} )",
            "-- Returns the vision range after modifiers."
        ],
        "prefix": "SetNightTimeVisionRange",
        "description": "Returns the vision range after modifiers."
    },
    "ACT_DOTA_ROQUELAIRE_LAND_IDLE": {
        "body": [
            "ACT_DOTA_ROQUELAIRE_LAND_IDLE"
        ],
        "prefix": "ACT_DOTA_ROQUELAIRE_LAND_IDLE",
        "description": "(1616) "
    },
    "MODIFIER_PROPERTY_COOLDOWN_PERCENTAGE": {
        "body": [
            "MODIFIER_PROPERTY_COOLDOWN_PERCENTAGE"
        ],
        "prefix": "MODIFIER_PROPERTY_COOLDOWN_PERCENTAGE",
        "description": "(66)  GetModifierPercentageCooldown"
    },
    "DebugDrawSphere": {
        "body": [
            "DebugDrawSphere( ${vOrigin}, ${vRGB}, ${iAlpha}, ${iRadius}, ${bZtest}, ${fDuration} )",
            "-- Draw a sphere in the world"
        ],
        "prefix": "DebugDrawSphere",
        "description": "Draw a debug sphere (center, vRgb, a, rad, ztest, duration)"
    },
    "CEntities:FindByClassnameNearest": {
        "body": [
            "FindByClassnameNearest( ${string_1}, ${Vector_2}, ${float_3} )",
            "-- Find entities by class name nearest to a point."
        ],
        "prefix": "FindByClassnameNearest",
        "description": "Find entities by class name nearest to a point."
    },
    "PATTACH_CUSTOMORIGIN": {
        "body": [
            "PATTACH_CUSTOMORIGIN"
        ],
        "prefix": "PATTACH_CUSTOMORIGIN",
        "description": "(2) "
    },
    "CDOTA_Ability_Lua:IsHiddenWhenStolen": {
        "body": [
            "IsHiddenWhenStolen(  )",
            "-- Returns true if this ability is hidden when stolen by Spell Steal."
        ],
        "prefix": "IsHiddenWhenStolen",
        "description": "Returns true if this ability is hidden when stolen by Spell Steal."
    },
    "CDOTA_BaseNPC:IsAttackImmune": {
        "body": [
            "IsAttackImmune(  )",
            "-- "
        ],
        "prefix": "IsAttackImmune",
        "description": ""
    },
    "CDOTABaseAbility:GetAbilityTargetTeam": {
        "body": [
            "GetAbilityTargetTeam(  )",
            "-- "
        ],
        "prefix": "GetAbilityTargetTeam",
        "description": ""
    },
    "ShowMessage": {
        "body": [
            "ShowMessage( ${string_1} )",
            "-- Print a hud message on all clients"
        ],
        "prefix": "ShowMessage",
        "description": "Print a hud message on all clients"
    },
    "ACT_DOTA_RATTLETRAP_POWERCOGS": {
        "body": [
            "ACT_DOTA_RATTLETRAP_POWERCOGS"
        ],
        "prefix": "ACT_DOTA_RATTLETRAP_POWERCOGS",
        "description": "(1550) "
    },
    "CDOTABaseAbility:SetRefCountsModifiers": {
        "body": [
            "SetRefCountsModifiers( ${bRefCounts} )",
            "-- "
        ],
        "prefix": "SetRefCountsModifiers",
        "description": ""
    },
    "CDebugOverlayScriptHelper:HorzArrow": {
        "body": [
            "HorzArrow( ${Vector_1}, ${Vector_2}, ${float_3}, ${int_4}, ${int_5}, ${int_6}, ${int_7}, ${bool_8}, ${float_9} )",
            "-- Draws a horizontal arrow. Specify endpoints in world space."
        ],
        "prefix": "HorzArrow",
        "description": "Draws a horizontal arrow. Specify endpoints in world space."
    },
    "IsMarkedForDeletion": {
        "body": [
            "IsMarkedForDeletion( ${handle_1} )",
            "-- Returns true if the entity is valid and marked for deletion."
        ],
        "prefix": "IsMarkedForDeletion",
        "description": "Returns true if the entity is valid and marked for deletion."
    },
    "DOTA_ModifyGold_Buyback": {
        "body": [
            "DOTA_ModifyGold_Buyback"
        ],
        "prefix": "DOTA_ModifyGold_Buyback",
        "description": "(2) "
    },
    "ACT_WAVEFORM_START": {
        "body": [
            "ACT_WAVEFORM_START"
        ],
        "prefix": "ACT_WAVEFORM_START",
        "description": "(1545) "
    },
    "CDOTA_Item_Lua:OnOwnerDied": {
        "body": [
            "OnOwnerDied(  )",
            "-- Caster died."
        ],
        "prefix": "OnOwnerDied",
        "description": "Caster died."
    },
    "CDOTA_BaseNPC:NotOnMinimapForEnemies": {
        "body": [
            "NotOnMinimapForEnemies(  )",
            "-- "
        ],
        "prefix": "NotOnMinimapForEnemies",
        "description": ""
    },
    "DOTA_HEROPICK_STATE_MO_SELECT": {
        "body": [
            "DOTA_HEROPICK_STATE_MO_SELECT"
        ],
        "prefix": "DOTA_HEROPICK_STATE_MO_SELECT",
        "description": "(29) "
    },
    "CDOTA_BaseNPC:GetAcquisitionRange": {
        "body": [
            "GetAcquisitionRange(  )",
            "-- Gets the range at which this unit will auto-acquire."
        ],
        "prefix": "GetAcquisitionRange",
        "description": "Gets the range at which this unit will auto-acquire."
    },
    "DOTA_TEAM_NOTEAM": {
        "body": [
            "DOTA_TEAM_NOTEAM"
        ],
        "prefix": "DOTA_TEAM_NOTEAM",
        "description": "(5) "
    },
    "DOTA_LOADOUT_TYPE_MEGA_KILLS": {
        "body": [
            "DOTA_LOADOUT_TYPE_MEGA_KILLS"
        ],
        "prefix": "DOTA_LOADOUT_TYPE_MEGA_KILLS",
        "description": "(31) "
    },
    "CEntityInstance:GetDebugName": {
        "body": [
            "GetDebugName(  )",
            "-- Get the entity name w/help if not defined (i.e. classname/etc)"
        ],
        "prefix": "GetDebugName",
        "description": "Get the entity name w/help if not defined (i.e. classname/etc)"
    },
    "DOTA_HEROPICK_STATE_CD_SELECT1": {
        "body": [
            "DOTA_HEROPICK_STATE_CD_SELECT1"
        ],
        "prefix": "DOTA_HEROPICK_STATE_CD_SELECT1",
        "description": "(39) "
    },
    "MODIFIER_PROPERTY_DAMAGEOUTGOING_PERCENTAGE": {
        "body": [
            "MODIFIER_PROPERTY_DAMAGEOUTGOING_PERCENTAGE"
        ],
        "prefix": "MODIFIER_PROPERTY_DAMAGEOUTGOING_PERCENTAGE",
        "description": "(25)  GetModifierDamageOutgoing_Percentage"
    },
    "DOTA_ModifyGold_Death": {
        "body": [
            "DOTA_ModifyGold_Death"
        ],
        "prefix": "DOTA_ModifyGold_Death",
        "description": "(1) "
    },
    "CDOTA_BaseNPC:IsOpposingTeam": {
        "body": [
            "IsOpposingTeam( ${nTeam} )",
            "-- "
        ],
        "prefix": "IsOpposingTeam",
        "description": ""
    },
    "CDOTA_PlayerResource:GetClaimedMisses": {
        "body": [
            "GetClaimedMisses( ${iPlayerID} )",
            "-- "
        ],
        "prefix": "GetClaimedMisses",
        "description": ""
    },
    "ACT_DOTA_CHANNEL_ABILITY_2": {
        "body": [
            "ACT_DOTA_CHANNEL_ABILITY_2"
        ],
        "prefix": "ACT_DOTA_CHANNEL_ABILITY_2",
        "description": "(1521) "
    },
    "CDOTA_PlayerResource:GetMisses": {
        "body": [
            "GetMisses( ${iPlayerID} )",
            "-- "
        ],
        "prefix": "GetMisses",
        "description": ""
    },
    "CDOTA_BaseNPC:GetMaximumGoldBounty": {
        "body": [
            "GetMaximumGoldBounty(  )",
            "-- Get the maximum gold bounty for this unit."
        ],
        "prefix": "GetMaximumGoldBounty",
        "description": "Get the maximum gold bounty for this unit."
    },
    "CDOTA_BaseNPC:IsBlind": {
        "body": [
            "IsBlind(  )",
            "-- "
        ],
        "prefix": "IsBlind",
        "description": ""
    },
    "CDOTA_BaseNPC:IsOutOfGame": {
        "body": [
            "IsOutOfGame(  )",
            "-- "
        ],
        "prefix": "IsOutOfGame",
        "description": ""
    },
    "CDOTA_BaseNPC:RemoveItem": {
        "body": [
            "RemoveItem( ${hItem} )",
            "-- Removes the passed item from this unit's inventory."
        ],
        "prefix": "RemoveItem",
        "description": "Removes the passed item from this unit's inventory."
    },
    "CDOTA_BaseNPC:GetMana": {
        "body": [
            "GetMana(  )",
            "-- Get the mana on this unit."
        ],
        "prefix": "GetMana",
        "description": "Get the mana on this unit."
    },
    "CDOTA_Item_Physical:GetCreationTime": {
        "body": [
            "GetCreationTime(  )",
            "-- Returns the game time when this item was created in the world"
        ],
        "prefix": "GetCreationTime",
        "description": "Returns the game time when this item was created in the world"
    },
    "CDOTAPlayer:SetMusicStatus": {
        "body": [
            "SetMusicStatus( ${nMusicStatus}, ${flIntensity} )",
            "-- (nMusicStatus, flIntensity) - Set the music status for this player, note this will only really apply if dota_music_battle_enable is off."
        ],
        "prefix": "SetMusicStatus",
        "description": "(nMusicStatus, flIntensity) - Set the music status for this player, note this will only really apply if dota_music_battle_enable is off."
    },
    "LUA_MODIFIER_MOTION_NONE": {
        "body": [
            "LUA_MODIFIER_MOTION_NONE"
        ],
        "prefix": "LUA_MODIFIER_MOTION_NONE",
        "description": "(0) "
    },
    "CSceneEntity:EstimateLength": {
        "body": [
            "EstimateLength(  )",
            "-- Returns length of this scene in seconds."
        ],
        "prefix": "EstimateLength",
        "description": "Returns length of this scene in seconds."
    },
    "MODIFIER_PROPERTY_PRE_ATTACK": {
        "body": [
            "MODIFIER_PROPERTY_PRE_ATTACK"
        ],
        "prefix": "MODIFIER_PROPERTY_PRE_ATTACK",
        "description": "(7)  GetModifierPreAttack"
    },
    "MODIFIER_PROPERTY_IS_ILLUSION": {
        "body": [
            "MODIFIER_PROPERTY_IS_ILLUSION"
        ],
        "prefix": "MODIFIER_PROPERTY_IS_ILLUSION",
        "description": "(90)  GetIsIllusion"
    },
    "StopSoundOn": {
        "body": [
            "StopSoundOn( ${sSoundName}, ${eEntity} )",
            "-- Stop named sound on Entity"
        ],
        "prefix": "StopSoundOn",
        "description": "Stop named sound on Entity"
    },
    "CDOTA_BaseNPC:SetCursorTargetingNothing": {
        "body": [
            "SetCursorTargetingNothing( ${bTargetingNothing} )",
            "-- "
        ],
        "prefix": "SetCursorTargetingNothing",
        "description": ""
    },
    "CDOTABaseAbility:OnUpgrade": {
        "body": [
            "OnUpgrade(  )",
            "-- "
        ],
        "prefix": "OnUpgrade",
        "description": ""
    },
    "CDOTA_Unit_Nian:GetHorn": {
        "body": [
            "GetHorn(  )",
            "-- Is the Nian horn?"
        ],
        "prefix": "GetHorn",
        "description": "Is the Nian horn?"
    },
    "DOTA_UNIT_TARGET_MECHANICAL": {
        "body": [
            "DOTA_UNIT_TARGET_MECHANICAL"
        ],
        "prefix": "DOTA_UNIT_TARGET_MECHANICAL",
        "description": "(8) "
    },
    "CDOTABaseGameMode:SetRecommendedItemsDisabled": {
        "body": [
            "SetRecommendedItemsDisabled( ${bDisabled} )",
            "-- Turn the panel for showing recommended items at the shop off/on."
        ],
        "prefix": "SetRecommendedItemsDisabled",
        "description": "Turn the panel for showing recommended items at the shop off/on."
    },
    "CDOTABaseAbility:IsOwnersGoldEnoughForUpgrade": {
        "body": [
            "IsOwnersGoldEnoughForUpgrade(  )",
            "-- "
        ],
        "prefix": "IsOwnersGoldEnoughForUpgrade",
        "description": ""
    },
    "DOTA_STASH_SLOT_6": {
        "body": [
            "DOTA_STASH_SLOT_6"
        ],
        "prefix": "DOTA_STASH_SLOT_6",
        "description": "(11) "
    },
    "CDOTA_Ability_Lua:GetChannelledManaCostPerSecond": {
        "body": [
            "GetChannelledManaCostPerSecond( ${iLevel} )",
            "-- Return mana cost at the given level per second while channeling (-1 is current)."
        ],
        "prefix": "GetChannelledManaCostPerSecond",
        "description": "Return mana cost at the given level per second while channeling (-1 is current)."
    },
    "CDOTABaseGameMode:ClearTrackingProjectileFilter": {
        "body": [
            "ClearTrackingProjectileFilter(  )",
            "-- Clear the script filter that controls when tracking projectiles are launched."
        ],
        "prefix": "ClearTrackingProjectileFilter",
        "description": "Clear the script filter that controls when tracking projectiles are launched."
    },
    "CBaseEntity:GetTeam": {
        "body": [
            "GetTeam(  )",
            "-- Get the team number of this entity."
        ],
        "prefix": "GetTeam",
        "description": "Get the team number of this entity."
    },
    "MODIFIER_EVENT_ON_TELEPORTED": {
        "body": [
            "MODIFIER_EVENT_ON_TELEPORTED"
        ],
        "prefix": "MODIFIER_EVENT_ON_TELEPORTED",
        "description": "(123)  OnTeleported"
    },
    "CToneMapControllerComponent:GetBloomScale": {
        "body": [
            "GetBloomScale(  )",
            "-- Gets bloomscale for this tonemap controller"
        ],
        "prefix": "GetBloomScale",
        "description": "Gets bloomscale for this tonemap controller"
    },
    "MODIFIER_PROPERTY_MOVESPEED_ABSOLUTE_MIN": {
        "body": [
            "MODIFIER_PROPERTY_MOVESPEED_ABSOLUTE_MIN"
        ],
        "prefix": "MODIFIER_PROPERTY_MOVESPEED_ABSOLUTE_MIN",
        "description": "(16)  GetModifierMoveSpeed_AbsoluteMin"
    },
    "CDOTABaseGameMode:SetModifyExperienceFilter": {
        "body": [
            "SetModifyExperienceFilter( ${hFunction}, ${hContext} )",
            "-- Set a filter function to control the behavior when a hero's experience is modified. (Modify the table and Return true to use new values, return false to cancel the event)"
        ],
        "prefix": "SetModifyExperienceFilter",
        "description": "Set a filter function to control the behavior when a hero's experience is modified. (Modify the table and Return true to use new values, return false to cancel the event)"
    },
    "DOTA_LOADOUT_TYPE_TAUNT": {
        "body": [
            "DOTA_LOADOUT_TYPE_TAUNT"
        ],
        "prefix": "DOTA_LOADOUT_TYPE_TAUNT",
        "description": "(19) "
    },
    "DOTA_LOADOUT_TYPE_INVALID": {
        "body": [
            "DOTA_LOADOUT_TYPE_INVALID"
        ],
        "prefix": "DOTA_LOADOUT_TYPE_INVALID",
        "description": "(-1) "
    },
    "ACT_DOTA_NIAN_PIN_TO_STUN": {
        "body": [
            "ACT_DOTA_NIAN_PIN_TO_STUN"
        ],
        "prefix": "ACT_DOTA_NIAN_PIN_TO_STUN",
        "description": "(1662) "
    },
    "CDOTABaseAbility:IsOwnersGoldEnough": {
        "body": [
            "IsOwnersGoldEnough( ${nIssuerPlayerID} )",
            "-- "
        ],
        "prefix": "IsOwnersGoldEnough",
        "description": ""
    },
    "CBaseEntity:Attribute_SetIntValue": {
        "body": [
            "Attribute_SetIntValue( ${pName}, ${nValue} )",
            "-- Set int value for an entity attribute."
        ],
        "prefix": "Attribute_SetIntValue",
        "description": "Set int value for an entity attribute."
    },
    "RegisterSpawnGroupFilterProxy": {
        "body": [
            "RegisterSpawnGroupFilterProxy( ${string_1} )",
            "-- Create a C proxy for a script-based spawn group filter"
        ],
        "prefix": "RegisterSpawnGroupFilterProxy",
        "description": "Create a C proxy for a script-based spawn group filter"
    },
    "CDOTA_PlayerResource:ClearLastHitMultikill": {
        "body": [
            "ClearLastHitMultikill( ${iPlayerID} )",
            "-- "
        ],
        "prefix": "ClearLastHitMultikill",
        "description": ""
    },
    "ACT_DOTA_ITEM_PICKUP": {
        "body": [
            "ACT_DOTA_ITEM_PICKUP"
        ],
        "prefix": "ACT_DOTA_ITEM_PICKUP",
        "description": "(1696) "
    },
    "CDebugOverlayScriptHelper:Cross3DOriented": {
        "body": [
            "Cross3DOriented( ${Vector_1}, ${Quaternion_2}, ${float_3}, ${int_4}, ${int_5}, ${int_6}, ${int_7}, ${bool_8}, ${float_9} )",
            "-- Draws an oriented cross. Specify origin in world space."
        ],
        "prefix": "Cross3DOriented",
        "description": "Draws an oriented cross. Specify origin in world space."
    },
    "MODIFIER_PROPERTY_AVOID_DAMAGE": {
        "body": [
            "MODIFIER_PROPERTY_AVOID_DAMAGE"
        ],
        "prefix": "MODIFIER_PROPERTY_AVOID_DAMAGE",
        "description": "(34)  GetModifierAvoidDamage"
    },
    "CDOTA_PlayerResource:IsHeroSharedWithPlayerID": {
        "body": [
            "IsHeroSharedWithPlayerID( ${nUnitOwnerPlayerID}, ${nOtherPlayerID} )",
            "-- "
        ],
        "prefix": "IsHeroSharedWithPlayerID",
        "description": ""
    },
    "CDOTA_BaseNPC_Creature:SetAttackTimeGain": {
        "body": [
            "SetAttackTimeGain( ${flAttackTimeGain} )",
            "-- Set the attack time gained per level on this creature."
        ],
        "prefix": "SetAttackTimeGain",
        "description": "Set the attack time gained per level on this creature."
    },
    "ShowGenericPopupToPlayer": {
        "body": [
            "ShowGenericPopupToPlayer( ${handle_1}, ${string_2}, ${string_3}, ${string_4}, ${string_5}, ${int_6} )",
            "-- Show a generic popup dialog to a specific player."
        ],
        "prefix": "ShowGenericPopupToPlayer",
        "description": "Show a generic popup dialog to a specific player."
    },
    "CDOTA_Ability_Lua:GetCustomCastErrorTarget": {
        "body": [
            "GetCustomCastErrorTarget( ${hTarget} )",
            "-- (HSCRIPT hTarget) Return the error string of a failed command on a target."
        ],
        "prefix": "GetCustomCastErrorTarget",
        "description": "(HSCRIPT hTarget) Return the error string of a failed command on a target."
    },
    "DOTA_ModifyGold_AbilityCost": {
        "body": [
            "DOTA_ModifyGold_AbilityCost"
        ],
        "prefix": "DOTA_ModifyGold_AbilityCost",
        "description": "(7) "
    },
    "CBaseEntity:ApplyLocalAngularVelocityImpulse": {
        "body": [
            "ApplyLocalAngularVelocityImpulse( ${angImpulse} )",
            "-- Apply an Ang Velocity Impulse"
        ],
        "prefix": "ApplyLocalAngularVelocityImpulse",
        "description": "Apply an Ang Velocity Impulse"
    },
    "DOTA_LOADOUT_TYPE_ABILITY4": {
        "body": [
            "DOTA_LOADOUT_TYPE_ABILITY4"
        ],
        "prefix": "DOTA_LOADOUT_TYPE_ABILITY4",
        "description": "(25) "
    },
    "CDOTA_Ability_Lua:IsHiddenAbilityCastable": {
        "body": [
            "IsHiddenAbilityCastable(  )",
            "-- Returns true if this ability can be used when not on the action panel."
        ],
        "prefix": "IsHiddenAbilityCastable",
        "description": "Returns true if this ability can be used when not on the action panel."
    },
    "CDOTA_BaseNPC:GetCloneSource": {
        "body": [
            "GetCloneSource(  )",
            "-- Get clone source (Meepo Prime, if this is a Meepo)"
        ],
        "prefix": "GetCloneSource",
        "description": "Get clone source (Meepo Prime, if this is a Meepo)"
    },
    "DOTA_ABILITY_BEHAVIOR_IGNORE_CHANNEL": {
        "body": [
            "DOTA_ABILITY_BEHAVIOR_IGNORE_CHANNEL"
        ],
        "prefix": "DOTA_ABILITY_BEHAVIOR_IGNORE_CHANNEL",
        "description": "(4194304) "
    },
    "CDOTA_Item:LaunchLoot": {
        "body": [
            "LaunchLoot( ${bAutoUse}, ${flHeight}, ${flDuration}, ${vEndPoint} )",
            "-- "
        ],
        "prefix": "LaunchLoot",
        "description": ""
    },
    "CDOTABaseAbility:GetGoldCost": {
        "body": [
            "GetGoldCost( ${iLevel} )",
            "-- "
        ],
        "prefix": "GetGoldCost",
        "description": ""
    },
    "CDOTA_BaseNPC:GetUnitLabel": {
        "body": [
            "GetUnitLabel(  )",
            "-- "
        ],
        "prefix": "GetUnitLabel",
        "description": ""
    },
    "MODIFIER_STATE_FAKE_ALLY": {
        "body": [
            "MODIFIER_STATE_FAKE_ALLY"
        ],
        "prefix": "MODIFIER_STATE_FAKE_ALLY",
        "description": "(31) "
    },
    "CDOTABaseGameMode:GetTopBarTeamValuesOverride": {
        "body": [
            "GetTopBarTeamValuesOverride(  )",
            "-- Override the values of the team values on the top game bar."
        ],
        "prefix": "GetTopBarTeamValuesOverride",
        "description": "Override the values of the team values on the top game bar."
    },
    "MODIFIER_EVENT_ON_SET_LOCATION": {
        "body": [
            "MODIFIER_EVENT_ON_SET_LOCATION"
        ],
        "prefix": "MODIFIER_EVENT_ON_SET_LOCATION",
        "description": "(124)  OnSetLocation"
    },
    "CDOTA_BaseNPC:GetPercentageBasedManaRegen": {
        "body": [
            "GetPercentageBasedManaRegen(  )",
            "-- This Mana regen is derived from % bonuses (from items like Void Stone)."
        ],
        "prefix": "GetPercentageBasedManaRegen",
        "description": "This Mana regen is derived from % bonuses (from items like Void Stone)."
    },
    "CDOTA_BaseNPC:GetLastIdleChangeTime": {
        "body": [
            "GetLastIdleChangeTime(  )",
            "-- Get the last game time that this unit switched to/from idle state."
        ],
        "prefix": "GetLastIdleChangeTime",
        "description": "Get the last game time that this unit switched to/from idle state."
    },
    "CDOTA_BaseNPC:CastAbilityOnTarget": {
        "body": [
            "CastAbilityOnTarget( ${hTarget}, ${hAbility}, ${iPlayerIndex} )",
            "-- Cast an ability on a target entity."
        ],
        "prefix": "CastAbilityOnTarget",
        "description": "Cast an ability on a target entity."
    },
    "CDOTA_BaseNPC:RemoveAbility": {
        "body": [
            "RemoveAbility( ${pszAbilityName} )",
            "-- Remove an ability from this unit by name."
        ],
        "prefix": "RemoveAbility",
        "description": "Remove an ability from this unit by name."
    },
    "CDOTABaseAbility:SpeakTrigger": {
        "body": [
            "SpeakTrigger(  )",
            "-- "
        ],
        "prefix": "SpeakTrigger",
        "description": ""
    },
    "CDOTA_BaseNPC_Hero:IncrementDenies": {
        "body": [
            "IncrementDenies(  )",
            "-- Value is stored in PlayerResource."
        ],
        "prefix": "IncrementDenies",
        "description": "Value is stored in PlayerResource."
    },
    "CDOTA_BaseNPC:IsRealHero": {
        "body": [
            "IsRealHero(  )",
            "-- Is this unit a boss?"
        ],
        "prefix": "IsRealHero",
        "description": "Is this unit a boss?"
    },
    "CDOTA_BaseNPC:SetDayTimeVisionRange": {
        "body": [
            "SetDayTimeVisionRange( ${iRange} )",
            "-- Set the base vision range."
        ],
        "prefix": "SetDayTimeVisionRange",
        "description": "Set the base vision range."
    },
    "UF_FAIL_INVULNERABLE": {
        "body": [
            "UF_FAIL_INVULNERABLE"
        ],
        "prefix": "UF_FAIL_INVULNERABLE",
        "description": "(19) "
    },
    "UF_FAIL_SUMMONED": {
        "body": [
            "UF_FAIL_SUMMONED"
        ],
        "prefix": "UF_FAIL_SUMMONED",
        "description": "(12) "
    },
    "UF_FAIL_ILLUSION": {
        "body": [
            "UF_FAIL_ILLUSION"
        ],
        "prefix": "UF_FAIL_ILLUSION",
        "description": "(11) "
    },
    "CDOTA_BaseNPC:IsIdle": {
        "body": [
            "IsIdle(  )",
            "-- Is this creature currently idle?"
        ],
        "prefix": "IsIdle",
        "description": "Is this creature currently idle?"
    },
    "CDOTA_Item:IsSellable": {
        "body": [
            "IsSellable(  )",
            "-- "
        ],
        "prefix": "IsSellable",
        "description": ""
    },
    "DOTA_ATTRIBUTE_STRENGTH": {
        "body": [
            "DOTA_ATTRIBUTE_STRENGTH"
        ],
        "prefix": "DOTA_ATTRIBUTE_STRENGTH",
        "description": "(0) "
    },
    "CDOTABaseAbility:GetChannelledManaCostPerSecond": {
        "body": [
            "GetChannelledManaCostPerSecond( ${iLevel} )",
            "-- "
        ],
        "prefix": "GetChannelledManaCostPerSecond",
        "description": ""
    },
    "ShowCustomHeaderMessage": {
        "body": [
            "ShowCustomHeaderMessage( ${string_1}, ${int_2}, ${int_3}, ${float_4} )",
            "-- ( const char *pszMessage, int nPlayerID, int nValue, float flTime ) - Supports localized strings - %s1 = PlayerName, %s2 = Value, %s3 = TeamName"
        ],
        "prefix": "ShowCustomHeaderMessage",
        "description": "( const char *pszMessage, int nPlayerID, int nValue, float flTime ) - Supports localized strings - %s1 = PlayerName, %s2 = Value, %s3 = TeamName"
    },
    "MODIFIER_PROPERTY_REINCARNATION": {
        "body": [
            "MODIFIER_PROPERTY_REINCARNATION"
        ],
        "prefix": "MODIFIER_PROPERTY_REINCARNATION",
        "description": "(62)  ReincarnateTime"
    },
    "CScriptParticleManager:ReleaseParticleIndex": {
        "body": [
            "ReleaseParticleIndex( ${int_1} )",
            "-- Frees the specified particle index"
        ],
        "prefix": "ReleaseParticleIndex",
        "description": "Frees the specified particle index"
    },
    "ACT_DOTA_FLINCH": {
        "body": [
            "ACT_DOTA_FLINCH"
        ],
        "prefix": "ACT_DOTA_FLINCH",
        "description": "(1507) "
    },
    "CDOTA_BaseNPC_Hero:HasRoomForItem": {
        "body": [
            "HasRoomForItem( ${pItemName}, ${bIncludeStashCombines}, ${bAllowSelling} )",
            "-- Args: const char* pItemName, bool bIncludeStashCombines, bool bAllowSelling"
        ],
        "prefix": "HasRoomForItem",
        "description": "Args: const char* pItemName, bool bIncludeStashCombines, bool bAllowSelling"
    },
    "CDOTA_PlayerResource:GetXPPerMin": {
        "body": [
            "GetXPPerMin( ${iPlayerID} )",
            "-- "
        ],
        "prefix": "GetXPPerMin",
        "description": ""
    },
    "ACT_DOTA_CAGED_CREEP_RAGE_OUT": {
        "body": [
            "ACT_DOTA_CAGED_CREEP_RAGE_OUT"
        ],
        "prefix": "ACT_DOTA_CAGED_CREEP_RAGE_OUT",
        "description": "(1645) "
    },
    "DOTA_ITEM_SLOT_3": {
        "body": [
            "DOTA_ITEM_SLOT_3"
        ],
        "prefix": "DOTA_ITEM_SLOT_3",
        "description": "(2) "
    },
    "CToneMapControllerComponent:SetMinExposure": {
        "body": [
            "SetMinExposure( ${float_1} )",
            "-- Sets min exposure for this tonemap controller"
        ],
        "prefix": "SetMinExposure",
        "description": "Sets min exposure for this tonemap controller"
    },
    "SetOpvarFloatAll": {
        "body": [
            "SetOpvarFloatAll( ${string_1}, ${string_2}, ${string_3}, ${float_4} )",
            "-- Sets an opvar value for all players"
        ],
        "prefix": "SetOpvarFloatAll",
        "description": "Sets an opvar value for all players"
    },
    "DOTA_HUD_VISIBILITY_INVENTORY_QUICKBUY": {
        "body": [
            "DOTA_HUD_VISIBILITY_INVENTORY_QUICKBUY"
        ],
        "prefix": "DOTA_HUD_VISIBILITY_INVENTORY_QUICKBUY",
        "description": "(8) "
    },
    "CEntityInstance:GetOrCreatePrivateScriptScope": {
        "body": [
            "GetOrCreatePrivateScriptScope(  )",
            "-- Retrieve, creating if necessary, the private per-instance script-side data associated with an entity"
        ],
        "prefix": "GetOrCreatePrivateScriptScope",
        "description": "Retrieve, creating if necessary, the private per-instance script-side data associated with an entity"
    },
    "DOTA_LOADOUT_TYPE_BACK": {
        "body": [
            "DOTA_LOADOUT_TYPE_BACK"
        ],
        "prefix": "DOTA_LOADOUT_TYPE_BACK",
        "description": "(10) "
    },
    "MODIFIER_PROPERTY_MANA_REGEN_PERCENTAGE": {
        "body": [
            "MODIFIER_PROPERTY_MANA_REGEN_PERCENTAGE"
        ],
        "prefix": "MODIFIER_PROPERTY_MANA_REGEN_PERCENTAGE",
        "description": "(47)  GetModifierPercentageManaRegen"
    },
    "UF_FAIL_NOT_PLAYER_CONTROLLED": {
        "body": [
            "UF_FAIL_NOT_PLAYER_CONTROLLED"
        ],
        "prefix": "UF_FAIL_NOT_PLAYER_CONTROLLED",
        "description": "(22) "
    },
    "DOTA_UNIT_TARGET_OTHER": {
        "body": [
            "DOTA_UNIT_TARGET_OTHER"
        ],
        "prefix": "DOTA_UNIT_TARGET_OTHER",
        "description": "(32) "
    },
    "CDOTA_Modifier_Lua_Vertical_Motion:UpdateVerticalMotion": {
        "body": [
            "UpdateVerticalMotion( ${me}, ${dt} )",
            "-- Perform any motion from the given interval on the NPC."
        ],
        "prefix": "UpdateVerticalMotion",
        "description": "Perform any motion from the given interval on the NPC."
    },
    "CEnvEntityMaker:SpawnEntityAtNamedEntityOrigin": {
        "body": [
            "SpawnEntityAtNamedEntityOrigin( ${pszName} )",
            "-- Create an entity at the location of a named entity"
        ],
        "prefix": "SpawnEntityAtNamedEntityOrigin",
        "description": "Create an entity at the location of a named entity"
    },
    "CDOTABaseAbility:GetMaxLevel": {
        "body": [
            "GetMaxLevel(  )",
            "-- "
        ],
        "prefix": "GetMaxLevel",
        "description": ""
    },
    "CPropVRHand:SetAttachment": {
        "body": [
            "SetAttachment( ${hAttachment} )",
            "-- Set the attachment for this hand"
        ],
        "prefix": "SetAttachment",
        "description": "Set the attachment for this hand"
    },
    "MODIFIER_STATE_FROZEN": {
        "body": [
            "MODIFIER_STATE_FROZEN"
        ],
        "prefix": "MODIFIER_STATE_FROZEN",
        "description": "(17) "
    },
    "ACT_DOTA_SHALLOW_GRAVE": {
        "body": [
            "ACT_DOTA_SHALLOW_GRAVE"
        ],
        "prefix": "ACT_DOTA_SHALLOW_GRAVE",
        "description": "(1670) "
    },
    "ACT_DOTA_LIFESTEALER_RAGE": {
        "body": [
            "ACT_DOTA_LIFESTEALER_RAGE"
        ],
        "prefix": "ACT_DOTA_LIFESTEALER_RAGE",
        "description": "(1566) "
    },
    "CDOTA_Modifier_Lua:IsStunDebuff": {
        "body": [
            "IsStunDebuff(  )",
            "-- True/false if this modifier is considered a stun for purge reasons."
        ],
        "prefix": "IsStunDebuff",
        "description": "True/false if this modifier is considered a stun for purge reasons."
    },
    "CDOTA_BaseNPC_Creature:IsChampion": {
        "body": [
            "IsChampion(  )",
            "-- Is this unit a champion?"
        ],
        "prefix": "IsChampion",
        "description": "Is this unit a champion?"
    },
    "ABILITY_CAN_BE_UPGRADED": {
        "body": [
            "ABILITY_CAN_BE_UPGRADED"
        ],
        "prefix": "ABILITY_CAN_BE_UPGRADED",
        "description": "(0) "
    },
    "CDOTABaseAbility:GetAbilityTargetFlags": {
        "body": [
            "GetAbilityTargetFlags(  )",
            "-- "
        ],
        "prefix": "GetAbilityTargetFlags",
        "description": ""
    },
    "UF_FAIL_ANCIENT": {
        "body": [
            "UF_FAIL_ANCIENT"
        ],
        "prefix": "UF_FAIL_ANCIENT",
        "description": "(10) "
    },
    "CDOTA_Buff:SetStackCount": {
        "body": [
            "SetStackCount( ${iCount} )",
            "-- "
        ],
        "prefix": "SetStackCount",
        "description": ""
    },
    "DOTA_UNIT_TARGET_FLAG_CHECK_DISABLE_HELP": {
        "body": [
            "DOTA_UNIT_TARGET_FLAG_CHECK_DISABLE_HELP"
        ],
        "prefix": "DOTA_UNIT_TARGET_FLAG_CHECK_DISABLE_HELP",
        "description": "(65536) "
    },
    "UTIL_MessageText_WithContext": {
        "body": [
            "UTIL_MessageText_WithContext( ${int_1}, ${string_2}, ${int_3}, ${int_4}, ${int_5}, ${int_6}, ${handle_7} )",
            "-- Sends colored text to one client. (Valid context keys: player_id, value, team_id)"
        ],
        "prefix": "UTIL_MessageText_WithContext",
        "description": "Sends colored text to one client. (Valid context keys: player_id, value, team_id)"
    },
    "CDOTA_BaseNPC_Hero:GetBonusDamageFromPrimaryStat": {
        "body": [
            "GetBonusDamageFromPrimaryStat(  )",
            "-- "
        ],
        "prefix": "GetBonusDamageFromPrimaryStat",
        "description": ""
    },
    "CDOTA_BaseNPC:SetMana": {
        "body": [
            "SetMana( ${flMana} )",
            "-- Set the mana on this unit."
        ],
        "prefix": "SetMana",
        "description": "Set the mana on this unit."
    },
    "ACT_MIRANA_LEAP_END": {
        "body": [
            "ACT_MIRANA_LEAP_END"
        ],
        "prefix": "ACT_MIRANA_LEAP_END",
        "description": "(1544) "
    },
    "CDOTA_Modifier_Lua:HeroEffectPriority": {
        "body": [
            "HeroEffectPriority(  )",
            "-- Relationship of this hero effect with those from other buffs (higher is more likely to be shown)."
        ],
        "prefix": "HeroEffectPriority",
        "description": "Relationship of this hero effect with those from other buffs (higher is more likely to be shown)."
    },
    "DAMAGE_TYPE_ALL": {
        "body": [
            "DAMAGE_TYPE_ALL"
        ],
        "prefix": "DAMAGE_TYPE_ALL",
        "description": "(7) "
    },
    "CDOTABaseAbility:StartCooldown": {
        "body": [
            "StartCooldown( ${flCooldown} )",
            "-- "
        ],
        "prefix": "StartCooldown",
        "description": ""
    },
    "CDOTA_PlayerResource:ClearRawPlayerDamageMatrix": {
        "body": [
            "ClearRawPlayerDamageMatrix( ${iPlayerID} )",
            "-- "
        ],
        "prefix": "ClearRawPlayerDamageMatrix",
        "description": ""
    },
    "UF_FAIL_ATTACK_IMMUNE": {
        "body": [
            "UF_FAIL_ATTACK_IMMUNE"
        ],
        "prefix": "UF_FAIL_ATTACK_IMMUNE",
        "description": "(23) "
    },
    "CDOTA_Modifier_Lua_Vertical_Motion:OnVerticalMotionInterrupted": {
        "body": [
            "OnVerticalMotionInterrupted(  )",
            "-- Called when the motion gets interrupted."
        ],
        "prefix": "OnVerticalMotionInterrupted",
        "description": "Called when the motion gets interrupted."
    },
    "CScriptParticleManager:SetParticleControlForward": {
        "body": [
            "SetParticleControlForward( ${int_1}, ${int_2}, ${Vector_3} )",
            "-- (int nFXIndex, int nPoint, vForward)"
        ],
        "prefix": "SetParticleControlForward",
        "description": "(int nFXIndex, int nPoint, vForward)"
    },
    "ACT_DOTA_PRESENT_ITEM": {
        "body": [
            "ACT_DOTA_PRESENT_ITEM"
        ],
        "prefix": "ACT_DOTA_PRESENT_ITEM",
        "description": "(1635) "
    },
    "CDOTABaseGameMode:SetTopBarTeamValuesVisible": {
        "body": [
            "SetTopBarTeamValuesVisible( ${bVisible} )",
            "-- Turning on/off the team values on the top game bar."
        ],
        "prefix": "SetTopBarTeamValuesVisible",
        "description": "Turning on/off the team values on the top game bar."
    },
    "ACT_DOTA_INTRO_LOOP": {
        "body": [
            "ACT_DOTA_INTRO_LOOP"
        ],
        "prefix": "ACT_DOTA_INTRO_LOOP",
        "description": "(1649) "
    },
    "CDOTA_BaseNPC:FindAbilityByName": {
        "body": [
            "FindAbilityByName( ${pAbilityName} )",
            "-- Retrieve an ability by name from the unit."
        ],
        "prefix": "FindAbilityByName",
        "description": "Retrieve an ability by name from the unit."
    },
    "CDOTABaseAbility:OnAbilityPinged": {
        "body": [
            "OnAbilityPinged( ${nPlayerID} )",
            "-- "
        ],
        "prefix": "OnAbilityPinged",
        "description": ""
    },
    "DOTA_ModifyGold_RoshanKill": {
        "body": [
            "DOTA_ModifyGold_RoshanKill"
        ],
        "prefix": "DOTA_ModifyGold_RoshanKill",
        "description": "(14) "
    },
    "CBaseEntity:SetContextNum": {
        "body": [
            "SetContextNum( ${pName}, ${fValue}, ${duration} )",
            "-- SetContextNum( name , value, duration ): store any key/value pair in this entity's dialog contexts. Value must be a number (int or float). Will last for duration (set 0 to mean 'forever')."
        ],
        "prefix": "SetContextNum",
        "description": "SetContextNum( name , value, duration ): store any key/value pair in this entity's dialog contexts. Value must be a number (int or float). Will last for duration (set 0 to mean 'forever')."
    },
    "CreateItemOnPositionForLaunch": {
        "body": [
            "CreateItemOnPositionForLaunch( ${Vector_1}, ${handle_2} )",
            "-- Create a physical item at a given location, can start in air (but doesn't clear a space)"
        ],
        "prefix": "CreateItemOnPositionForLaunch",
        "description": "Create a physical item at a given location, can start in air (but doesn't clear a space)"
    },
    "ACT_DOTA_ECHO_SLAM": {
        "body": [
            "ACT_DOTA_ECHO_SLAM"
        ],
        "prefix": "ACT_DOTA_ECHO_SLAM",
        "description": "(1539) "
    },
    "CDOTA_BaseNPC_Hero:GetPrimaryAttribute": {
        "body": [
            "GetPrimaryAttribute(  )",
            "-- 0 = strength, 1 = agility, 2 = intelligence."
        ],
        "prefix": "GetPrimaryAttribute",
        "description": "0 = strength, 1 = agility, 2 = intelligence."
    },
    "CDOTA_Ability_Lua:CastFilterResultLocation": {
        "body": [
            "CastFilterResultLocation( ${vLocation} )",
            "-- (Vector vLocation) Determine whether an issued command on a location is valid."
        ],
        "prefix": "CastFilterResultLocation",
        "description": "(Vector vLocation) Determine whether an issued command on a location is valid."
    },
    "CDOTA_BaseNPC:SetModifierStackCount": {
        "body": [
            "SetModifierStackCount( ${pszScriptName}, ${hCaster}, ${nStackCount} )",
            "-- Sets the stack count of a given modifier."
        ],
        "prefix": "SetModifierStackCount",
        "description": "Sets the stack count of a given modifier."
    },
    "ACT_DOTA_GESTURE_ACCENT": {
        "body": [
            "ACT_DOTA_GESTURE_ACCENT"
        ],
        "prefix": "ACT_DOTA_GESTURE_ACCENT",
        "description": "(1625) "
    },
    "MODIFIER_EVENT_ON_BUILDING_KILLED": {
        "body": [
            "MODIFIER_EVENT_ON_BUILDING_KILLED"
        ],
        "prefix": "MODIFIER_EVENT_ON_BUILDING_KILLED",
        "description": "(130)  OnBuildingKilled"
    },
    "DOTA_HEROPICK_STATE_CM_PICK": {
        "body": [
            "DOTA_HEROPICK_STATE_CM_PICK"
        ],
        "prefix": "DOTA_HEROPICK_STATE_CM_PICK",
        "description": "(27) "
    },
    "CreateTriggerRadiusApproximate": {
        "body": [
            "CreateTriggerRadiusApproximate( ${Vector_1}, ${float_2} )",
            "-- CreateTriggerRadiusApproximate( vecOrigin, flRadius ) : Creates and returns an AABB trigger thats bigger than the radius provided"
        ],
        "prefix": "CreateTriggerRadiusApproximate",
        "description": "CreateTriggerRadiusApproximate( vecOrigin, flRadius ) : Creates and returns an AABB trigger thats bigger than the radius provided"
    },
    "ITEM_PARTIALLY_SHAREABLE": {
        "body": [
            "ITEM_PARTIALLY_SHAREABLE"
        ],
        "prefix": "ITEM_PARTIALLY_SHAREABLE",
        "description": "(1) "
    },
    "DOTA_UNIT_TARGET_FLAG_DEAD": {
        "body": [
            "DOTA_UNIT_TARGET_FLAG_DEAD"
        ],
        "prefix": "DOTA_UNIT_TARGET_FLAG_DEAD",
        "description": "(8) "
    },
    "CDOTA_BaseNPC:HasGroundMovementCapability": {
        "body": [
            "HasGroundMovementCapability(  )",
            "-- "
        ],
        "prefix": "HasGroundMovementCapability",
        "description": ""
    },
    "MODIFIER_PROPERTY_MOVESPEED_BONUS_PERCENTAGE_UNIQUE": {
        "body": [
            "MODIFIER_PROPERTY_MOVESPEED_BONUS_PERCENTAGE_UNIQUE"
        ],
        "prefix": "MODIFIER_PROPERTY_MOVESPEED_BONUS_PERCENTAGE_UNIQUE",
        "description": "(13)  GetModifierMoveSpeedBonus_Percentage_Unique"
    },
    "DOTA_SPEECH_USER_ALL": {
        "body": [
            "DOTA_SPEECH_USER_ALL"
        ],
        "prefix": "DOTA_SPEECH_USER_ALL",
        "description": "(5) "
    },
    "CDOTA_BaseNPC:SetRangedProjectileName": {
        "body": [
            "SetRangedProjectileName( ${pProjectileName} )",
            "-- "
        ],
        "prefix": "SetRangedProjectileName",
        "description": ""
    },
    "CDOTA_Item_Lua:IsHiddenWhenStolen": {
        "body": [
            "IsHiddenWhenStolen(  )",
            "-- Returns true if this ability is hidden when stolen by Spell Steal."
        ],
        "prefix": "IsHiddenWhenStolen",
        "description": "Returns true if this ability is hidden when stolen by Spell Steal."
    },
    "GetMapName": {
        "body": [
            "GetMapName(  )",
            "-- Get the name of the map."
        ],
        "prefix": "GetMapName",
        "description": "Get the name of the map."
    },
    "AppendToLogFile": {
        "body": [
            "AppendToLogFile( ${string_1}, ${string_2} )",
            "-- Appends a string to a log file on the server"
        ],
        "prefix": "AppendToLogFile",
        "description": "Appends a string to a log file on the server"
    },
    "CDOTABaseGameMode:SetModifyGoldFilter": {
        "body": [
            "SetModifyGoldFilter( ${hFunction}, ${hContext} )",
            "-- Set a filter function to control the behavior when a hero's gold is modified. (Modify the table and Return true to use new values, return false to cancel the event)"
        ],
        "prefix": "SetModifyGoldFilter",
        "description": "Set a filter function to control the behavior when a hero's gold is modified. (Modify the table and Return true to use new values, return false to cancel the event)"
    },
    "GetGroundPosition": {
        "body": [
            "GetGroundPosition( ${Vector_1}, ${handle_2} )",
            "-- Returns the supplied position moved to the ground. Second parameter is an NPC for measuring movement collision hull offset."
        ],
        "prefix": "GetGroundPosition",
        "description": "Returns the supplied position moved to the ground. Second parameter is an NPC for measuring movement collision hull offset."
    },
    "ACT_DOTA_ICE_VORTEX": {
        "body": [
            "ACT_DOTA_ICE_VORTEX"
        ],
        "prefix": "ACT_DOTA_ICE_VORTEX",
        "description": "(1672) "
    },
    "CDOTABaseGameMode:GetAlwaysShowPlayerInventory": {
        "body": [
            "GetAlwaysShowPlayerInventory(  )",
            "-- Show the player hero's inventory in the HUD, regardless of what unit is selected."
        ],
        "prefix": "GetAlwaysShowPlayerInventory",
        "description": "Show the player hero's inventory in the HUD, regardless of what unit is selected."
    },
    "CBodyComponent:IsAttachedToParent": {
        "body": [
            "IsAttachedToParent(  )",
            "-- Is attached to parent"
        ],
        "prefix": "IsAttachedToParent",
        "description": "Is attached to parent"
    },
    "ACT_DOTA_SHRUG": {
        "body": [
            "ACT_DOTA_SHRUG"
        ],
        "prefix": "ACT_DOTA_SHRUG",
        "description": "(1633) "
    },
    "CDOTA_MapTree:CutDownRegrowAfter": {
        "body": [
            "CutDownRegrowAfter( ${flRegrowAfter}, ${nTeamNumberKnownTo} )",
            "-- Cuts down this tree. Parameters: float flRegrowAfter (-1 = never regrow), int nTeamNumberKnownTo (-1 = invalid team)"
        ],
        "prefix": "CutDownRegrowAfter",
        "description": "Cuts down this tree. Parameters: float flRegrowAfter (-1 = never regrow), int nTeamNumberKnownTo (-1 = invalid team)"
    },
    "DOTA_ABILITY_BEHAVIOR_DIRECTIONAL": {
        "body": [
            "DOTA_ABILITY_BEHAVIOR_DIRECTIONAL"
        ],
        "prefix": "DOTA_ABILITY_BEHAVIOR_DIRECTIONAL",
        "description": "(1024) "
    },
    "CDOTABaseAbility:UseResources": {
        "body": [
            "UseResources( ${bMana}, ${bGold}, ${bCooldown} )",
            "-- "
        ],
        "prefix": "UseResources",
        "description": ""
    },
    "DOTA_HERO_PICK_STATE_ABILITY_DRAFT_SELECT": {
        "body": [
            "DOTA_HERO_PICK_STATE_ABILITY_DRAFT_SELECT"
        ],
        "prefix": "DOTA_HERO_PICK_STATE_ABILITY_DRAFT_SELECT",
        "description": "(51) "
    },
    "CBaseAnimating:SetModelScale": {
        "body": [
            "SetModelScale( ${flScale} )",
            "-- Set scale of entity's model."
        ],
        "prefix": "SetModelScale",
        "description": "Set scale of entity's model."
    },
    "CDOTABaseAbility:GetHeroLevelRequiredToUpgrade": {
        "body": [
            "GetHeroLevelRequiredToUpgrade(  )",
            "-- "
        ],
        "prefix": "GetHeroLevelRequiredToUpgrade",
        "description": ""
    },
    "DAMAGE_TYPE_NONE": {
        "body": [
            "DAMAGE_TYPE_NONE"
        ],
        "prefix": "DAMAGE_TYPE_NONE",
        "description": "(0) "
    },
    "CDOTAPlayer:GetPlayerID": {
        "body": [
            "GetPlayerID(  )",
            "-- Get the player's official PlayerID; notably is -1 when the player isn't yet on a team."
        ],
        "prefix": "GetPlayerID",
        "description": "Get the player's official PlayerID; notably is -1 when the player isn't yet on a team."
    },
    "CDOTA_Item:IsRecipeGenerated": {
        "body": [
            "IsRecipeGenerated(  )",
            "-- "
        ],
        "prefix": "IsRecipeGenerated",
        "description": ""
    },
    "ACT_DOTA_TROT": {
        "body": [
            "ACT_DOTA_TROT"
        ],
        "prefix": "ACT_DOTA_TROT",
        "description": "(1686) "
    },
    "ACT_DOTA_SWIM": {
        "body": [
            "ACT_DOTA_SWIM"
        ],
        "prefix": "ACT_DOTA_SWIM",
        "description": "(1684) "
    },
    "DOTA_LOADOUT_TYPE_SUMMON": {
        "body": [
            "DOTA_LOADOUT_TYPE_SUMMON"
        ],
        "prefix": "DOTA_LOADOUT_TYPE_SUMMON",
        "description": "(17) "
    },
    "ACT_DOTA_BELLYACHE_LOOP": {
        "body": [
            "ACT_DOTA_BELLYACHE_LOOP"
        ],
        "prefix": "ACT_DOTA_BELLYACHE_LOOP",
        "description": "(1613) "
    },
    "MODIFIER_PROPERTY_MIN_HEALTH": {
        "body": [
            "MODIFIER_PROPERTY_MIN_HEALTH"
        ],
        "prefix": "MODIFIER_PROPERTY_MIN_HEALTH",
        "description": "(86)  GetMinHealth"
    },
    "CDOTA_Item:RequiresCharges": {
        "body": [
            "RequiresCharges(  )",
            "-- "
        ],
        "prefix": "RequiresCharges",
        "description": ""
    },
    "ACT_STORM_SPIRIT_OVERLOAD_RUN_OVERRIDE": {
        "body": [
            "ACT_STORM_SPIRIT_OVERLOAD_RUN_OVERRIDE"
        ],
        "prefix": "ACT_STORM_SPIRIT_OVERLOAD_RUN_OVERRIDE",
        "description": "(1554) "
    },
    "MODIFIER_STATE_NO_TEAM_SELECT": {
        "body": [
            "MODIFIER_STATE_NO_TEAM_SELECT"
        ],
        "prefix": "MODIFIER_STATE_NO_TEAM_SELECT",
        "description": "(26) "
    },
    "CDOTA_Modifier_Lua:GetEffectAttachType": {
        "body": [
            "GetEffectAttachType(  )",
            "-- Return the attach type of the particle system from GetEffectName."
        ],
        "prefix": "GetEffectAttachType",
        "description": "Return the attach type of the particle system from GetEffectName."
    },
    "CDOTA_PlayerResource:IncrementAssists": {
        "body": [
            "IncrementAssists( ${iPlayerID}, ${iVictimID} )",
            "-- "
        ],
        "prefix": "IncrementAssists",
        "description": ""
    },
    "CBaseEntity:SetGravity": {
        "body": [
            "SetGravity( ${flGravity} )",
            "-- Set PLAYER gravity, ignored for objects."
        ],
        "prefix": "SetGravity",
        "description": "Set PLAYER gravity, ignored for objects."
    },
    "CDOTA_BaseNPC:GetManaPercent": {
        "body": [
            "GetManaPercent(  )",
            "-- Get the percent of mana remaining."
        ],
        "prefix": "GetManaPercent",
        "description": "Get the percent of mana remaining."
    },
    "CDOTA_Item_Lua:OnAbilityPhaseStart": {
        "body": [
            "OnAbilityPhaseStart(  )",
            "-- Cast time begins (return true for successful cast)."
        ],
        "prefix": "OnAbilityPhaseStart",
        "description": "Cast time begins (return true for successful cast)."
    },
    "ACT_DOTA_CHANNEL_END_ABILITY_5": {
        "body": [
            "ACT_DOTA_CHANNEL_END_ABILITY_5"
        ],
        "prefix": "ACT_DOTA_CHANNEL_END_ABILITY_5",
        "description": "(1530) "
    },
    "DOTA_MOTION_CONTROLLER_PRIORITY_LOWEST": {
        "body": [
            "DOTA_MOTION_CONTROLLER_PRIORITY_LOWEST"
        ],
        "prefix": "DOTA_MOTION_CONTROLLER_PRIORITY_LOWEST",
        "description": "(0) "
    },
    "ACT_DOTA_LEAP_STUN": {
        "body": [
            "ACT_DOTA_LEAP_STUN"
        ],
        "prefix": "ACT_DOTA_LEAP_STUN",
        "description": "(1658) "
    },
    "LUA_MODIFIER_MOTION_HORIZONTAL": {
        "body": [
            "LUA_MODIFIER_MOTION_HORIZONTAL"
        ],
        "prefix": "LUA_MODIFIER_MOTION_HORIZONTAL",
        "description": "(1) "
    },
    "CDOTA_BaseNPC_Hero:ModifyGold": {
        "body": [
            "ModifyGold( ${iGoldChange}, ${bReliable}, ${iReason} )",
            "-- Gives this hero some gold.  Args: int nGoldChange, bool bReliable, int reason"
        ],
        "prefix": "ModifyGold",
        "description": "Gives this hero some gold.  Args: int nGoldChange, bool bReliable, int reason"
    },
    "MODIFIER_EVENT_ON_MODEL_CHANGED": {
        "body": [
            "MODIFIER_EVENT_ON_MODEL_CHANGED"
        ],
        "prefix": "MODIFIER_EVENT_ON_MODEL_CHANGED",
        "description": "(131)  OnModelChanged"
    },
    "CDOTA_Ability_Lua:CastFilterResult": {
        "body": [
            "CastFilterResult(  )",
            "-- Determine whether an issued command with no target is valid."
        ],
        "prefix": "CastFilterResult",
        "description": "Determine whether an issued command with no target is valid."
    },
    "DOTA_UNIT_TARGET_ALL": {
        "body": [
            "DOTA_UNIT_TARGET_ALL"
        ],
        "prefix": "DOTA_UNIT_TARGET_ALL",
        "description": "(63) "
    },
    "ABILITY_CANNOT_BE_UPGRADED_AT_MAX": {
        "body": [
            "ABILITY_CANNOT_BE_UPGRADED_AT_MAX"
        ],
        "prefix": "ABILITY_CANNOT_BE_UPGRADED_AT_MAX",
        "description": "(2) "
    },
    "CDOTA_BaseNPC:IsLowAttackPriority": {
        "body": [
            "IsLowAttackPriority(  )",
            "-- "
        ],
        "prefix": "IsLowAttackPriority",
        "description": ""
    },
    "DOTA_SPEECH_BAD_TEAM": {
        "body": [
            "DOTA_SPEECH_BAD_TEAM"
        ],
        "prefix": "DOTA_SPEECH_BAD_TEAM",
        "description": "(7) "
    },
    "CBaseTrigger:Enable": {
        "body": [
            "Enable(  )",
            "-- Enable the trigger"
        ],
        "prefix": "Enable",
        "description": "Enable the trigger"
    },
    "CDOTABaseAbility:IsCosmetic": {
        "body": [
            "IsCosmetic( ${hEntity} )",
            "-- "
        ],
        "prefix": "IsCosmetic",
        "description": ""
    },
    "Msg": {
        "body": [
            "Msg( ${string_1} )",
            "-- Print a message"
        ],
        "prefix": "Msg",
        "description": "Print a message"
    },
    "CDOTA_SimpleObstruction:SetEnabled": {
        "body": [
            "SetEnabled( ${bEnabled}, ${bForce} )",
            "-- Enable or disable the obstruction"
        ],
        "prefix": "SetEnabled",
        "description": "Enable or disable the obstruction"
    },
    "ACT_DOTA_UNDYING_DECAY": {
        "body": [
            "ACT_DOTA_UNDYING_DECAY"
        ],
        "prefix": "ACT_DOTA_UNDYING_DECAY",
        "description": "(1666) "
    },
    "CDOTABaseAbility:OnAbilityPhaseStart": {
        "body": [
            "OnAbilityPhaseStart(  )",
            "-- "
        ],
        "prefix": "OnAbilityPhaseStart",
        "description": ""
    },
    "CDOTABaseGameMode:SetBuybackEnabled": {
        "body": [
            "SetBuybackEnabled( ${bEnabled} )",
            "-- Enables or disables buyback completely."
        ],
        "prefix": "SetBuybackEnabled",
        "description": "Enables or disables buyback completely."
    },
    "DOTA_HUD_VISIBILITY_INVENTORY_GOLD": {
        "body": [
            "DOTA_HUD_VISIBILITY_INVENTORY_GOLD"
        ],
        "prefix": "DOTA_HUD_VISIBILITY_INVENTORY_GOLD",
        "description": "(11) "
    },
    "ACT_DOTA_SLEEPING_END": {
        "body": [
            "ACT_DOTA_SLEEPING_END"
        ],
        "prefix": "ACT_DOTA_SLEEPING_END",
        "description": "(1626) "
    },
    "CDOTA_BaseNPC:GetLastAttackTime": {
        "body": [
            "GetLastAttackTime(  )",
            "-- "
        ],
        "prefix": "GetLastAttackTime",
        "description": ""
    },
    "CDebugOverlayScriptHelper:Cross3D": {
        "body": [
            "Cross3D( ${Vector_1}, ${float_2}, ${int_3}, ${int_4}, ${int_5}, ${int_6}, ${bool_7}, ${float_8} )",
            "-- Draws a world-aligned cross. Specify origin in world space."
        ],
        "prefix": "Cross3D",
        "description": "Draws a world-aligned cross. Specify origin in world space."
    },
    "MODIFIER_EVENT_ON_TAKEDAMAGE_KILLCREDIT": {
        "body": [
            "MODIFIER_EVENT_ON_TAKEDAMAGE_KILLCREDIT"
        ],
        "prefix": "MODIFIER_EVENT_ON_TAKEDAMAGE_KILLCREDIT",
        "description": "(127)  OnTakeDamageKillCredit"
    },
    "DOTA_HUD_VISIBILITY_INVENTORY_ITEMS": {
        "body": [
            "DOTA_HUD_VISIBILITY_INVENTORY_ITEMS"
        ],
        "prefix": "DOTA_HUD_VISIBILITY_INVENTORY_ITEMS",
        "description": "(7) "
    },
    "CDOTA_BaseNPC:HasInventory": {
        "body": [
            "HasInventory(  )",
            "-- Does this unit have an inventory."
        ],
        "prefix": "HasInventory",
        "description": "Does this unit have an inventory."
    },
    "CDebugOverlayScriptHelper:VertArrow": {
        "body": [
            "VertArrow( ${Vector_1}, ${Vector_2}, ${float_3}, ${int_4}, ${int_5}, ${int_6}, ${int_7}, ${bool_8}, ${float_9} )",
            "-- Draws a vertical arrow. Specify endpoints in world space."
        ],
        "prefix": "VertArrow",
        "description": "Draws a vertical arrow. Specify endpoints in world space."
    },
    "ACT_DOTA_THIRST": {
        "body": [
            "ACT_DOTA_THIRST"
        ],
        "prefix": "ACT_DOTA_THIRST",
        "description": "(1537) "
    },
    "MODIFIER_PROPERTY_ABSOLUTE_NO_DAMAGE_PHYSICAL": {
        "body": [
            "MODIFIER_PROPERTY_ABSOLUTE_NO_DAMAGE_PHYSICAL"
        ],
        "prefix": "MODIFIER_PROPERTY_ABSOLUTE_NO_DAMAGE_PHYSICAL",
        "description": "(87)  GetAbsoluteNoDamagePhysical"
    },
    "MODIFIER_EVENT_ON_HEAL_RECEIVED": {
        "body": [
            "MODIFIER_EVENT_ON_HEAL_RECEIVED"
        ],
        "prefix": "MODIFIER_EVENT_ON_HEAL_RECEIVED",
        "description": "(129)  OnHealReceived"
    },
    "MODIFIER_PROPERTY_INCOMING_SPELL_DAMAGE_CONSTANT": {
        "body": [
            "MODIFIER_PROPERTY_INCOMING_SPELL_DAMAGE_CONSTANT"
        ],
        "prefix": "MODIFIER_PROPERTY_INCOMING_SPELL_DAMAGE_CONSTANT",
        "description": "(32)  GetModifierIncomingSpellDamageConstant"
    },
    "CDOTABaseGameMode:SetKillingSpreeAnnouncerDisabled": {
        "body": [
            "SetKillingSpreeAnnouncerDisabled( ${bDisabled} )",
            "-- Mutes the in-game killing spree announcer."
        ],
        "prefix": "SetKillingSpreeAnnouncerDisabled",
        "description": "Mutes the in-game killing spree announcer."
    },
    "CDOTA_BaseNPC:GetNeverMoveToClearSpace": {
        "body": [
            "GetNeverMoveToClearSpace(  )",
            "-- If set to true, we will never attempt to move this unit to clear space, even when it unphases."
        ],
        "prefix": "GetNeverMoveToClearSpace",
        "description": "If set to true, we will never attempt to move this unit to clear space, even when it unphases."
    },
    "CBaseModelEntity:SetRenderColor": {
        "body": [
            "SetRenderColor( ${r}, ${g}, ${b} )",
            "-- SetRenderColor( r, g, b ): Sets the render color of the entity."
        ],
        "prefix": "SetRenderColor",
        "description": "SetRenderColor( r, g, b ): Sets the render color of the entity."
    },
    "CDOTA_BaseNPC_Hero:SetBuyBackDisabledByReapersScythe": {
        "body": [
            "SetBuyBackDisabledByReapersScythe( ${bBuybackDisabled} )",
            "-- "
        ],
        "prefix": "SetBuyBackDisabledByReapersScythe",
        "description": ""
    },
    "ACT_DOTA_SHARPEN_WEAPON": {
        "body": [
            "ACT_DOTA_SHARPEN_WEAPON"
        ],
        "prefix": "ACT_DOTA_SHARPEN_WEAPON",
        "description": "(1637) "
    },
    "DOTA_HEROPICK_STATE_CD_PICK": {
        "body": [
            "DOTA_HEROPICK_STATE_CD_PICK"
        ],
        "prefix": "DOTA_HEROPICK_STATE_CD_PICK",
        "description": "(49) "
    },
    "DOTA_HUD_VISIBILITY_INVENTORY_COURIER": {
        "body": [
            "DOTA_HUD_VISIBILITY_INVENTORY_COURIER"
        ],
        "prefix": "DOTA_HUD_VISIBILITY_INVENTORY_COURIER",
        "description": "(9) "
    },
    "CDOTABaseAbility:GetDuration": {
        "body": [
            "GetDuration(  )",
            "-- "
        ],
        "prefix": "GetDuration",
        "description": ""
    },
    "DOTA_MINIMAP_EVENT_TUTORIAL_TASK_FINISHED": {
        "body": [
            "DOTA_MINIMAP_EVENT_TUTORIAL_TASK_FINISHED"
        ],
        "prefix": "DOTA_MINIMAP_EVENT_TUTORIAL_TASK_FINISHED",
        "description": "(256) "
    },
    "CDOTA_PlayerResource:GetCustomTeamAssignment": {
        "body": [
            "GetCustomTeamAssignment( ${iPlayerID} )",
            "-- Get the current custom team assignment for this player."
        ],
        "prefix": "GetCustomTeamAssignment",
        "description": "Get the current custom team assignment for this player."
    },
    "ACT_DOTA_CAST_ALACRITY": {
        "body": [
            "ACT_DOTA_CAST_ALACRITY"
        ],
        "prefix": "ACT_DOTA_CAST_ALACRITY",
        "description": "(1585) "
    },
    "DOTA_ABILITY_BEHAVIOR_NOT_LEARNABLE": {
        "body": [
            "DOTA_ABILITY_BEHAVIOR_NOT_LEARNABLE"
        ],
        "prefix": "DOTA_ABILITY_BEHAVIOR_NOT_LEARNABLE",
        "description": "(64) "
    },
    "CDOTA_PlayerResource:GetAssists": {
        "body": [
            "GetAssists( ${iPlayerID} )",
            "-- "
        ],
        "prefix": "GetAssists",
        "description": ""
    },
    "DOTA_HERO_PICK_STATE_ARDM_SELECT": {
        "body": [
            "DOTA_HERO_PICK_STATE_ARDM_SELECT"
        ],
        "prefix": "DOTA_HERO_PICK_STATE_ARDM_SELECT",
        "description": "(52) "
    },
    "DOTA_HEROPICK_STATE_CD_SELECT9": {
        "body": [
            "DOTA_HEROPICK_STATE_CD_SELECT9"
        ],
        "prefix": "DOTA_HEROPICK_STATE_CD_SELECT9",
        "description": "(47) "
    },
    "DOTA_LOADOUT_TYPE_SHAPESHIFT": {
        "body": [
            "DOTA_LOADOUT_TYPE_SHAPESHIFT"
        ],
        "prefix": "DOTA_LOADOUT_TYPE_SHAPESHIFT",
        "description": "(18) "
    },
    "CDOTABaseGameMode:GetStickyItemDisabled": {
        "body": [
            "GetStickyItemDisabled(  )",
            "-- Hide the sticky item in the quickbuy."
        ],
        "prefix": "GetStickyItemDisabled",
        "description": "Hide the sticky item in the quickbuy."
    },
    "CPointTemplate:DeleteCreatedSpawnGroups": {
        "body": [
            "DeleteCreatedSpawnGroups(  )",
            "-- DeleteCreatedSpawnGroups() : Deletes any spawn groups that this point_template has spawned. Note: The point_template will not be deleted by this."
        ],
        "prefix": "DeleteCreatedSpawnGroups",
        "description": "DeleteCreatedSpawnGroups() : Deletes any spawn groups that this point_template has spawned. Note: The point_template will not be deleted by this."
    },
    "GetItemCost": {
        "body": [
            "GetItemCost( ${string_1} )",
            "-- Get the cost of an item by name."
        ],
        "prefix": "GetItemCost",
        "description": "Get the cost of an item by name."
    },
    "CDOTABaseGameMode:SetFogOfWarDisabled": {
        "body": [
            "SetFogOfWarDisabled( ${bDisabled} )",
            "-- Turn the fog of war on or off."
        ],
        "prefix": "SetFogOfWarDisabled",
        "description": "Turn the fog of war on or off."
    },
    "CDOTA_Modifier_Lua:GetAuraSearchType": {
        "body": [
            "GetAuraSearchType(  )",
            "-- Return the unit classifications this aura applies its buff to."
        ],
        "prefix": "GetAuraSearchType",
        "description": "Return the unit classifications this aura applies its buff to."
    },
    "DOTA_DAMAGE_FLAG_IGNORES_MAGIC_ARMOR": {
        "body": [
            "DOTA_DAMAGE_FLAG_IGNORES_MAGIC_ARMOR"
        ],
        "prefix": "DOTA_DAMAGE_FLAG_IGNORES_MAGIC_ARMOR",
        "description": "(1) "
    },
    "CDOTA_BaseNPC:SetHullRadius": {
        "body": [
            "SetHullRadius( ${flHullRadius} )",
            "-- Set the collision hull radius of this NPC."
        ],
        "prefix": "SetHullRadius",
        "description": "Set the collision hull radius of this NPC."
    },
    "CDOTA_BaseNPC:IsSilenced": {
        "body": [
            "IsSilenced(  )",
            "-- "
        ],
        "prefix": "IsSilenced",
        "description": ""
    },
    "DOTA_UNIT_TARGET_TEAM_BOTH": {
        "body": [
            "DOTA_UNIT_TARGET_TEAM_BOTH"
        ],
        "prefix": "DOTA_UNIT_TARGET_TEAM_BOTH",
        "description": "(3) "
    },
    "CDOTABaseGameMode:SetStickyItemDisabled": {
        "body": [
            "SetStickyItemDisabled( ${bDisabled} )",
            "-- Hide the sticky item in the quickbuy."
        ],
        "prefix": "SetStickyItemDisabled",
        "description": "Hide the sticky item in the quickbuy."
    },
    "DOTA_HEROPICK_STATE_ALL_DRAFT_SELECT": {
        "body": [
            "DOTA_HEROPICK_STATE_ALL_DRAFT_SELECT"
        ],
        "prefix": "DOTA_HEROPICK_STATE_ALL_DRAFT_SELECT",
        "description": "(53) "
    },
    "MODIFIER_STATE_BLOCK_DISABLED": {
        "body": [
            "MODIFIER_STATE_BLOCK_DISABLED"
        ],
        "prefix": "MODIFIER_STATE_BLOCK_DISABLED",
        "description": "(12) "
    },
    "CBaseEntity:SetOwner": {
        "body": [
            "SetOwner( ${pOwner} )",
            "-- Sets this entity's owner"
        ],
        "prefix": "SetOwner",
        "description": "Sets this entity's owner"
    },
    "DOTA_GAMERULES_STATE_INIT": {
        "body": [
            "DOTA_GAMERULES_STATE_INIT"
        ],
        "prefix": "DOTA_GAMERULES_STATE_INIT",
        "description": "(0) "
    },
    "CDOTA_BaseNPC_Hero:IncrementNearbyCreepDeaths": {
        "body": [
            "IncrementNearbyCreepDeaths(  )",
            "-- Value is stored in PlayerResource."
        ],
        "prefix": "IncrementNearbyCreepDeaths",
        "description": "Value is stored in PlayerResource."
    },
    "MODIFIER_PROPERTY_HEALTH_REGEN_PERCENTAGE": {
        "body": [
            "MODIFIER_PROPERTY_HEALTH_REGEN_PERCENTAGE"
        ],
        "prefix": "MODIFIER_PROPERTY_HEALTH_REGEN_PERCENTAGE",
        "description": "(50)  GetModifierHealthRegenPercentage"
    },
    "CDOTA_BaseNPC:AttackReady": {
        "body": [
            "AttackReady(  )",
            "-- "
        ],
        "prefix": "AttackReady",
        "description": ""
    },
    "DOTA_TEAM_BADGUYS": {
        "body": [
            "DOTA_TEAM_BADGUYS"
        ],
        "prefix": "DOTA_TEAM_BADGUYS",
        "description": "(3) "
    },
    "StopListeningToGameEvent": {
        "body": [
            "StopListeningToGameEvent( ${int_1} )",
            "-- Stop listening to a particular game event."
        ],
        "prefix": "StopListeningToGameEvent",
        "description": "Stop listening to a particular game event."
    },
    "CDOTABaseAbility:IncrementModifierRefCount": {
        "body": [
            "IncrementModifierRefCount(  )",
            "-- "
        ],
        "prefix": "IncrementModifierRefCount",
        "description": ""
    },
    "ACT_DOTA_TINKER_REARM2": {
        "body": [
            "ACT_DOTA_TINKER_REARM2"
        ],
        "prefix": "ACT_DOTA_TINKER_REARM2",
        "description": "(1556) "
    },
    "MODIFIER_EVENT_ON_ATTACK_RECORD": {
        "body": [
            "MODIFIER_EVENT_ON_ATTACK_RECORD"
        ],
        "prefix": "MODIFIER_EVENT_ON_ATTACK_RECORD",
        "description": "(99)  OnAttackRecord"
    },
    "CBaseEntity:IsPlayer": {
        "body": [
            "IsPlayer(  )",
            "-- Is this entity a player?"
        ],
        "prefix": "IsPlayer",
        "description": "Is this entity a player?"
    },
    "CBaseModelEntity:SetLightGroup": {
        "body": [
            "SetLightGroup( ${pLightGroup} )",
            "-- SetLightGroup( string ): Sets the light group of the entity."
        ],
        "prefix": "SetLightGroup",
        "description": "SetLightGroup( string ): Sets the light group of the entity."
    },
    "CDOTA_PlayerResource:IncrementTotalEarnedXP": {
        "body": [
            "IncrementTotalEarnedXP( ${iPlayerID}, ${iXP}, ${nReason} )",
            "-- "
        ],
        "prefix": "IncrementTotalEarnedXP",
        "description": ""
    },
    "CDOTABaseAbility:GetBehavior": {
        "body": [
            "GetBehavior(  )",
            "-- "
        ],
        "prefix": "GetBehavior",
        "description": ""
    },
    "DOTA_LOADOUT_TYPE_HUD_SKIN": {
        "body": [
            "DOTA_LOADOUT_TYPE_HUD_SKIN"
        ],
        "prefix": "DOTA_LOADOUT_TYPE_HUD_SKIN",
        "description": "(34) "
    },
    "CDOTAPlayer:MakeRandomHeroSelection": {
        "body": [
            "MakeRandomHeroSelection(  )",
            "-- Randoms this player's hero."
        ],
        "prefix": "MakeRandomHeroSelection",
        "description": "Randoms this player's hero."
    },
    "CDOTA_BaseNPC:GetBaseDamageMax": {
        "body": [
            "GetBaseDamageMax(  )",
            "-- Get the maximum attack damage of this unit."
        ],
        "prefix": "GetBaseDamageMax",
        "description": "Get the maximum attack damage of this unit."
    },
    "CDOTA_PlayerResource:GetKillsDoneToHero": {
        "body": [
            "GetKillsDoneToHero( ${iPlayerID}, ${iVictimID} )",
            "-- "
        ],
        "prefix": "GetKillsDoneToHero",
        "description": ""
    },
    "ExponentialDecay": {
        "body": [
            "ExponentialDecay( ${float_1}, ${float_2}, ${float_3} )",
            "-- Smooth curve decreasing slower as it approaches zero"
        ],
        "prefix": "ExponentialDecay",
        "description": "Smooth curve decreasing slower as it approaches zero"
    },
    "CDOTA_PlayerResource:GetUnreliableGold": {
        "body": [
            "GetUnreliableGold( ${iPlayerID} )",
            "-- "
        ],
        "prefix": "GetUnreliableGold",
        "description": ""
    },
    "CDOTABaseAbility:OnChannelFinish": {
        "body": [
            "OnChannelFinish( ${bInterrupted} )",
            "-- "
        ],
        "prefix": "OnChannelFinish",
        "description": ""
    },
    "CDOTA_BaseNPC_Hero:SetTimeUntilRespawn": {
        "body": [
            "SetTimeUntilRespawn( ${time} )",
            "-- "
        ],
        "prefix": "SetTimeUntilRespawn",
        "description": ""
    },
    "CDOTA_Ability_Lua:GetChannelAnimation": {
        "body": [
            "GetChannelAnimation(  )",
            "-- Return channel animation of this ability."
        ],
        "prefix": "GetChannelAnimation",
        "description": "Return channel animation of this ability."
    },
    "CDOTA_Buff:GetParent": {
        "body": [
            "GetParent(  )",
            "-- Get the unit the modifier is parented to."
        ],
        "prefix": "GetParent",
        "description": "Get the unit the modifier is parented to."
    },
    "CDOTA_BaseNPC:SetBaseDamageMin": {
        "body": [
            "SetBaseDamageMin( ${nMin} )",
            "-- Sets the minimum base damage."
        ],
        "prefix": "SetBaseDamageMin",
        "description": "Sets the minimum base damage."
    },
    "CDOTA_PlayerResource:GetGoldPerMin": {
        "body": [
            "GetGoldPerMin( ${iPlayerID} )",
            "-- "
        ],
        "prefix": "GetGoldPerMin",
        "description": ""
    },
    "CDOTA_BaseNPC:HasFlyingVision": {
        "body": [
            "HasFlyingVision(  )",
            "-- "
        ],
        "prefix": "HasFlyingVision",
        "description": ""
    },
    "CBaseEntity:SetMaxHealth": {
        "body": [
            "SetMaxHealth( ${amt} )",
            "-- Set the maximum health of this entity."
        ],
        "prefix": "SetMaxHealth",
        "description": "Set the maximum health of this entity."
    },
    "CDOTABaseAbility:SetStolen": {
        "body": [
            "SetStolen( ${bStolen} )",
            "-- "
        ],
        "prefix": "SetStolen",
        "description": ""
    },
    "CDOTA_PlayerResource:IncrementClaimedMisses": {
        "body": [
            "IncrementClaimedMisses( ${iPlayerID} )",
            "-- "
        ],
        "prefix": "IncrementClaimedMisses",
        "description": ""
    },
    "CDOTA_BaseNPC:DropItemAtPosition": {
        "body": [
            "DropItemAtPosition( ${vDest}, ${hItem} )",
            "-- Drop an item at a given point."
        ],
        "prefix": "DropItemAtPosition",
        "description": "Drop an item at a given point."
    },
    "UF_FAIL_NIGHTMARED": {
        "body": [
            "UF_FAIL_NIGHTMARED"
        ],
        "prefix": "UF_FAIL_NIGHTMARED",
        "description": "(28) "
    },
    "CDOTA_BaseNPC_Hero:GetAttacker": {
        "body": [
            "GetAttacker( ${nIndex} )",
            "-- "
        ],
        "prefix": "GetAttacker",
        "description": ""
    },
    "StartSoundEventFromPosition": {
        "body": [
            "StartSoundEventFromPosition( ${string_1}, ${Vector_2} )",
            "-- Start a sound event from position"
        ],
        "prefix": "StartSoundEventFromPosition",
        "description": "Start a sound event from position"
    },
    "DOTA_ABILITY_BEHAVIOR_OPTIONAL_POINT": {
        "body": [
            "DOTA_ABILITY_BEHAVIOR_OPTIONAL_POINT"
        ],
        "prefix": "DOTA_ABILITY_BEHAVIOR_OPTIONAL_POINT",
        "description": "(16384) "
    },
    "CDOTA_BaseNPC_Hero:GetPrimaryStatValue": {
        "body": [
            "GetPrimaryStatValue(  )",
            "-- "
        ],
        "prefix": "GetPrimaryStatValue",
        "description": ""
    },
    "CDOTA_Item_Lua:GetCustomCastErrorLocation": {
        "body": [
            "GetCustomCastErrorLocation( ${vLocation} )",
            "-- (Vector vLocation) Return the error string of a failed command on a location."
        ],
        "prefix": "GetCustomCastErrorLocation",
        "description": "(Vector vLocation) Return the error string of a failed command on a location."
    },
    "MODIFIER_STATE_NO_TEAM_MOVE_TO": {
        "body": [
            "MODIFIER_STATE_NO_TEAM_MOVE_TO"
        ],
        "prefix": "MODIFIER_STATE_NO_TEAM_MOVE_TO",
        "description": "(25) "
    },
    "CDOTA_BaseNPC_Hero:ModifyIntellect": {
        "body": [
            "ModifyIntellect( ${flNewIntellect} )",
            "-- Adds passed value to base attribute value, then calls CalculateStatBonus."
        ],
        "prefix": "ModifyIntellect",
        "description": "Adds passed value to base attribute value, then calls CalculateStatBonus."
    },
    "CDOTABaseAbility:HeroXPChange": {
        "body": [
            "HeroXPChange( ${flXP} )",
            "-- "
        ],
        "prefix": "HeroXPChange",
        "description": ""
    },
    "CDOTA_BaseNPC:IsConsideredHero": {
        "body": [
            "IsConsideredHero(  )",
            "-- Is this unit a considered a hero for targeting purposes?"
        ],
        "prefix": "IsConsideredHero",
        "description": "Is this unit a considered a hero for targeting purposes?"
    },
    "CDOTA_PlayerResource:GetSteamAccountID": {
        "body": [
            "GetSteamAccountID( ${iPlayerID} )",
            "-- "
        ],
        "prefix": "GetSteamAccountID",
        "description": ""
    },
    "DOTA_LOADOUT_TYPE_ANNOUNCER": {
        "body": [
            "DOTA_LOADOUT_TYPE_ANNOUNCER"
        ],
        "prefix": "DOTA_LOADOUT_TYPE_ANNOUNCER",
        "description": "(30) "
    },
    "CreateEffect": {
        "body": [
            "CreateEffect( ${handle_1} )",
            "-- Pass table - Inputs: entity, effect"
        ],
        "prefix": "CreateEffect",
        "description": "Pass table - Inputs: entity, effect"
    },
    "CDOTA_Ability_Lua:OnUnStolen": {
        "body": [
            "OnUnStolen(  )",
            "-- Special behavior when lost by Spell Steal."
        ],
        "prefix": "OnUnStolen",
        "description": "Special behavior when lost by Spell Steal."
    },
    "CDOTA_PlayerResource:SetBuybackGoldLimitTime": {
        "body": [
            "SetBuybackGoldLimitTime( ${nPlayerID}, ${flBuybackCooldown} )",
            "-- "
        ],
        "prefix": "SetBuybackGoldLimitTime",
        "description": ""
    },
    "EmitAnnouncerSoundForTeamOnLocation": {
        "body": [
            "EmitAnnouncerSoundForTeamOnLocation( ${string_1}, ${int_2}, ${Vector_3} )",
            "-- Emit an announcer sound for a team at a specific location."
        ],
        "prefix": "EmitAnnouncerSoundForTeamOnLocation",
        "description": "Emit an announcer sound for a team at a specific location."
    },
    "CDOTA_Ability_Lua:OnProjectileHit_ExtraData": {
        "body": [
            "OnProjectileHit_ExtraData( ${hTarget}, ${vLocation}, ${table} )",
            "-- (HSCRIPT hTarget, Vector vLocation, table kv) Projectile has collided with a given target or reached its destination (target is invalid)."
        ],
        "prefix": "OnProjectileHit_ExtraData",
        "description": "(HSCRIPT hTarget, Vector vLocation, table kv) Projectile has collided with a given target or reached its destination (target is invalid)."
    },
    "DOTA_MUSIC_STATUS_NONE": {
        "body": [
            "DOTA_MUSIC_STATUS_NONE"
        ],
        "prefix": "DOTA_MUSIC_STATUS_NONE",
        "description": "(0) "
    },
    "CDOTABaseGameMode:GetFixedRespawnTime": {
        "body": [
            "GetFixedRespawnTime(  )",
            "-- Gets the fixed respawn time."
        ],
        "prefix": "GetFixedRespawnTime",
        "description": "Gets the fixed respawn time."
    },
    "CDOTABaseAbility:GetCastRange": {
        "body": [
            "GetCastRange( ${vLocation}, ${hTarget} )",
            "-- Gets the cast range of the ability."
        ],
        "prefix": "GetCastRange",
        "description": "Gets the cast range of the ability."
    },
    "CDOTA_BaseNPC:GetBaseHealthRegen": {
        "body": [
            "GetBaseHealthRegen(  )",
            "-- "
        ],
        "prefix": "GetBaseHealthRegen",
        "description": ""
    },
    "CDOTABaseAbility:GetModifierValue": {
        "body": [
            "GetModifierValue(  )",
            "-- "
        ],
        "prefix": "GetModifierValue",
        "description": ""
    },
    "DOTA_UNIT_CAP_RANGED_ATTACK": {
        "body": [
            "DOTA_UNIT_CAP_RANGED_ATTACK"
        ],
        "prefix": "DOTA_UNIT_CAP_RANGED_ATTACK",
        "description": "(2) "
    },
    "GetMaxOutputDelay": {
        "body": [
            "GetMaxOutputDelay( ${ehandle_1}, ${string_2} )",
            "-- Get the longest delay for all events attached to an output"
        ],
        "prefix": "GetMaxOutputDelay",
        "description": "Get the longest delay for all events attached to an output"
    },
    "MODIFIER_PROPERTY_STATS_STRENGTH_BONUS": {
        "body": [
            "MODIFIER_PROPERTY_STATS_STRENGTH_BONUS"
        ],
        "prefix": "MODIFIER_PROPERTY_STATS_STRENGTH_BONUS",
        "description": "(57)  GetModifierBonusStats_Strength"
    },
    "DOTA_HEROPICK_STATE_CM_BAN1": {
        "body": [
            "DOTA_HEROPICK_STATE_CM_BAN1"
        ],
        "prefix": "DOTA_HEROPICK_STATE_CM_BAN1",
        "description": "(7) "
    },
    "CDOTA_Item:IsRecipe": {
        "body": [
            "IsRecipe(  )",
            "-- "
        ],
        "prefix": "IsRecipe",
        "description": ""
    },
    "EmitGlobalSound": {
        "body": [
            "EmitGlobalSound( ${string_1} )",
            "-- Play named sound for all players"
        ],
        "prefix": "EmitGlobalSound",
        "description": "Play named sound for all players"
    },
    "CDOTA_BaseNPC:CanEntityBeSeenByMyTeam": {
        "body": [
            "CanEntityBeSeenByMyTeam( ${hEntity} )",
            "-- Check FoW to see if an entity is visible."
        ],
        "prefix": "CanEntityBeSeenByMyTeam",
        "description": "Check FoW to see if an entity is visible."
    },
    "CDOTA_PlayerResource:GetGoldSpentOnBuybacks": {
        "body": [
            "GetGoldSpentOnBuybacks( ${iPlayerID} )",
            "-- "
        ],
        "prefix": "GetGoldSpentOnBuybacks",
        "description": ""
    },
    "GetEntityIndexForTreeId": {
        "body": [
            "GetEntityIndexForTreeId( ${unsigned_1} )",
            "-- Get the enity index for a tree id specified as the entindex_target of a DOTA_UNIT_ORDER_CAST_TARGET_TREE."
        ],
        "prefix": "GetEntityIndexForTreeId",
        "description": "Get the enity index for a tree id specified as the entindex_target of a DOTA_UNIT_ORDER_CAST_TARGET_TREE."
    },
    "CSceneEntity:Start": {
        "body": [
            "Start( ${handle_1} )",
            "-- Start scene playback, takes activatorEntity as param"
        ],
        "prefix": "Start",
        "description": "Start scene playback, takes activatorEntity as param"
    },
    "CDOTA_BaseNPC:BoundingRadius2D": {
        "body": [
            "BoundingRadius2D(  )",
            "-- "
        ],
        "prefix": "BoundingRadius2D",
        "description": ""
    },
    "MODIFIER_STATE_SILENCED": {
        "body": [
            "MODIFIER_STATE_SILENCED"
        ],
        "prefix": "MODIFIER_STATE_SILENCED",
        "description": "(3) "
    },
    "CEntityInstance:GetEntityHandle": {
        "body": [
            "GetEntityHandle(  )",
            "-- Get the entity as an EHANDLE"
        ],
        "prefix": "GetEntityHandle",
        "description": "Get the entity as an EHANDLE"
    },
    "MODIFIER_PROPERTY_OVERRIDE_ANIMATION": {
        "body": [
            "MODIFIER_PROPERTY_OVERRIDE_ANIMATION"
        ],
        "prefix": "MODIFIER_PROPERTY_OVERRIDE_ANIMATION",
        "description": "(74)  GetOverrideAnimation"
    },
    "ACT_DOTA_WEAVERBUG_ATTACH": {
        "body": [
            "ACT_DOTA_WEAVERBUG_ATTACH"
        ],
        "prefix": "ACT_DOTA_WEAVERBUG_ATTACH",
        "description": "(1561) "
    },
    "CDOTABaseGameMode:GetStashPurchasingDisabled": {
        "body": [
            "GetStashPurchasingDisabled(  )",
            "-- Turn purchasing items to the stash off/on. If purchasing to the stash is off the player must be at a shop to purchase items."
        ],
        "prefix": "GetStashPurchasingDisabled",
        "description": "Turn purchasing items to the stash off/on. If purchasing to the stash is off the player must be at a shop to purchase items."
    },
    "CDebugOverlayScriptHelper:RemoveAllInScope": {
        "body": [
            "RemoveAllInScope( ${utlstringtoken_1} )",
            "-- Removes all overlays marked with a specific identifier, regardless of their lifetime."
        ],
        "prefix": "RemoveAllInScope",
        "description": "Removes all overlays marked with a specific identifier, regardless of their lifetime."
    },
    "ACT_DOTA_DIE": {
        "body": [
            "ACT_DOTA_DIE"
        ],
        "prefix": "ACT_DOTA_DIE",
        "description": "(1506) "
    },
    "CDOTA_CustomUIManager:DynamicHud_Create": {
        "body": [
            "DynamicHud_Create( ${int_1}, ${string_2}, ${string_3}, ${handle_4} )",
            "-- Create a new custom UI HUD element for the specified player(s). ( int PlayerID /*-1 means everyone*/, string ElementID /* should be unique */, string LayoutFileName, table DialogVariables /* can be nil */ )"
        ],
        "prefix": "DynamicHud_Create",
        "description": "Create a new custom UI HUD element for the specified player(s). ( int PlayerID /*-1 means everyone*/, string ElementID /* should be unique */, string LayoutFileName, table DialogVariables /* can be nil */ )"
    },
    "DOTA_INVENTORY_LIMIT_DROP_ON_GROUND": {
        "body": [
            "DOTA_INVENTORY_LIMIT_DROP_ON_GROUND"
        ],
        "prefix": "DOTA_INVENTORY_LIMIT_DROP_ON_GROUND",
        "description": "(16) "
    },
    "ACT_DOTA_SAND_KING_BURROW_OUT": {
        "body": [
            "ACT_DOTA_SAND_KING_BURROW_OUT"
        ],
        "prefix": "ACT_DOTA_SAND_KING_BURROW_OUT",
        "description": "(1569) "
    },
    "CDOTABaseGameMode:SetFountainConstantManaRegen": {
        "body": [
            "SetFountainConstantManaRegen( ${flConstantManaRegen} )",
            "-- Set the constant rate that the fountain will regen mana. (-1 for default)"
        ],
        "prefix": "SetFountainConstantManaRegen",
        "description": "Set the constant rate that the fountain will regen mana. (-1 for default)"
    },
    "CDOTA_Ability_Lua:GetManaCost": {
        "body": [
            "GetManaCost( ${iLevel} )",
            "-- Return mana cost at the given level (-1 is current)."
        ],
        "prefix": "GetManaCost",
        "description": "Return mana cost at the given level (-1 is current)."
    },
    "GetWorldMinY": {
        "body": [
            "GetWorldMinY(  )",
            "-- Gets the world's minimum Y position."
        ],
        "prefix": "GetWorldMinY",
        "description": "Gets the world's minimum Y position."
    },
    "CDOTA_Ability_Animation_TailSpin:SetPlaybackRate": {
        "body": [
            "SetPlaybackRate( ${flRate} )",
            "-- Override playbackrate"
        ],
        "prefix": "SetPlaybackRate",
        "description": "Override playbackrate"
    },
    "CDOTA_BaseNPC:ReduceMana": {
        "body": [
            "ReduceMana( ${flAmount} )",
            "-- Remove mana from this unit, this can be used for involuntary mana loss, not for mana that is spent."
        ],
        "prefix": "ReduceMana",
        "description": "Remove mana from this unit, this can be used for involuntary mana loss, not for mana that is spent."
    },
    "CDOTA_Modifier_Lua:DestroyOnExpire": {
        "body": [
            "DestroyOnExpire(  )",
            "-- True/false if this buff is removed when the duration expires."
        ],
        "prefix": "DestroyOnExpire",
        "description": "True/false if this buff is removed when the duration expires."
    },
    "CDOTA_BaseNPC_Hero:GetBaseIntellect": {
        "body": [
            "GetBaseIntellect(  )",
            "-- "
        ],
        "prefix": "GetBaseIntellect",
        "description": ""
    },
    "ACT_DOTA_ATTACK_EVENT": {
        "body": [
            "ACT_DOTA_ATTACK_EVENT"
        ],
        "prefix": "ACT_DOTA_ATTACK_EVENT",
        "description": "(1505) "
    },
    "CEntities:FindInSphere": {
        "body": [
            "FindInSphere( ${handle_1}, ${Vector_2}, ${float_3} )",
            "-- Find entities within a radius. Pass 'null' to start an iteration, or reference to a previously found entity to continue a search"
        ],
        "prefix": "FindInSphere",
        "description": "Find entities within a radius. Pass 'null' to start an iteration, or reference to a previously found entity to continue a search"
    },
    "ApplyDamage": {
        "body": [
            "ApplyDamage( ${handle_1} )",
            "-- Damage an npc."
        ],
        "prefix": "ApplyDamage",
        "description": "Damage an npc."
    },
    "CPropHMDAvatar:GetVRHand": {
        "body": [
            "GetVRHand( ${nHandID} )",
            "-- Get VR hand by ID"
        ],
        "prefix": "GetVRHand",
        "description": "Get VR hand by ID"
    },
    "ACT_DOTA_IDLE_IMPATIENT": {
        "body": [
            "ACT_DOTA_IDLE_IMPATIENT"
        ],
        "prefix": "ACT_DOTA_IDLE_IMPATIENT",
        "description": "(1636) "
    },
    "ACT_DOTA_GREEVIL_HOOK_START": {
        "body": [
            "ACT_DOTA_GREEVIL_HOOK_START"
        ],
        "prefix": "ACT_DOTA_GREEVIL_HOOK_START",
        "description": "(1619) "
    },
    "CScriptHeroList:GetHero": {
        "body": [
            "GetHero( ${int_1} )",
            "-- Get the Nth hero in the Hero List"
        ],
        "prefix": "GetHero",
        "description": "Get the Nth hero in the Hero List"
    },
    "CDOTA_BaseNPC:AddItemByName": {
        "body": [
            "AddItemByName( ${pszItemName} )",
            "-- Add an item to this unit's inventory."
        ],
        "prefix": "AddItemByName",
        "description": "Add an item to this unit's inventory."
    },
    "ACT_DOTA_TELEPORT_COOP_END": {
        "body": [
            "ACT_DOTA_TELEPORT_COOP_END"
        ],
        "prefix": "ACT_DOTA_TELEPORT_COOP_END",
        "description": "(1693) "
    },
    "CDOTA_PlayerResource:GetGoldLostToDeath": {
        "body": [
            "GetGoldLostToDeath( ${iPlayerID} )",
            "-- "
        ],
        "prefix": "GetGoldLostToDeath",
        "description": ""
    },
    "CDOTA_BaseNPC:IsEvadeDisabled": {
        "body": [
            "IsEvadeDisabled(  )",
            "-- "
        ],
        "prefix": "IsEvadeDisabled",
        "description": ""
    },
    "ACT_DOTA_DAGON": {
        "body": [
            "ACT_DOTA_DAGON"
        ],
        "prefix": "ACT_DOTA_DAGON",
        "description": "(1651) "
    },
    "ACT_DOTA_PET_WARD_SENTRY": {
        "body": [
            "ACT_DOTA_PET_WARD_SENTRY"
        ],
        "prefix": "ACT_DOTA_PET_WARD_SENTRY",
        "description": "(1700) "
    },
    "CDOTABaseAbility:GetAbilityIndex": {
        "body": [
            "GetAbilityIndex(  )",
            "-- "
        ],
        "prefix": "GetAbilityIndex",
        "description": ""
    },
    "CDOTA_Item_Lua:OnItemEquipped": {
        "body": [
            "OnItemEquipped( ${hItem} )",
            "-- ( HSCRIPT hItem ) Caster equipped item."
        ],
        "prefix": "OnItemEquipped",
        "description": "( HSCRIPT hItem ) Caster equipped item."
    },
    "CDOTA_BaseNPC:GetPhysicalArmorBaseValue": {
        "body": [
            "GetPhysicalArmorBaseValue(  )",
            "-- Returns base physical armor value."
        ],
        "prefix": "GetPhysicalArmorBaseValue",
        "description": "Returns base physical armor value."
    },
    "UF_FAIL_BUILDING": {
        "body": [
            "UF_FAIL_BUILDING"
        ],
        "prefix": "UF_FAIL_BUILDING",
        "description": "(6) "
    },
    "DOTA_UNIT_CAP_MOVE_GROUND": {
        "body": [
            "DOTA_UNIT_CAP_MOVE_GROUND"
        ],
        "prefix": "DOTA_UNIT_CAP_MOVE_GROUND",
        "description": "(1) "
    },
    "CDOTA_BaseNPC:MoveToPositionAggressive": {
        "body": [
            "MoveToPositionAggressive( ${vDest} )",
            "-- Issue an Attack-Move-To command."
        ],
        "prefix": "MoveToPositionAggressive",
        "description": "Issue an Attack-Move-To command."
    },
    "CEntityInstance:SetIntAttr": {
        "body": [
            "SetIntAttr( ${string_1}, ${int_2} )",
            "-- Set Integer Attribute"
        ],
        "prefix": "SetIntAttr",
        "description": "Set Integer Attribute"
    },
    "DOTA_UNIT_TARGET_TEAM_NONE": {
        "body": [
            "DOTA_UNIT_TARGET_TEAM_NONE"
        ],
        "prefix": "DOTA_UNIT_TARGET_TEAM_NONE",
        "description": "(0) "
    },
    "CDOTA_Modifier_Lua:OnIntervalThink": {
        "body": [
            "OnIntervalThink(  )",
            "-- Runs when the think interval occurs."
        ],
        "prefix": "OnIntervalThink",
        "description": "Runs when the think interval occurs."
    },
    "CDOTA_BaseNPC:SetCustomHealthLabel": {
        "body": [
            "SetCustomHealthLabel( ${pLabel}, ${r}, ${g}, ${b} )",
            "-- "
        ],
        "prefix": "SetCustomHealthLabel",
        "description": ""
    },
    "CInfoData:QueryNumber": {
        "body": [
            "QueryNumber( ${tok}, ${flDefault} )",
            "-- Query number data for this key"
        ],
        "prefix": "QueryNumber",
        "description": "Query number data for this key"
    },
    "CPointTemplate:GetSpawnedEntities": {
        "body": [
            "GetSpawnedEntities(  )",
            "-- GetSpawnedEntities() : Get the list of the most recent spawned entities"
        ],
        "prefix": "GetSpawnedEntities",
        "description": "GetSpawnedEntities() : Get the list of the most recent spawned entities"
    },
    "CNativeOutputs:AddOutput": {
        "body": [
            "AddOutput( ${string_1}, ${string_2} )",
            "-- Add an output"
        ],
        "prefix": "AddOutput",
        "description": "Add an output"
    },
    "CDOTA_Buff:DecrementStackCount": {
        "body": [
            "DecrementStackCount(  )",
            "-- Decrease this modifier's stack count by 1."
        ],
        "prefix": "DecrementStackCount",
        "description": "Decrease this modifier's stack count by 1."
    },
    "CDOTABaseGameMode:SetMaximumAttackSpeed": {
        "body": [
            "SetMaximumAttackSpeed( ${nMaxSpeed} )",
            "-- Set the maximum attack speed for units."
        ],
        "prefix": "SetMaximumAttackSpeed",
        "description": "Set the maximum attack speed for units."
    },
    "SendToServerConsole": {
        "body": [
            "SendToServerConsole( ${string_1} )",
            "-- Send a string to the console as a server command"
        ],
        "prefix": "SendToServerConsole",
        "description": "Send a string to the console as a server command"
    },
    "CDOTA_BaseNPC:GetIncreasedAttackSpeed": {
        "body": [
            "GetIncreasedAttackSpeed(  )",
            "-- "
        ],
        "prefix": "GetIncreasedAttackSpeed",
        "description": ""
    },
    "ACT_DOTA_CAST_SUN_STRIKE": {
        "body": [
            "ACT_DOTA_CAST_SUN_STRIKE"
        ],
        "prefix": "ACT_DOTA_CAST_SUN_STRIKE",
        "description": "(1587) "
    },
    "CDOTABaseAbility:IsToggle": {
        "body": [
            "IsToggle(  )",
            "-- "
        ],
        "prefix": "IsToggle",
        "description": ""
    },
    "MODIFIER_STATE_PROVIDES_VISION": {
        "body": [
            "MODIFIER_STATE_PROVIDES_VISION"
        ],
        "prefix": "MODIFIER_STATE_PROVIDES_VISION",
        "description": "(10) "
    },
    "CBaseEntity:GetMaxHealth": {
        "body": [
            "GetMaxHealth(  )",
            "-- Get the maximum health of this entity."
        ],
        "prefix": "GetMaxHealth",
        "description": "Get the maximum health of this entity."
    },
    "CBaseEntity:GetBaseVelocity": {
        "body": [
            "GetBaseVelocity(  )",
            "-- Get Base? velocity."
        ],
        "prefix": "GetBaseVelocity",
        "description": "Get Base? velocity."
    },
    "DOTA_HEROPICK_STATE_CM_SELECT5": {
        "body": [
            "DOTA_HEROPICK_STATE_CM_SELECT5"
        ],
        "prefix": "DOTA_HEROPICK_STATE_CM_SELECT5",
        "description": "(21) "
    },
    "CDOTABaseGameMode:ClearRuneSpawnFilter": {
        "body": [
            "ClearRuneSpawnFilter(  )",
            "-- Clear the script filter that controls what rune spawns."
        ],
        "prefix": "ClearRuneSpawnFilter",
        "description": "Clear the script filter that controls what rune spawns."
    },
    "CDOTA_BaseNPC:RemoveHorizontalMotionController": {
        "body": [
            "RemoveHorizontalMotionController( ${hBuff} )",
            "-- "
        ],
        "prefix": "RemoveHorizontalMotionController",
        "description": ""
    },
    "CDOTA_PlayerResource:IsHeroSelected": {
        "body": [
            "IsHeroSelected( ${pHeroname} )",
            "-- "
        ],
        "prefix": "IsHeroSelected",
        "description": ""
    },
    "CScriptParticleManager:CreateParticle": {
        "body": [
            "CreateParticle( ${string_1}, ${int_2}, ${handle_3} )",
            "-- Creates a new particle effect"
        ],
        "prefix": "CreateParticle",
        "description": "Creates a new particle effect"
    },
    "CDOTA_Item:IsDroppable": {
        "body": [
            "IsDroppable(  )",
            "-- "
        ],
        "prefix": "IsDroppable",
        "description": ""
    },
    "SplineVectors": {
        "body": [
            "SplineVectors( ${Vector_1}, ${Vector_2}, ${float_3} )",
            "-- (vector,vector,float) very basic interpolation of v0 to v1 over t on [0,1]"
        ],
        "prefix": "SplineVectors",
        "description": "(vector,vector,float) very basic interpolation of v0 to v1 over t on [0,1]"
    },
    "ACT_DOTA_TELEPORT": {
        "body": [
            "ACT_DOTA_TELEPORT"
        ],
        "prefix": "ACT_DOTA_TELEPORT",
        "description": "(1595) "
    },
    "ACT_DOTA_OVERRIDE_ABILITY_1": {
        "body": [
            "ACT_DOTA_OVERRIDE_ABILITY_1"
        ],
        "prefix": "ACT_DOTA_OVERRIDE_ABILITY_1",
        "description": "(1516) "
    },
    "GetFrameCount": {
        "body": [
            "GetFrameCount(  )",
            "-- Returns the engines current frame count"
        ],
        "prefix": "GetFrameCount",
        "description": "Returns the engines current frame count"
    },
    "CDOTA_BaseNPC:GetRangeToUnit": {
        "body": [
            "GetRangeToUnit( ${hNPC} )",
            "-- "
        ],
        "prefix": "GetRangeToUnit",
        "description": ""
    },
    "PrecacheModel": {
        "body": [
            "PrecacheModel( ${string_1}, ${handle_2} )",
            "-- ( modelName, context ) - Manually precache a single model"
        ],
        "prefix": "PrecacheModel",
        "description": "( modelName, context ) - Manually precache a single model"
    },
    "MODIFIER_PROPERTY_CASTTIME_PERCENTAGE": {
        "body": [
            "MODIFIER_PROPERTY_CASTTIME_PERCENTAGE"
        ],
        "prefix": "MODIFIER_PROPERTY_CASTTIME_PERCENTAGE",
        "description": "(67)  GetModifierPercentageCasttime"
    },
    "DOTA_ABILITY_BEHAVIOR_NONE": {
        "body": [
            "DOTA_ABILITY_BEHAVIOR_NONE"
        ],
        "prefix": "DOTA_ABILITY_BEHAVIOR_NONE",
        "description": "(0) "
    },
    "CreateUnitByName": {
        "body": [
            "CreateUnitByName( ${string_1}, ${Vector_2}, ${bool_3}, ${handle_4}, ${handle_5}, ${int_6} )",
            "-- Creates a DOTA unit by its dota_npc_units.txt name"
        ],
        "prefix": "CreateUnitByName",
        "description": "Creates a DOTA unit by its dota_npc_units.txt name"
    },
    "CDOTA_BaseNPC_Hero:GetBaseDamageMin": {
        "body": [
            "GetBaseDamageMin(  )",
            "-- Hero damage is also affected by attributes."
        ],
        "prefix": "GetBaseDamageMin",
        "description": "Hero damage is also affected by attributes."
    },
    "TraceHull": {
        "body": [
            "TraceHull( ${handle_1} )",
            "-- Pass table - Inputs: start, end, min, max, mask, ignore  -- outputs: pos, fraction, hit, enthit, startsolid"
        ],
        "prefix": "TraceHull",
        "description": "Pass table - Inputs: start, end, min, max, mask, ignore  -- outputs: pos, fraction, hit, enthit, startsolid"
    },
    "DOTA_ABILITY_BEHAVIOR_DONT_RESUME_ATTACK": {
        "body": [
            "DOTA_ABILITY_BEHAVIOR_DONT_RESUME_ATTACK"
        ],
        "prefix": "DOTA_ABILITY_BEHAVIOR_DONT_RESUME_ATTACK",
        "description": "(33554432) "
    },
    "DOTA_ABILITY_BEHAVIOR_UNIT_TARGET": {
        "body": [
            "DOTA_ABILITY_BEHAVIOR_UNIT_TARGET"
        ],
        "prefix": "DOTA_ABILITY_BEHAVIOR_UNIT_TARGET",
        "description": "(8) "
    },
    "CDOTA_BaseNPC:SetAttacking": {
        "body": [
            "SetAttacking( ${hAttackTarget} )",
            "-- "
        ],
        "prefix": "SetAttacking",
        "description": ""
    },
    "ACT_DOTA_MINI_TAUNT": {
        "body": [
            "ACT_DOTA_MINI_TAUNT"
        ],
        "prefix": "ACT_DOTA_MINI_TAUNT",
        "description": "(1681) "
    },
    "ACT_DOTA_CAST_ABILITY_7": {
        "body": [
            "ACT_DOTA_CAST_ABILITY_7"
        ],
        "prefix": "ACT_DOTA_CAST_ABILITY_7",
        "description": "(1598) "
    },
    "CDOTABaseGameMode:GetTowerBackdoorProtectionEnabled": {
        "body": [
            "GetTowerBackdoorProtectionEnabled(  )",
            "-- Enables/Disables tower backdoor protection."
        ],
        "prefix": "GetTowerBackdoorProtectionEnabled",
        "description": "Enables/Disables tower backdoor protection."
    },
    "CDOTA_Item_DataDriven:ApplyDataDrivenModifier": {
        "body": [
            "ApplyDataDrivenModifier( ${hCaster}, ${hTarget}, ${pszModifierName}, ${hModifierTable} )",
            "-- Applies a data driven modifier to the target"
        ],
        "prefix": "ApplyDataDrivenModifier",
        "description": "Applies a data driven modifier to the target"
    },
    "ACT_DOTA_OVERRIDE_ABILITY_3": {
        "body": [
            "ACT_DOTA_OVERRIDE_ABILITY_3"
        ],
        "prefix": "ACT_DOTA_OVERRIDE_ABILITY_3",
        "description": "(1518) "
    },
    "CreateItem": {
        "body": [
            "CreateItem( ${string_1}, ${handle_2}, ${handle_3} )",
            "-- Create a DOTA item"
        ],
        "prefix": "CreateItem",
        "description": "Create a DOTA item"
    },
    "CDOTABaseGameMode:SetTopBarTeamValuesOverride": {
        "body": [
            "SetTopBarTeamValuesOverride( ${bOverride} )",
            "-- Override the values of the team values on the top game bar."
        ],
        "prefix": "SetTopBarTeamValuesOverride",
        "description": "Override the values of the team values on the top game bar."
    },
    "CBaseEntity:GetHealth": {
        "body": [
            "GetHealth(  )",
            "-- Get the health of this entity."
        ],
        "prefix": "GetHealth",
        "description": "Get the health of this entity."
    },
    "CDOTA_Item_Lua:GetAssociatedPrimaryAbilities": {
        "body": [
            "GetAssociatedPrimaryAbilities(  )",
            "-- Returns abilities that are stolen simultaneously, or otherwise related in functionality."
        ],
        "prefix": "GetAssociatedPrimaryAbilities",
        "description": "Returns abilities that are stolen simultaneously, or otherwise related in functionality."
    },
    "FireEntityIOInputNameOnly": {
        "body": [
            "FireEntityIOInputNameOnly( ${ehandle_1}, ${string_2} )",
            "-- Fire Entity's Action Input w/no data"
        ],
        "prefix": "FireEntityIOInputNameOnly",
        "description": "Fire Entity's Action Input w/no data"
    },
    "CDOTA_BaseNPC_Hero:GetStreak": {
        "body": [
            "GetStreak(  )",
            "-- Value is stored in PlayerResource."
        ],
        "prefix": "GetStreak",
        "description": "Value is stored in PlayerResource."
    },
    "CDOTA_BaseNPC:NoHealthBar": {
        "body": [
            "NoHealthBar(  )",
            "-- "
        ],
        "prefix": "NoHealthBar",
        "description": ""
    },
    "CDOTA_PlayerResource:GetTimeOfLastItemPurchase": {
        "body": [
            "GetTimeOfLastItemPurchase( ${iPlayerID} )",
            "-- "
        ],
        "prefix": "GetTimeOfLastItemPurchase",
        "description": ""
    },
    "CBodyComponent:AddImpulseAtPosition": {
        "body": [
            "AddImpulseAtPosition( ${Vector_1}, ${Vector_2} )",
            "-- Apply an impulse at a worldspace position to the physics"
        ],
        "prefix": "AddImpulseAtPosition",
        "description": "Apply an impulse at a worldspace position to the physics"
    },
    "CBaseEntity:GetLocalAngularVelocity": {
        "body": [
            "GetLocalAngularVelocity(  )",
            "-- Maybe local angvel"
        ],
        "prefix": "GetLocalAngularVelocity",
        "description": "Maybe local angvel"
    },
    "DOTA_DAMAGE_FLAG_BYPASSES_INVULNERABILITY": {
        "body": [
            "DOTA_DAMAGE_FLAG_BYPASSES_INVULNERABILITY"
        ],
        "prefix": "DOTA_DAMAGE_FLAG_BYPASSES_INVULNERABILITY",
        "description": "(4) "
    },
    "CDOTA_BaseNPC_Hero:GetStatsBasedManaRegen": {
        "body": [
            "GetStatsBasedManaRegen(  )",
            "-- Returns only the regen based on Intelligence."
        ],
        "prefix": "GetStatsBasedManaRegen",
        "description": "Returns only the regen based on Intelligence."
    },
    "CDOTABaseAbility:UpgradeAbility": {
        "body": [
            "UpgradeAbility( ${bSupressSpeech} )",
            "-- "
        ],
        "prefix": "UpgradeAbility",
        "description": ""
    },
    "CBaseAnimating:ScriptLookupAttachment": {
        "body": [
            "ScriptLookupAttachment( ${pAttachmentName} )",
            "-- Get the named attachement id."
        ],
        "prefix": "ScriptLookupAttachment",
        "description": "Get the named attachement id."
    },
    "CBaseEntity:DeleteAttribute": {
        "body": [
            "DeleteAttribute( ${pName} )",
            "-- Delete an entity attribute."
        ],
        "prefix": "DeleteAttribute",
        "description": "Delete an entity attribute."
    },
    "DOTA_HEROPICK_STATE_CD_BAN2": {
        "body": [
            "DOTA_HEROPICK_STATE_CD_BAN2"
        ],
        "prefix": "DOTA_HEROPICK_STATE_CD_BAN2",
        "description": "(34) "
    },
    "PATTACH_CUSTOMORIGIN_FOLLOW": {
        "body": [
            "PATTACH_CUSTOMORIGIN_FOLLOW"
        ],
        "prefix": "PATTACH_CUSTOMORIGIN_FOLLOW",
        "description": "(3) "
    },
    "CDOTABaseAbility:RefCountsModifiers": {
        "body": [
            "RefCountsModifiers(  )",
            "-- "
        ],
        "prefix": "RefCountsModifiers",
        "description": ""
    },
    "ShowGenericPopup": {
        "body": [
            "ShowGenericPopup( ${string_1}, ${string_2}, ${string_3}, ${string_4}, ${int_5} )",
            "-- Show a generic popup dialog for all players."
        ],
        "prefix": "ShowGenericPopup",
        "description": "Show a generic popup dialog for all players."
    },
    "PauseGame": {
        "body": [
            "PauseGame( ${bool_1} )",
            "-- Pause or unpause the game."
        ],
        "prefix": "PauseGame",
        "description": "Pause or unpause the game."
    },
    "ACT_DOTA_CHILLING_TOUCH": {
        "body": [
            "ACT_DOTA_CHILLING_TOUCH"
        ],
        "prefix": "ACT_DOTA_CHILLING_TOUCH",
        "description": "(1673) "
    },
    "CPointTemplate:ForceSpawn": {
        "body": [
            "ForceSpawn(  )",
            "-- ForceSpawn() : Spawns all of the entities the point_template is pointing at."
        ],
        "prefix": "ForceSpawn",
        "description": "ForceSpawn() : Spawns all of the entities the point_template is pointing at."
    },
    "CDOTABaseGameMode:SetHUDVisible": {
        "body": [
            "SetHUDVisible( ${iHUDElement}, ${bVisible} )",
            "-- Set the HUD element visibility."
        ],
        "prefix": "SetHUDVisible",
        "description": "Set the HUD element visibility."
    },
    "CDOTA_BaseNPC:HasItemInInventory": {
        "body": [
            "HasItemInInventory( ${pItemName} )",
            "-- See whether this unit has an item by name."
        ],
        "prefix": "HasItemInInventory",
        "description": "See whether this unit has an item by name."
    },
    "CEnvProjectedTexture:SetLinearAttenuation": {
        "body": [
            "SetLinearAttenuation( ${flAtten} )",
            "-- Set light linear attenuation value"
        ],
        "prefix": "SetLinearAttenuation",
        "description": "Set light linear attenuation value"
    },
    "MODIFIER_EVENT_ON_UNIT_MOVED": {
        "body": [
            "MODIFIER_EVENT_ON_UNIT_MOVED"
        ],
        "prefix": "MODIFIER_EVENT_ON_UNIT_MOVED",
        "description": "(107)  OnUnitMoved"
    },
    "CDOTA_CustomUIManager:DynamicHud_SetDialogVariables": {
        "body": [
            "DynamicHud_SetDialogVariables( ${int_1}, ${string_2}, ${handle_3} )",
            "-- Add or modify dialog variables for an existing custom hud element ( int PlayerID /*-1 means everyone*/, string ElementID, table DialogVariables )"
        ],
        "prefix": "DynamicHud_SetDialogVariables",
        "description": "Add or modify dialog variables for an existing custom hud element ( int PlayerID /*-1 means everyone*/, string ElementID, table DialogVariables )"
    },
    "CDOTABaseAbility:IsAttributeBonus": {
        "body": [
            "IsAttributeBonus(  )",
            "-- "
        ],
        "prefix": "IsAttributeBonus",
        "description": ""
    },
    "CDOTA_BaseNPC:SetOrigin": {
        "body": [
            "SetOrigin( ${vLocation} )",
            "-- Set the unit's origin."
        ],
        "prefix": "SetOrigin",
        "description": "Set the unit's origin."
    },
    "CDOTA_CustomUIManager:DynamicHud_SetVisible": {
        "body": [
            "DynamicHud_SetVisible( ${int_1}, ${string_2}, ${bool_3} )",
            "-- Toggle the visibility of an existing custom hud element ( int PlayerID /*-1 means everyone*/, string ElementID, bool Visible )"
        ],
        "prefix": "DynamicHud_SetVisible",
        "description": "Toggle the visibility of an existing custom hud element ( int PlayerID /*-1 means everyone*/, string ElementID, bool Visible )"
    },
    "DOTA_ABILITY_BEHAVIOR_DONT_ALERT_TARGET": {
        "body": [
            "DOTA_ABILITY_BEHAVIOR_DONT_ALERT_TARGET"
        ],
        "prefix": "DOTA_ABILITY_BEHAVIOR_DONT_ALERT_TARGET",
        "description": "(16777216) "
    },
    "CSceneEntity:FindCamera": {
        "body": [
            "FindCamera(  )",
            "-- Get the camera"
        ],
        "prefix": "FindCamera",
        "description": "Get the camera"
    },
    "CDOTA_Buff:GetAbility": {
        "body": [
            "GetAbility(  )",
            "-- Get the ability that generated the modifier."
        ],
        "prefix": "GetAbility",
        "description": "Get the ability that generated the modifier."
    },
    "CDOTA_BaseNPC:GetAttackAnimationPoint": {
        "body": [
            "GetAttackAnimationPoint(  )",
            "-- "
        ],
        "prefix": "GetAttackAnimationPoint",
        "description": ""
    },
    "UTIL_MessageTextAll_WithContext": {
        "body": [
            "UTIL_MessageTextAll_WithContext( ${string_1}, ${int_2}, ${int_3}, ${int_4}, ${int_5}, ${handle_6} )",
            "-- Sends colored text to all clients. (Valid context keys: player_id, value, team_id)"
        ],
        "prefix": "UTIL_MessageTextAll_WithContext",
        "description": "Sends colored text to all clients. (Valid context keys: player_id, value, team_id)"
    },
    "DebugDrawClear": {
        "body": [
            "DebugDrawClear(  )",
            "-- Try to clear all the debug overlay info"
        ],
        "prefix": "DebugDrawClear",
        "description": "Try to clear all the debug overlay info"
    },
    "CDOTA_Ability_Lua:GetConceptRecipientType": {
        "body": [
            "GetConceptRecipientType(  )",
            "-- Return who hears speech when this spell is cast."
        ],
        "prefix": "GetConceptRecipientType",
        "description": "Return who hears speech when this spell is cast."
    },
    "CDOTABaseAbility:OnHeroCalculateStatBonus": {
        "body": [
            "OnHeroCalculateStatBonus(  )",
            "-- "
        ],
        "prefix": "OnHeroCalculateStatBonus",
        "description": ""
    },
    "ACT_DOTA_DEATH_BY_SNIPER": {
        "body": [
            "ACT_DOTA_DEATH_BY_SNIPER"
        ],
        "prefix": "ACT_DOTA_DEATH_BY_SNIPER",
        "description": "(1642) "
    },
    "CEntities:Next": {
        "body": [
            "Next( ${handle_1} )",
            "-- Continue an iteration over the list of entities, providing reference to a previously found entity"
        ],
        "prefix": "Next",
        "description": "Continue an iteration over the list of entities, providing reference to a previously found entity"
    },
    "CDotaQuest:CompleteQuest": {
        "body": [
            "CompleteQuest(  )",
            "-- Mark this quest complete"
        ],
        "prefix": "CompleteQuest",
        "description": "Mark this quest complete"
    },
    "CDOTABaseAbility:PayGoldCost": {
        "body": [
            "PayGoldCost(  )",
            "-- "
        ],
        "prefix": "PayGoldCost",
        "description": ""
    },
    "CDOTABaseAbility:SetLevel": {
        "body": [
            "SetLevel( ${iLevel} )",
            "-- Sets the level of this ability."
        ],
        "prefix": "SetLevel",
        "description": "Sets the level of this ability."
    },
    "DOTA_MUSIC_STATUS_PRE_GAME_EXPLORATION": {
        "body": [
            "DOTA_MUSIC_STATUS_PRE_GAME_EXPLORATION"
        ],
        "prefix": "DOTA_MUSIC_STATUS_PRE_GAME_EXPLORATION",
        "description": "(3) "
    },
    "RotateOrientation": {
        "body": [
            "RotateOrientation( ${QAngle_1}, ${QAngle_2} )",
            "-- Rotate a QAngle by another QAngle."
        ],
        "prefix": "RotateOrientation",
        "description": "Rotate a QAngle by another QAngle."
    },
    "CDOTA_BaseNPC_Hero:SetBaseAgility": {
        "body": [
            "SetBaseAgility( ${flAgility} )",
            "-- "
        ],
        "prefix": "SetBaseAgility",
        "description": ""
    },
    "CDOTA_BaseNPC_Hero:GetStrengthGain": {
        "body": [
            "GetStrengthGain(  )",
            "-- "
        ],
        "prefix": "GetStrengthGain",
        "description": ""
    },
    "CDOTA_BaseNPC:NoTeamMoveTo": {
        "body": [
            "NoTeamMoveTo(  )",
            "-- "
        ],
        "prefix": "NoTeamMoveTo",
        "description": ""
    },
    "CEnvProjectedTexture:SetNearRange": {
        "body": [
            "SetNearRange( ${flRange} )",
            "-- Set light minimum range"
        ],
        "prefix": "SetNearRange",
        "description": "Set light minimum range"
    },
    "CBaseEntity:EmitSoundParams": {
        "body": [
            "EmitSoundParams( ${soundname}, ${nPitch}, ${flVolume}, ${flDelay} )",
            "-- Plays/modifies a sound from this entity. changes sound if nPitch and/or flVol or flSoundTime is > 0."
        ],
        "prefix": "EmitSoundParams",
        "description": "Plays/modifies a sound from this entity. changes sound if nPitch and/or flVol or flSoundTime is > 0."
    },
    "ACT_DOTA_DEFEAT": {
        "body": [
            "ACT_DOTA_DEFEAT"
        ],
        "prefix": "ACT_DOTA_DEFEAT",
        "description": "(1592) "
    },
    "CDOTABaseAbility:GetCursorPosition": {
        "body": [
            "GetCursorPosition(  )",
            "-- "
        ],
        "prefix": "GetCursorPosition",
        "description": ""
    },
    "ACT_DOTA_CAST_ICE_WALL": {
        "body": [
            "ACT_DOTA_CAST_ICE_WALL"
        ],
        "prefix": "ACT_DOTA_CAST_ICE_WALL",
        "description": "(1589) "
    },
    "CDOTA_PlayerResource:SetCustomBuybackCost": {
        "body": [
            "SetCustomBuybackCost( ${iPlayerID}, ${iGoldCost} )",
            "-- Set the buyback cost for this player."
        ],
        "prefix": "SetCustomBuybackCost",
        "description": "Set the buyback cost for this player."
    },
    "CDOTA_BaseNPC_Hero:GetDenies": {
        "body": [
            "GetDenies(  )",
            "-- Value is stored in PlayerResource."
        ],
        "prefix": "GetDenies",
        "description": "Value is stored in PlayerResource."
    },
    "CDOTABaseGameMode:SetStashPurchasingDisabled": {
        "body": [
            "SetStashPurchasingDisabled( ${bDisabled} )",
            "-- Turn purchasing items to the stash off/on. If purchasing to the stash is off the player must be at a shop to purchase items."
        ],
        "prefix": "SetStashPurchasingDisabled",
        "description": "Turn purchasing items to the stash off/on. If purchasing to the stash is off the player must be at a shop to purchase items."
    },
    "CDOTA_BaseNPC:IsSpeciallyDeniable": {
        "body": [
            "IsSpeciallyDeniable(  )",
            "-- "
        ],
        "prefix": "IsSpeciallyDeniable",
        "description": ""
    },
    "CScriptParticleManager:SetParticleControl": {
        "body": [
            "SetParticleControl( ${int_1}, ${int_2}, ${Vector_3} )",
            "-- Set the control point data for a control on a particle effect"
        ],
        "prefix": "SetParticleControl",
        "description": "Set the control point data for a control on a particle effect"
    },
    "CDOTA_Ability_Animation_Attack:SetPlaybackRate": {
        "body": [
            "SetPlaybackRate( ${flRate} )",
            "-- Override playbackrate"
        ],
        "prefix": "SetPlaybackRate",
        "description": "Override playbackrate"
    },
    "MODIFIER_PROPERTY_PROCATTACK_BONUS_DAMAGE_MAGICAL": {
        "body": [
            "MODIFIER_PROPERTY_PROCATTACK_BONUS_DAMAGE_MAGICAL"
        ],
        "prefix": "MODIFIER_PROPERTY_PROCATTACK_BONUS_DAMAGE_MAGICAL",
        "description": "(4)  GetModifierProcAttack_BonusDamage_Magical"
    },
    "DOTA_ABILITY_BEHAVIOR_AURA": {
        "body": [
            "DOTA_ABILITY_BEHAVIOR_AURA"
        ],
        "prefix": "DOTA_ABILITY_BEHAVIOR_AURA",
        "description": "(65536) "
    },
    "MODIFIER_EVENT_ON_MANA_GAINED": {
        "body": [
            "MODIFIER_EVENT_ON_MANA_GAINED"
        ],
        "prefix": "MODIFIER_EVENT_ON_MANA_GAINED",
        "description": "(126)  OnManaGained"
    },
    "CBaseEntity:Attribute_GetFloatValue": {
        "body": [
            "Attribute_GetFloatValue( ${pName}, ${flDefault} )",
            "-- Get float value for an entity attribute."
        ],
        "prefix": "Attribute_GetFloatValue",
        "description": "Get float value for an entity attribute."
    },
    "CDOTA_PlayerResource:GetTeamPlayerCount": {
        "body": [
            "GetTeamPlayerCount(  )",
            "-- Players on a valid team (radiant, dire, or custom*) who haven't abandoned the game"
        ],
        "prefix": "GetTeamPlayerCount",
        "description": "Players on a valid team (radiant, dire, or custom*) who haven't abandoned the game"
    },
    "CDOTA_BaseNPC_Creature:SetDamageGain": {
        "body": [
            "SetDamageGain( ${nDamageGain} )",
            "-- Set the damage gained per level on this creature."
        ],
        "prefix": "SetDamageGain",
        "description": "Set the damage gained per level on this creature."
    },
    "MODIFIER_PROPERTY_PHYSICAL_ARMOR_BONUS_ILLUSIONS": {
        "body": [
            "MODIFIER_PROPERTY_PHYSICAL_ARMOR_BONUS_ILLUSIONS"
        ],
        "prefix": "MODIFIER_PROPERTY_PHYSICAL_ARMOR_BONUS_ILLUSIONS",
        "description": "(38)  GetModifierPhysicalArmorBonusIllusions"
    },
    "CBaseEntity:FirstMoveChild": {
        "body": [
            "FirstMoveChild(  )",
            "-- "
        ],
        "prefix": "FirstMoveChild",
        "description": ""
    },
    "CDOTA_BaseNPC_Hero:GetGold": {
        "body": [
            "GetGold(  )",
            "-- Returns gold amount for the player owning this hero"
        ],
        "prefix": "GetGold",
        "description": "Returns gold amount for the player owning this hero"
    },
    "CDOTABaseAbility:GetCooldown": {
        "body": [
            "GetCooldown( ${iLevel} )",
            "-- Get the cooldown duration for this ability at a given level, not the amount of cooldown actually left."
        ],
        "prefix": "GetCooldown",
        "description": "Get the cooldown duration for this ability at a given level, not the amount of cooldown actually left."
    },
    "ACT_DOTA_OVERRIDE_ABILITY_2": {
        "body": [
            "ACT_DOTA_OVERRIDE_ABILITY_2"
        ],
        "prefix": "ACT_DOTA_OVERRIDE_ABILITY_2",
        "description": "(1517) "
    },
    "DOTA_LOADOUT_TYPE_ABILITY2": {
        "body": [
            "DOTA_LOADOUT_TYPE_ABILITY2"
        ],
        "prefix": "DOTA_LOADOUT_TYPE_ABILITY2",
        "description": "(23) "
    },
    "DOTA_UNIT_TARGET_FLAG_MELEE_ONLY": {
        "body": [
            "DOTA_UNIT_TARGET_FLAG_MELEE_ONLY"
        ],
        "prefix": "DOTA_UNIT_TARGET_FLAG_MELEE_ONLY",
        "description": "(4) "
    },
    "CDOTA_BaseNPC:GetModifierCount": {
        "body": [
            "GetModifierCount(  )",
            "-- How many modifiers does this unit have?"
        ],
        "prefix": "GetModifierCount",
        "description": "How many modifiers does this unit have?"
    },
    "CDOTA_PlayerResource:GetLastHitStreak": {
        "body": [
            "GetLastHitStreak( ${iPlayerID} )",
            "-- "
        ],
        "prefix": "GetLastHitStreak",
        "description": ""
    },
    "CDOTA_BaseNPC:GiveMana": {
        "body": [
            "GiveMana( ${flMana} )",
            "-- Give mana to this unit, this can be used for mana gained by abilities or item usage."
        ],
        "prefix": "GiveMana",
        "description": "Give mana to this unit, this can be used for mana gained by abilities or item usage."
    },
    "DOTA_INVENTORY_ALL_ACCESS": {
        "body": [
            "DOTA_INVENTORY_ALL_ACCESS"
        ],
        "prefix": "DOTA_INVENTORY_ALL_ACCESS",
        "description": "(3) "
    },
    "CEntities:FindAllByTarget": {
        "body": [
            "FindAllByTarget( ${string_1} )",
            "-- Find entities by targetname."
        ],
        "prefix": "FindAllByTarget",
        "description": "Find entities by targetname."
    },
    "MODIFIER_PROPERTY_PROVIDES_FOW_POSITION": {
        "body": [
            "MODIFIER_PROPERTY_PROVIDES_FOW_POSITION"
        ],
        "prefix": "MODIFIER_PROPERTY_PROVIDES_FOW_POSITION",
        "description": "(139)  GetModifierProvidesFOWVision"
    },
    "CDOTA_BaseNPC:IsCourier": {
        "body": [
            "IsCourier(  )",
            "-- Is this unit a courier?"
        ],
        "prefix": "IsCourier",
        "description": "Is this unit a courier?"
    },
    "DOTA_HEROPICK_STATE_CD_INTRO": {
        "body": [
            "DOTA_HEROPICK_STATE_CD_INTRO"
        ],
        "prefix": "DOTA_HEROPICK_STATE_CD_INTRO",
        "description": "(31) "
    },
    "ACT_DOTA_NIAN_PIN_START": {
        "body": [
            "ACT_DOTA_NIAN_PIN_START"
        ],
        "prefix": "ACT_DOTA_NIAN_PIN_START",
        "description": "(1655) "
    },
    "CBaseEntity:EmitSound": {
        "body": [
            "EmitSound( ${soundname} )",
            "-- Plays a sound from this entity."
        ],
        "prefix": "EmitSound",
        "description": "Plays a sound from this entity."
    },
    "CBaseEntity:SetFriction": {
        "body": [
            "SetFriction( ${flFriction} )",
            "-- Set PLAYER friction, ignored for objects."
        ],
        "prefix": "SetFriction",
        "description": "Set PLAYER friction, ignored for objects."
    },
    "CDOTA_BaseNPC_Hero:GetStrength": {
        "body": [
            "GetStrength(  )",
            "-- "
        ],
        "prefix": "GetStrength",
        "description": ""
    },
    "CDOTA_Item_Lua:GetChannelTime": {
        "body": [
            "GetChannelTime(  )",
            "-- Return the channel time of this ability."
        ],
        "prefix": "GetChannelTime",
        "description": "Return the channel time of this ability."
    },
    "ACT_DOTA_ALCHEMIST_CHEMICAL_RAGE_START": {
        "body": [
            "ACT_DOTA_ALCHEMIST_CHEMICAL_RAGE_START"
        ],
        "prefix": "ACT_DOTA_ALCHEMIST_CHEMICAL_RAGE_START",
        "description": "(1572) "
    },
    "CDOTA_PlayerResource:SetCustomBuybackCooldown": {
        "body": [
            "SetCustomBuybackCooldown( ${iPlayerID}, ${flCooldownTime} )",
            "-- Set the buyback cooldown for this player."
        ],
        "prefix": "SetCustomBuybackCooldown",
        "description": "Set the buyback cooldown for this player."
    },
    "CBodyComponent:SetVelocity": {
        "body": [
            "SetVelocity( ${Vector_1} )",
            "-- "
        ],
        "prefix": "SetVelocity",
        "description": ""
    },
    "CDOTA_Item_Lua:GetManaCost": {
        "body": [
            "GetManaCost( ${iLevel} )",
            "-- Return mana cost at the given level (-1 is current)."
        ],
        "prefix": "GetManaCost",
        "description": "Return mana cost at the given level (-1 is current)."
    },
    "CDOTA_BaseNPC:IsMovementImpaired": {
        "body": [
            "IsMovementImpaired(  )",
            "-- "
        ],
        "prefix": "IsMovementImpaired",
        "description": ""
    },
    "CDOTA_BaseNPC_Hero:GetBuybackGoldLimitTime": {
        "body": [
            "GetBuybackGoldLimitTime(  )",
            "-- Returns the amount of time gold gain is limited after buying back."
        ],
        "prefix": "GetBuybackGoldLimitTime",
        "description": "Returns the amount of time gold gain is limited after buying back."
    },
    "DOTA_SPEECH_USER_INVALID": {
        "body": [
            "DOTA_SPEECH_USER_INVALID"
        ],
        "prefix": "DOTA_SPEECH_USER_INVALID",
        "description": "(0) "
    },
    "CDOTA_Item_Lua:GetCustomCastErrorTarget": {
        "body": [
            "GetCustomCastErrorTarget( ${hTarget} )",
            "-- (HSCRIPT hTarget) Return the error string of a failed command on a target."
        ],
        "prefix": "GetCustomCastErrorTarget",
        "description": "(HSCRIPT hTarget) Return the error string of a failed command on a target."
    },
    "CDOTA_BaseNPC:FindAllModifiersByName": {
        "body": [
            "FindAllModifiersByName( ${pszScriptName} )",
            "-- Returns a table of all of the modifiers on the NPC with the passed name (modifierName)"
        ],
        "prefix": "FindAllModifiersByName",
        "description": "Returns a table of all of the modifiers on the NPC with the passed name (modifierName)"
    },
    "CDOTA_BaseNPC:GetGoldBounty": {
        "body": [
            "GetGoldBounty(  )",
            "-- Get the gold bounty on this unit."
        ],
        "prefix": "GetGoldBounty",
        "description": "Get the gold bounty on this unit."
    },
    "CDOTA_BaseNPC:SetHasInventory": {
        "body": [
            "SetHasInventory( ${bHasInventory} )",
            "-- Set if this unit has an inventory."
        ],
        "prefix": "SetHasInventory",
        "description": "Set if this unit has an inventory."
    },
    "DOTA_INVENTORY_ALLOW_DROP_AT_FOUNTAIN": {
        "body": [
            "DOTA_INVENTORY_ALLOW_DROP_AT_FOUNTAIN"
        ],
        "prefix": "DOTA_INVENTORY_ALLOW_DROP_AT_FOUNTAIN",
        "description": "(8) "
    },
    "UTIL_Remove": {
        "body": [
            "UTIL_Remove( ${handle_1} )",
            "-- Removes the specified entity"
        ],
        "prefix": "UTIL_Remove",
        "description": "Removes the specified entity"
    },
    "CEnvProjectedTexture:SetQuadraticAttenuation": {
        "body": [
            "SetQuadraticAttenuation( ${flAtten} )",
            "-- Set light quadratic attenuation value"
        ],
        "prefix": "SetQuadraticAttenuation",
        "description": "Set light quadratic attenuation value"
    },
    "CDOTA_Ability_Lua:GetCastRange": {
        "body": [
            "GetCastRange( ${vLocation}, ${hTarget} )",
            "-- Return cast range of this ability."
        ],
        "prefix": "GetCastRange",
        "description": "Return cast range of this ability."
    },
    "CDOTABaseAbility:GetManaCost": {
        "body": [
            "GetManaCost( ${iLevel} )",
            "-- "
        ],
        "prefix": "GetManaCost",
        "description": ""
    },
    "CDOTA_BaseNPC:SpendMana": {
        "body": [
            "SpendMana( ${flManaSpent}, ${hAbility} )",
            "-- Spend mana from this unit, this can be used for spending mana from abilities or item usage."
        ],
        "prefix": "SpendMana",
        "description": "Spend mana from this unit, this can be used for spending mana from abilities or item usage."
    },
    "CDOTA_BaseNPC:DestroyAllSpeechBubbles": {
        "body": [
            "DestroyAllSpeechBubbles(  )",
            "-- "
        ],
        "prefix": "DestroyAllSpeechBubbles",
        "description": ""
    },
    "MODIFIER_PROPERTY_MAGICAL_RESISTANCE_BONUS": {
        "body": [
            "MODIFIER_PROPERTY_MAGICAL_RESISTANCE_BONUS"
        ],
        "prefix": "MODIFIER_PROPERTY_MAGICAL_RESISTANCE_BONUS",
        "description": "(41)  GetModifierMagicalResistanceBonus"
    },
    "CDOTA_BaseNPC:TriggerSpellAbsorb": {
        "body": [
            "TriggerSpellAbsorb( ${hAbility} )",
            "-- "
        ],
        "prefix": "TriggerSpellAbsorb",
        "description": ""
    },
    "CDOTA_BaseNPC_Hero:PerformTaunt": {
        "body": [
            "PerformTaunt(  )",
            "-- "
        ],
        "prefix": "PerformTaunt",
        "description": ""
    },
    "DOTA_ModifyGold_PurchaseConsumable": {
        "body": [
            "DOTA_ModifyGold_PurchaseConsumable"
        ],
        "prefix": "DOTA_ModifyGold_PurchaseConsumable",
        "description": "(3) "
    },
    "CDOTA_BaseNPC:GetModifierStackCount": {
        "body": [
            "GetModifierStackCount( ${pszScriptName}, ${hCaster} )",
            "-- Gets the stack count of a given modifier."
        ],
        "prefix": "GetModifierStackCount",
        "description": "Gets the stack count of a given modifier."
    },
    "CInfoData:QueryVector": {
        "body": [
            "QueryVector( ${tok}, ${vDefault} )",
            "-- Query vector data for this key"
        ],
        "prefix": "QueryVector",
        "description": "Query vector data for this key"
    },
    "CBaseEntity:GetLocalVelocity": {
        "body": [
            "GetLocalVelocity(  )",
            "-- Get Entity relative velocity."
        ],
        "prefix": "GetLocalVelocity",
        "description": "Get Entity relative velocity."
    },
    "CDebugOverlayScriptHelper:SolidCone": {
        "body": [
            "SolidCone( ${Vector_1}, ${Vector_2}, ${float_3}, ${float_4}, ${int_5}, ${int_6}, ${int_7}, ${int_8}, ${bool_9}, ${float_10} )",
            "-- Draws a solid cone. Specify endpoint and direction in world space."
        ],
        "prefix": "SolidCone",
        "description": "Draws a solid cone. Specify endpoint and direction in world space."
    },
    "DOTA_DAMAGE_FLAG_REFLECTION": {
        "body": [
            "DOTA_DAMAGE_FLAG_REFLECTION"
        ],
        "prefix": "DOTA_DAMAGE_FLAG_REFLECTION",
        "description": "(16) "
    },
    "DOTA_ModifyGold_CourierKill": {
        "body": [
            "DOTA_ModifyGold_CourierKill"
        ],
        "prefix": "DOTA_ModifyGold_CourierKill",
        "description": "(15) "
    },
    "ACT_DOTA_KILLTAUNT": {
        "body": [
            "ACT_DOTA_KILLTAUNT"
        ],
        "prefix": "ACT_DOTA_KILLTAUNT",
        "description": "(1535) "
    },
    "UF_FAIL_OTHER": {
        "body": [
            "UF_FAIL_OTHER"
        ],
        "prefix": "UF_FAIL_OTHER",
        "description": "(9) "
    },
    "DOTA_MINIMAP_EVENT_CANCEL_TELEPORTING": {
        "body": [
            "DOTA_MINIMAP_EVENT_CANCEL_TELEPORTING"
        ],
        "prefix": "DOTA_MINIMAP_EVENT_CANCEL_TELEPORTING",
        "description": "(2048) "
    },
    "DOTA_UNIT_TARGET_FLAG_NOT_ATTACK_IMMUNE": {
        "body": [
            "DOTA_UNIT_TARGET_FLAG_NOT_ATTACK_IMMUNE"
        ],
        "prefix": "DOTA_UNIT_TARGET_FLAG_NOT_ATTACK_IMMUNE",
        "description": "(16384) "
    },
    "DOTA_ABILITY_BEHAVIOR_DONT_CANCEL_MOVEMENT": {
        "body": [
            "DOTA_ABILITY_BEHAVIOR_DONT_CANCEL_MOVEMENT"
        ],
        "prefix": "DOTA_ABILITY_BEHAVIOR_DONT_CANCEL_MOVEMENT",
        "description": "(8388608) "
    },
    "CDOTA_PlayerResource:GetPlayerCountForTeam": {
        "body": [
            "GetPlayerCountForTeam( ${iTeam} )",
            "-- "
        ],
        "prefix": "GetPlayerCountForTeam",
        "description": ""
    },
    "DOTA_UNIT_CAP_NO_ATTACK": {
        "body": [
            "DOTA_UNIT_CAP_NO_ATTACK"
        ],
        "prefix": "DOTA_UNIT_CAP_NO_ATTACK",
        "description": "(0) "
    },
    "CDOTABaseAbility:GetCursorTarget": {
        "body": [
            "GetCursorTarget(  )",
            "-- "
        ],
        "prefix": "GetCursorTarget",
        "description": ""
    },
    "CDOTABaseAbility:GetConceptRecipientType": {
        "body": [
            "GetConceptRecipientType(  )",
            "-- "
        ],
        "prefix": "GetConceptRecipientType",
        "description": ""
    },
    "CDOTA_Modifier_Lua_Vertical_Motion:SetMotionPriority": {
        "body": [
            "SetMotionPriority( ${nMotionPriority} )",
            "-- Set the priority"
        ],
        "prefix": "SetMotionPriority",
        "description": "Set the priority"
    },
    "CBaseEntity:SetForwardVector": {
        "body": [
            "SetForwardVector( ${v} )",
            "-- Set the orientation of the entity to have this forward vector."
        ],
        "prefix": "SetForwardVector",
        "description": "Set the orientation of the entity to have this forward vector."
    },
    "DOTA_HUD_VISIBILITY_ACTION_MINIMAP": {
        "body": [
            "DOTA_HUD_VISIBILITY_ACTION_MINIMAP"
        ],
        "prefix": "DOTA_HUD_VISIBILITY_ACTION_MINIMAP",
        "description": "(4) "
    },
    "ACT_DOTA_MAGNUS_SKEWER_END": {
        "body": [
            "ACT_DOTA_MAGNUS_SKEWER_END"
        ],
        "prefix": "ACT_DOTA_MAGNUS_SKEWER_END",
        "description": "(1606) "
    },
    "ProjectileManager:CreateLinearProjectile": {
        "body": [
            "CreateLinearProjectile( ${handle_1} )",
            "-- Creates a linear projectile and returns the projectile ID"
        ],
        "prefix": "CreateLinearProjectile",
        "description": "Creates a linear projectile and returns the projectile ID"
    },
    "ACT_DOTA_CAST_DEAFENING_BLAST": {
        "body": [
            "ACT_DOTA_CAST_DEAFENING_BLAST"
        ],
        "prefix": "ACT_DOTA_CAST_DEAFENING_BLAST",
        "description": "(1590) "
    },
    "CDOTA_BaseNPC:SwapAbilities": {
        "body": [
            "SwapAbilities( ${pAbilityName1}, ${pAbilityName2}, ${bEnable1}, ${bEnable2} )",
            "-- Swaps the slots of the two passed abilities and sets them enabled/disabled."
        ],
        "prefix": "SwapAbilities",
        "description": "Swaps the slots of the two passed abilities and sets them enabled/disabled."
    },
    "CDOTA_BaseNPC:SetCursorCastTarget": {
        "body": [
            "SetCursorCastTarget( ${hEntity} )",
            "-- "
        ],
        "prefix": "SetCursorCastTarget",
        "description": ""
    },
    "DOTA_LOADOUT_TYPE_MISC": {
        "body": [
            "DOTA_LOADOUT_TYPE_MISC"
        ],
        "prefix": "DOTA_LOADOUT_TYPE_MISC",
        "description": "(14) "
    },
    "CDOTA_BaseNPC:PassivesDisabled": {
        "body": [
            "PassivesDisabled(  )",
            "-- "
        ],
        "prefix": "PassivesDisabled",
        "description": ""
    },
    "DOTA_RUNE_COUNT": {
        "body": [
            "DOTA_RUNE_COUNT"
        ],
        "prefix": "DOTA_RUNE_COUNT",
        "description": "(6) "
    },
    "CDOTA_Modifier_Lua:IsPurgeException": {
        "body": [
            "IsPurgeException(  )",
            "-- True/false if this modifier can be purged by strong dispels."
        ],
        "prefix": "IsPurgeException",
        "description": "True/false if this modifier can be purged by strong dispels."
    },
    "MODIFIER_PROPERTY_TRANSLATE_ACTIVITY_MODIFIERS": {
        "body": [
            "MODIFIER_PROPERTY_TRANSLATE_ACTIVITY_MODIFIERS"
        ],
        "prefix": "MODIFIER_PROPERTY_TRANSLATE_ACTIVITY_MODIFIERS",
        "description": "(136)  GetActivityTranslationModifiers"
    },
    "StartSoundEventFromPositionUnreliable": {
        "body": [
            "StartSoundEventFromPositionUnreliable( ${string_1}, ${Vector_2} )",
            "-- Start a sound event from position with optional delivery"
        ],
        "prefix": "StartSoundEventFromPositionUnreliable",
        "description": "Start a sound event from position with optional delivery"
    },
    "CDOTABaseAbility:IsTrained": {
        "body": [
            "IsTrained(  )",
            "-- "
        ],
        "prefix": "IsTrained",
        "description": ""
    },
    "SendFrostyPointsMessageToGC": {
        "body": [
            "SendFrostyPointsMessageToGC( ${handle_1} )",
            "-- "
        ],
        "prefix": "SendFrostyPointsMessageToGC",
        "description": ""
    },
    "ACT_DOTA_CAST_GHOST_WALK": {
        "body": [
            "ACT_DOTA_CAST_GHOST_WALK"
        ],
        "prefix": "ACT_DOTA_CAST_GHOST_WALK",
        "description": "(1582) "
    },
    "CDOTA_PlayerResource:SetUnitShareMaskForPlayer": {
        "body": [
            "SetUnitShareMaskForPlayer( ${nPlayerID}, ${nOtherPlayerID}, ${nFlag}, ${bState} )",
            "-- "
        ],
        "prefix": "SetUnitShareMaskForPlayer",
        "description": ""
    },
    "DOTA_HEROPICK_STATE_CD_BAN6": {
        "body": [
            "DOTA_HEROPICK_STATE_CD_BAN6"
        ],
        "prefix": "DOTA_HEROPICK_STATE_CD_BAN6",
        "description": "(38) "
    },
    "CDOTA_BaseNPC_Creature:SetMagicResistanceGain": {
        "body": [
            "SetMagicResistanceGain( ${flMagicResistanceGain} )",
            "-- Set the magic resistance gained per level on this creature."
        ],
        "prefix": "SetMagicResistanceGain",
        "description": "Set the magic resistance gained per level on this creature."
    },
    "CDOTA_BaseNPC:SetStolenScepter": {
        "body": [
            "SetStolenScepter( ${bStolenScepter} )",
            "-- "
        ],
        "prefix": "SetStolenScepter",
        "description": ""
    },
    "MODIFIER_PROPERTY_PHYSICAL_CONSTANT_BLOCK": {
        "body": [
            "MODIFIER_PROPERTY_PHYSICAL_CONSTANT_BLOCK"
        ],
        "prefix": "MODIFIER_PROPERTY_PHYSICAL_CONSTANT_BLOCK",
        "description": "(71)  GetModifierPhysical_ConstantBlock"
    },
    "CToneMapControllerComponent:GetMaxExposure": {
        "body": [
            "GetMaxExposure(  )",
            "-- Gets max exposure for this tonemap controller"
        ],
        "prefix": "GetMaxExposure",
        "description": "Gets max exposure for this tonemap controller"
    },
    "CDOTA_PlayerResource:SetCustomPlayerColor": {
        "body": [
            "SetCustomPlayerColor( ${iPlayerID}, ${r}, ${g}, ${b} )",
            "-- Set custom color for player (minimap, scoreboard, etc)"
        ],
        "prefix": "SetCustomPlayerColor",
        "description": "Set custom color for player (minimap, scoreboard, etc)"
    },
    "ACT_DOTA_BRIDGE_THREAT": {
        "body": [
            "ACT_DOTA_BRIDGE_THREAT"
        ],
        "prefix": "ACT_DOTA_BRIDGE_THREAT",
        "description": "(1650) "
    },
    "DOTA_DAMAGE_FLAG_NON_LETHAL": {
        "body": [
            "DOTA_DAMAGE_FLAG_NON_LETHAL"
        ],
        "prefix": "DOTA_DAMAGE_FLAG_NON_LETHAL",
        "description": "(128) "
    },
    "CDOTA_BaseNPC_Hero:GetMultipleKillCount": {
        "body": [
            "GetMultipleKillCount(  )",
            "-- "
        ],
        "prefix": "GetMultipleKillCount",
        "description": ""
    },
    "CDebugOverlayScriptHelper:PushDebugOverlayScope": {
        "body": [
            "PushDebugOverlayScope( ${utlstringtoken_1} )",
            "-- Pushes an identifier used to group overlays. Overlays marked with this identifier can be deleted in a big batch."
        ],
        "prefix": "PushDebugOverlayScope",
        "description": "Pushes an identifier used to group overlays. Overlays marked with this identifier can be deleted in a big batch."
    },
    "CBaseModelEntity:SetSize": {
        "body": [
            "SetSize( ${mins}, ${maxs} )",
            "-- "
        ],
        "prefix": "SetSize",
        "description": ""
    },
    "CDOTABaseAbility:GetAbilityDamage": {
        "body": [
            "GetAbilityDamage(  )",
            "-- "
        ],
        "prefix": "GetAbilityDamage",
        "description": ""
    },
    "CDOTA_Ability_Lua:GetGoldCost": {
        "body": [
            "GetGoldCost( ${iLevel} )",
            "-- Return gold cost at the given level (-1 is current)."
        ],
        "prefix": "GetGoldCost",
        "description": "Return gold cost at the given level (-1 is current)."
    },
    "ResolveNPCPositions": {
        "body": [
            "ResolveNPCPositions( ${Vector_1}, ${float_2} )",
            "-- Check and fix units that have been assigned a position inside collision radius of other NPCs."
        ],
        "prefix": "ResolveNPCPositions",
        "description": "Check and fix units that have been assigned a position inside collision radius of other NPCs."
    },
    "DOTA_INVENTORY_ALLOW_DROP_ON_GROUND": {
        "body": [
            "DOTA_INVENTORY_ALLOW_DROP_ON_GROUND"
        ],
        "prefix": "DOTA_INVENTORY_ALLOW_DROP_ON_GROUND",
        "description": "(4) "
    },
    "CDOTA_BaseNPC:GetCursorPosition": {
        "body": [
            "GetCursorPosition(  )",
            "-- "
        ],
        "prefix": "GetCursorPosition",
        "description": ""
    },
    "MODIFIER_PROPERTY_OVERRIDE_ATTACK_MAGICAL": {
        "body": [
            "MODIFIER_PROPERTY_OVERRIDE_ATTACK_MAGICAL"
        ],
        "prefix": "MODIFIER_PROPERTY_OVERRIDE_ATTACK_MAGICAL",
        "description": "(95)  GetOverrideAttackMagical"
    },
    "CDOTA_BaseNPC:IsMechanical": {
        "body": [
            "IsMechanical(  )",
            "-- Is the unit mechanical?"
        ],
        "prefix": "IsMechanical",
        "description": "Is the unit mechanical?"
    },
    "MODIFIER_PROPERTY_EXTRA_HEALTH_BONUS": {
        "body": [
            "MODIFIER_PROPERTY_EXTRA_HEALTH_BONUS"
        ],
        "prefix": "MODIFIER_PROPERTY_EXTRA_HEALTH_BONUS",
        "description": "(54)  GetModifierExtraHealthBonus"
    },
    "CDOTA_BaseNPC:GetAdditionalBattleMusicWeight": {
        "body": [
            "GetAdditionalBattleMusicWeight(  )",
            "-- Combat involving this creature will have this weight added to the music calcuations."
        ],
        "prefix": "GetAdditionalBattleMusicWeight",
        "description": "Combat involving this creature will have this weight added to the music calcuations."
    },
    "UF_FAIL_ENEMY": {
        "body": [
            "UF_FAIL_ENEMY"
        ],
        "prefix": "UF_FAIL_ENEMY",
        "description": "(2) "
    },
    "ACT_DOTA_BELLYACHE_END": {
        "body": [
            "ACT_DOTA_BELLYACHE_END"
        ],
        "prefix": "ACT_DOTA_BELLYACHE_END",
        "description": "(1614) "
    },
    "CDOTA_PlayerResource:GetBroadcasterChannel": {
        "body": [
            "GetBroadcasterChannel( ${iPlayerID} )",
            "-- "
        ],
        "prefix": "GetBroadcasterChannel",
        "description": ""
    },
    "CDOTA_Item:GetCurrentCharges": {
        "body": [
            "GetCurrentCharges(  )",
            "-- Get the number of charges this item currently has."
        ],
        "prefix": "GetCurrentCharges",
        "description": "Get the number of charges this item currently has."
    },
    "DOTA_HEROPICK_STATE_NONE": {
        "body": [
            "DOTA_HEROPICK_STATE_NONE"
        ],
        "prefix": "DOTA_HEROPICK_STATE_NONE",
        "description": "(0) "
    },
    "GridNav:WorldToGridPosX": {
        "body": [
            "WorldToGridPosX( ${float_1} )",
            "-- Get the X index of a given world X position"
        ],
        "prefix": "WorldToGridPosX",
        "description": "Get the X index of a given world X position"
    },
    "CDOTA_BaseNPC:GetMinimumGoldBounty": {
        "body": [
            "GetMinimumGoldBounty(  )",
            "-- Get the minimum gold bounty for this unit."
        ],
        "prefix": "GetMinimumGoldBounty",
        "description": "Get the minimum gold bounty for this unit."
    },
    "ACT_DOTA_CHANNEL_END_ABILITY_1": {
        "body": [
            "ACT_DOTA_CHANNEL_END_ABILITY_1"
        ],
        "prefix": "ACT_DOTA_CHANNEL_END_ABILITY_1",
        "description": "(1526) "
    },
    "CDOTA_BaseNPC:NoUnitCollision": {
        "body": [
            "NoUnitCollision(  )",
            "-- "
        ],
        "prefix": "NoUnitCollision",
        "description": ""
    },
    "FireGameEvent": {
        "body": [
            "FireGameEvent( ${string_1}, ${handle_2} )",
            "-- Fire a game event."
        ],
        "prefix": "FireGameEvent",
        "description": "Fire a game event."
    },
    "CDOTA_BaseNPC:ModifyHealth": {
        "body": [
            "ModifyHealth( ${iDesiredHealthValue}, ${hAbility}, ${bLethal}, ${iAdditionalFlags} )",
            "-- Sets the health to a specific value, with optional flags or inflictors."
        ],
        "prefix": "ModifyHealth",
        "description": "Sets the health to a specific value, with optional flags or inflictors."
    },
    "CDOTABaseGameMode:SetCustomBuybackCooldownEnabled": {
        "body": [
            "SetCustomBuybackCooldownEnabled( ${bEnabled} )",
            "-- Turns on capability to define custom buyback cooldowns."
        ],
        "prefix": "SetCustomBuybackCooldownEnabled",
        "description": "Turns on capability to define custom buyback cooldowns."
    },
    "CDOTA_BaseNPC:SetDeathXP": {
        "body": [
            "SetDeathXP( ${iXPBounty} )",
            "-- Set the XP bounty on this unit."
        ],
        "prefix": "SetDeathXP",
        "description": "Set the XP bounty on this unit."
    },
    "GridNav:GridPosToWorldCenterY": {
        "body": [
            "GridPosToWorldCenterY( ${int_1} )",
            "-- Get the Y position of the center of a given Y index"
        ],
        "prefix": "GridPosToWorldCenterY",
        "description": "Get the Y position of the center of a given Y index"
    },
    "PATTACH_ABSORIGIN_FOLLOW": {
        "body": [
            "PATTACH_ABSORIGIN_FOLLOW"
        ],
        "prefix": "PATTACH_ABSORIGIN_FOLLOW",
        "description": "(1) "
    },
    "DOTA_LOADOUT_TYPE_LEGS": {
        "body": [
            "DOTA_LOADOUT_TYPE_LEGS"
        ],
        "prefix": "DOTA_LOADOUT_TYPE_LEGS",
        "description": "(11) "
    },
    "DOTA_LOADOUT_TYPE_OFFHAND_WEAPON2": {
        "body": [
            "DOTA_LOADOUT_TYPE_OFFHAND_WEAPON2"
        ],
        "prefix": "DOTA_LOADOUT_TYPE_OFFHAND_WEAPON2",
        "description": "(3) "
    },
    "CDOTA_Modifier_Lua_Horizontal_Motion:OnHorizontalMotionInterrupted": {
        "body": [
            "OnHorizontalMotionInterrupted(  )",
            "-- Called when the motion gets interrupted."
        ],
        "prefix": "OnHorizontalMotionInterrupted",
        "description": "Called when the motion gets interrupted."
    },
    "CDOTA_BaseNPC:IsPositionInRange": {
        "body": [
            "IsPositionInRange( ${vPosition}, ${flRange} )",
            "-- "
        ],
        "prefix": "IsPositionInRange",
        "description": ""
    },
    "UTIL_RemoveImmediate": {
        "body": [
            "UTIL_RemoveImmediate( ${handle_1} )",
            "-- Immediately removes the specified entity"
        ],
        "prefix": "UTIL_RemoveImmediate",
        "description": "Immediately removes the specified entity"
    },
    "DAMAGE_TYPE_PHYSICAL": {
        "body": [
            "DAMAGE_TYPE_PHYSICAL"
        ],
        "prefix": "DAMAGE_TYPE_PHYSICAL",
        "description": "(1) "
    },
    "CDebugOverlayScriptHelper:Capsule": {
        "body": [
            "Capsule( ${Vector_1}, ${Quaternion_2}, ${float_3}, ${float_4}, ${int_5}, ${int_6}, ${int_7}, ${int_8}, ${bool_9}, ${float_10} )",
            "-- Draws a capsule. Specify base in world space."
        ],
        "prefix": "Capsule",
        "description": "Draws a capsule. Specify base in world space."
    },
    "DOTA_HEROPICK_STATE_CM_SELECT9": {
        "body": [
            "DOTA_HEROPICK_STATE_CM_SELECT9"
        ],
        "prefix": "DOTA_HEROPICK_STATE_CM_SELECT9",
        "description": "(25) "
    },
    "ACT_DOTA_CAPTURE_PET": {
        "body": [
            "ACT_DOTA_CAPTURE_PET"
        ],
        "prefix": "ACT_DOTA_CAPTURE_PET",
        "description": "(1698) "
    },
    "CDOTA_BaseNPC:InterruptChannel": {
        "body": [
            "InterruptChannel(  )",
            "-- "
        ],
        "prefix": "InterruptChannel",
        "description": ""
    },
    "CDOTA_Modifier_Lua:GetHeroEffectName": {
        "body": [
            "GetHeroEffectName(  )",
            "-- Return the name of the hero effect particle system that is created while this modifier is active."
        ],
        "prefix": "GetHeroEffectName",
        "description": "Return the name of the hero effect particle system that is created while this modifier is active."
    },
    "CDOTA_Modifier_Lua:OnDestroy": {
        "body": [
            "OnDestroy(  )",
            "-- Runs when the modifier is destroyed."
        ],
        "prefix": "OnDestroy",
        "description": "Runs when the modifier is destroyed."
    },
    "CDOTA_BaseNPC_Creature:AddItemDrop": {
        "body": [
            "AddItemDrop( ${hDropData} )",
            "-- Add the specified item drop to this creature"
        ],
        "prefix": "AddItemDrop",
        "description": "Add the specified item drop to this creature"
    },
    "CDOTA_BaseNPC:ForceKill": {
        "body": [
            "ForceKill( ${bReincarnate} )",
            "-- Kill this unit immediately."
        ],
        "prefix": "ForceKill",
        "description": "Kill this unit immediately."
    },
    "CDOTABaseGameMode:SetLoseGoldOnDeath": {
        "body": [
            "SetLoseGoldOnDeath( ${bEnabled} )",
            "-- Use to disable gold loss on death."
        ],
        "prefix": "SetLoseGoldOnDeath",
        "description": "Use to disable gold loss on death."
    },
    "MODIFIER_FUNCTION_LAST": {
        "body": [
            "MODIFIER_FUNCTION_LAST"
        ],
        "prefix": "MODIFIER_FUNCTION_LAST",
        "description": "(149) "
    },
    "DOTA_LOADOUT_TYPE_ABILITY1": {
        "body": [
            "DOTA_LOADOUT_TYPE_ABILITY1"
        ],
        "prefix": "DOTA_LOADOUT_TYPE_ABILITY1",
        "description": "(22) "
    },
    "CDOTA_BaseNPC_Creature:SetManaGain": {
        "body": [
            "SetManaGain( ${nManaGain} )",
            "-- Set the mana points gained per level on this creature."
        ],
        "prefix": "SetManaGain",
        "description": "Set the mana points gained per level on this creature."
    },
    "CDOTA_Modifier_Lua:IsDebuff": {
        "body": [
            "IsDebuff(  )",
            "-- True/false if this modifier should be displayed as a debuff."
        ],
        "prefix": "IsDebuff",
        "description": "True/false if this modifier should be displayed as a debuff."
    },
    "DOTA_ABILITY_BEHAVIOR_RUNE_TARGET": {
        "body": [
            "DOTA_ABILITY_BEHAVIOR_RUNE_TARGET"
        ],
        "prefix": "DOTA_ABILITY_BEHAVIOR_RUNE_TARGET",
        "description": "(268435456) "
    },
    "CDOTA_BaseNPC:IsNightmared": {
        "body": [
            "IsNightmared(  )",
            "-- "
        ],
        "prefix": "IsNightmared",
        "description": ""
    },
    "DOTA_DEFAULT_MAX_TEAM_PLAYERS": {
        "body": [
            "DOTA_DEFAULT_MAX_TEAM_PLAYERS"
        ],
        "prefix": "DOTA_DEFAULT_MAX_TEAM_PLAYERS",
        "description": "(10)  Default number of non-spectator players supported."
    },
    "MODIFIER_PROPERTY_ABILITY_LAYOUT": {
        "body": [
            "MODIFIER_PROPERTY_ABILITY_LAYOUT"
        ],
        "prefix": "MODIFIER_PROPERTY_ABILITY_LAYOUT",
        "description": "(145)  GetModifierAbilityLayout"
    },
    "CDebugOverlayScriptHelper:VectorText3D": {
        "body": [
            "VectorText3D( ${Vector_1}, ${Quaternion_2}, ${string_3}, ${int_4}, ${int_5}, ${int_6}, ${int_7}, ${bool_8}, ${float_9} )",
            "-- Draws 3D text. Specify origin + orientation in world space."
        ],
        "prefix": "VectorText3D",
        "description": "Draws 3D text. Specify origin + orientation in world space."
    },
    "CDOTA_Item_Lua:GetCooldown": {
        "body": [
            "GetCooldown( ${iLevel} )",
            "-- Return cooldown of this ability."
        ],
        "prefix": "GetCooldown",
        "description": "Return cooldown of this ability."
    },
    "CDOTA_BaseNPC:GetIdealSpeed": {
        "body": [
            "GetIdealSpeed(  )",
            "-- Returns speed after all modifiers."
        ],
        "prefix": "GetIdealSpeed",
        "description": "Returns speed after all modifiers."
    },
    "CEntityInstance:GetOrCreatePublicScriptScope": {
        "body": [
            "GetOrCreatePublicScriptScope(  )",
            "-- Retrieve, creating if necessary, the public script-side data associated with an entity"
        ],
        "prefix": "GetOrCreatePublicScriptScope",
        "description": "Retrieve, creating if necessary, the public script-side data associated with an entity"
    },
    "CDOTA_BaseNPC:GetPaddedCollisionRadius": {
        "body": [
            "GetPaddedCollisionRadius(  )",
            "-- Get the collision hull radius (including padding) of this NPC."
        ],
        "prefix": "GetPaddedCollisionRadius",
        "description": "Get the collision hull radius (including padding) of this NPC."
    },
    "CDOTA_PlayerResource:IsValidPlayerID": {
        "body": [
            "IsValidPlayerID( ${iPlayerID} )",
            "-- "
        ],
        "prefix": "IsValidPlayerID",
        "description": ""
    },
    "CDOTA_BaseNPC:GetCursorTargetingNothing": {
        "body": [
            "GetCursorTargetingNothing(  )",
            "-- "
        ],
        "prefix": "GetCursorTargetingNothing",
        "description": ""
    },
    "DOTA_INVENTORY_ALLOW_MAIN": {
        "body": [
            "DOTA_INVENTORY_ALLOW_MAIN"
        ],
        "prefix": "DOTA_INVENTORY_ALLOW_MAIN",
        "description": "(1) "
    },
    "Convars:GetDOTACommandClient": {
        "body": [
            "GetDOTACommandClient(  )",
            "-- GetDOTACommandClient() : returns the DOTA player who issued this console command."
        ],
        "prefix": "GetDOTACommandClient",
        "description": "GetDOTACommandClient() : returns the DOTA player who issued this console command."
    },
    "CDOTA_Ability_Lua:OnHeroDiedNearby": {
        "body": [
            "OnHeroDiedNearby( ${unit}, ${attacker}, ${table} )",
            "-- A hero has died in the vicinity (ie Urn), takes table of params."
        ],
        "prefix": "OnHeroDiedNearby",
        "description": "A hero has died in the vicinity (ie Urn), takes table of params."
    },
    "ACT_DOTA_CANCEL_SIREN_SONG": {
        "body": [
            "ACT_DOTA_CANCEL_SIREN_SONG"
        ],
        "prefix": "ACT_DOTA_CANCEL_SIREN_SONG",
        "description": "(1599) "
    },
    "CSceneEntity:AddBroadcastTeamTarget": {
        "body": [
            "AddBroadcastTeamTarget( ${int_1} )",
            "-- Adds a team (by index) to the broadcast list"
        ],
        "prefix": "AddBroadcastTeamTarget",
        "description": "Adds a team (by index) to the broadcast list"
    },
    "SetQuestPhase": {
        "body": [
            "SetQuestPhase( ${int_1} )",
            "-- Set the current quest phase."
        ],
        "prefix": "SetQuestPhase",
        "description": "Set the current quest phase."
    },
    "CDOTA_BaseNPC:HasAttackCapability": {
        "body": [
            "HasAttackCapability(  )",
            "-- "
        ],
        "prefix": "HasAttackCapability",
        "description": ""
    },
    "rr_AddDecisionRule": {
        "body": [
            "rr_AddDecisionRule( ${handle_1} )",
            "-- Add a rule to the decision database."
        ],
        "prefix": "rr_AddDecisionRule",
        "description": "Add a rule to the decision database."
    },
    "ProjectileManager:CreateTrackingProjectile": {
        "body": [
            "CreateTrackingProjectile( ${handle_1} )",
            "-- Creates a tracking projectile"
        ],
        "prefix": "CreateTrackingProjectile",
        "description": "Creates a tracking projectile"
    },
    "CDOTA_Modifier_Lua_Motion_Both:OnVerticalMotionInterrupted": {
        "body": [
            "OnVerticalMotionInterrupted(  )",
            "-- Called when the motion gets interrupted."
        ],
        "prefix": "OnVerticalMotionInterrupted",
        "description": "Called when the motion gets interrupted."
    },
    "CDotaQuest:GetSubquest": {
        "body": [
            "GetSubquest( ${nIndex} )",
            "-- Finds a subquest from this quest by index"
        ],
        "prefix": "GetSubquest",
        "description": "Finds a subquest from this quest by index"
    },
    "PATTACH_POINT_FOLLOW": {
        "body": [
            "PATTACH_POINT_FOLLOW"
        ],
        "prefix": "PATTACH_POINT_FOLLOW",
        "description": "(5) "
    },
    "DOTA_PLAYER_LOADOUT_START": {
        "body": [
            "DOTA_PLAYER_LOADOUT_START"
        ],
        "prefix": "DOTA_PLAYER_LOADOUT_START",
        "description": "(28) "
    },
    "MODIFIER_PROPERTY_EVASION_CONSTANT": {
        "body": [
            "MODIFIER_PROPERTY_EVASION_CONSTANT"
        ],
        "prefix": "MODIFIER_PROPERTY_EVASION_CONSTANT",
        "description": "(33)  GetModifierEvasion_Constant"
    },
    "DOTA_ModifyGold_Unspecified": {
        "body": [
            "DOTA_ModifyGold_Unspecified"
        ],
        "prefix": "DOTA_ModifyGold_Unspecified",
        "description": "(0) "
    },
    "CDOTA_Item_Lua:GetIntrinsicModifierName": {
        "body": [
            "GetIntrinsicModifierName(  )",
            "-- Returns the name of the modifier applied passively by this ability."
        ],
        "prefix": "GetIntrinsicModifierName",
        "description": "Returns the name of the modifier applied passively by this ability."
    },
    "CBaseEntity:PrecacheScriptSound": {
        "body": [
            "PrecacheScriptSound( ${soundname} )",
            "-- Precache a sound for later playing."
        ],
        "prefix": "PrecacheScriptSound",
        "description": "Precache a sound for later playing."
    },
    "ACT_DOTA_BRIDGE_DESTROY": {
        "body": [
            "ACT_DOTA_BRIDGE_DESTROY"
        ],
        "prefix": "ACT_DOTA_BRIDGE_DESTROY",
        "description": "(1640) "
    },
    "CDOTA_PlayerResource:SetHasRandomed": {
        "body": [
            "SetHasRandomed( ${iPlayerID} )",
            "-- "
        ],
        "prefix": "SetHasRandomed",
        "description": ""
    },
    "ACT_DOTA_WHIRLING_AXES_RANGED": {
        "body": [
            "ACT_DOTA_WHIRLING_AXES_RANGED"
        ],
        "prefix": "ACT_DOTA_WHIRLING_AXES_RANGED",
        "description": "(1669) "
    },
    "ACT_DOTA_ATTACK_EVENT_BASH": {
        "body": [
            "ACT_DOTA_ATTACK_EVENT_BASH"
        ],
        "prefix": "ACT_DOTA_ATTACK_EVENT_BASH",
        "description": "(1705) "
    },
    "UF_FAIL_MELEE": {
        "body": [
            "UF_FAIL_MELEE"
        ],
        "prefix": "UF_FAIL_MELEE",
        "description": "(14) "
    },
    "MODIFIER_PROPERTY_FORCE_DRAW_MINIMAP": {
        "body": [
            "MODIFIER_PROPERTY_FORCE_DRAW_MINIMAP"
        ],
        "prefix": "MODIFIER_PROPERTY_FORCE_DRAW_MINIMAP",
        "description": "(141)  GetForceDrawOnMinimap"
    },
    "CDOTA_BaseNPC_Hero:GetHealthRegen": {
        "body": [
            "GetHealthRegen(  )",
            "-- Hero health regen is affected by attributes."
        ],
        "prefix": "GetHealthRegen",
        "description": "Hero health regen is affected by attributes."
    },
    "CDOTA_PlayerResource:WhoSelectedHero": {
        "body": [
            "WhoSelectedHero( ${pHeroFilename} )",
            "-- "
        ],
        "prefix": "WhoSelectedHero",
        "description": ""
    },
    "CDOTAPlayer:GetAssignedHero": {
        "body": [
            "GetAssignedHero(  )",
            "-- Get the player's hero."
        ],
        "prefix": "GetAssignedHero",
        "description": "Get the player's hero."
    },
    "CScriptHeroList:GetAllHeroes": {
        "body": [
            "GetAllHeroes(  )",
            "-- Returns all the heroes in the world"
        ],
        "prefix": "GetAllHeroes",
        "description": "Returns all the heroes in the world"
    },
    "DOTA_HEROPICK_STATE_CM_CAPTAINPICK": {
        "body": [
            "DOTA_HEROPICK_STATE_CM_CAPTAINPICK"
        ],
        "prefix": "DOTA_HEROPICK_STATE_CM_CAPTAINPICK",
        "description": "(6) "
    },
    "Say": {
        "body": [
            "Say( ${handle_1}, ${string_2}, ${bool_3} )",
            "-- Have Entity say string, and teamOnly or not"
        ],
        "prefix": "Say",
        "description": "Have Entity say string, and teamOnly or not"
    },
    "ACT_DOTA_CAST_ABILITY_3_END": {
        "body": [
            "ACT_DOTA_CAST_ABILITY_3_END"
        ],
        "prefix": "ACT_DOTA_CAST_ABILITY_3_END",
        "description": "(1542) "
    },
    "MODIFIER_PROPERTY_MODEL_SCALE": {
        "body": [
            "MODIFIER_PROPERTY_MODEL_SCALE"
        ],
        "prefix": "MODIFIER_PROPERTY_MODEL_SCALE",
        "description": "(134)  GetModifierModelScale"
    },
    "MODIFIER_STATE_MAGIC_IMMUNE": {
        "body": [
            "MODIFIER_STATE_MAGIC_IMMUNE"
        ],
        "prefix": "MODIFIER_STATE_MAGIC_IMMUNE",
        "description": "(9) "
    },
    "CBaseTrigger:IsTouching": {
        "body": [
            "IsTouching( ${hEnt} )",
            "-- Checks whether the passed entity is touching the trigger."
        ],
        "prefix": "IsTouching",
        "description": "Checks whether the passed entity is touching the trigger."
    },
    "CEntities:FindAllByModel": {
        "body": [
            "FindAllByModel( ${string_1} )",
            "-- Find entities by model name."
        ],
        "prefix": "FindAllByModel",
        "description": "Find entities by model name."
    },
    "UTIL_ResetMessageTextAll": {
        "body": [
            "UTIL_ResetMessageTextAll(  )",
            "-- Clear all message text from all clients."
        ],
        "prefix": "UTIL_ResetMessageTextAll",
        "description": "Clear all message text from all clients."
    },
    "CCustomGameEventManager:Send_ServerToTeam": {
        "body": [
            "Send_ServerToTeam( ${int_1}, ${string_2}, ${handle_3} )",
            "-- ( int TeamNumber, string EventName, table EventData )"
        ],
        "prefix": "Send_ServerToTeam",
        "description": "( int TeamNumber, string EventName, table EventData )"
    },
    "CEntityInstance:FireOutput": {
        "body": [
            "FireOutput( ${string_1}, ${handle_2}, ${handle_3}, ${table_4}, ${float_5} )",
            "-- Fire an entity output"
        ],
        "prefix": "FireOutput",
        "description": "Fire an entity output"
    },
    "CDOTA_BaseNPC:IsAlive": {
        "body": [
            "IsAlive(  )",
            "-- Is this unit alive?"
        ],
        "prefix": "IsAlive",
        "description": "Is this unit alive?"
    },
    "CDOTA_BaseNPC:IsTower": {
        "body": [
            "IsTower(  )",
            "-- Is this a tower?"
        ],
        "prefix": "IsTower",
        "description": "Is this a tower?"
    },
    "DOTA_SPEECH_USER_TEAM": {
        "body": [
            "DOTA_SPEECH_USER_TEAM"
        ],
        "prefix": "DOTA_SPEECH_USER_TEAM",
        "description": "(2) "
    },
    "MODIFIER_PROPERTY_MANA_REGEN_TOTAL_PERCENTAGE": {
        "body": [
            "MODIFIER_PROPERTY_MANA_REGEN_TOTAL_PERCENTAGE"
        ],
        "prefix": "MODIFIER_PROPERTY_MANA_REGEN_TOTAL_PERCENTAGE",
        "description": "(48)  GetModifierTotalPercentageManaRegen"
    },
    "CDOTA_BaseNPC:GetForceAttackTarget": {
        "body": [
            "GetForceAttackTarget(  )",
            "-- "
        ],
        "prefix": "GetForceAttackTarget",
        "description": ""
    },
    "CDOTA_PlayerResource:GetTotalGoldSpent": {
        "body": [
            "GetTotalGoldSpent( ${iPlayerID} )",
            "-- "
        ],
        "prefix": "GetTotalGoldSpent",
        "description": ""
    },
    "MODIFIER_PROPERTY_BASE_ATTACK_TIME_CONSTANT": {
        "body": [
            "MODIFIER_PROPERTY_BASE_ATTACK_TIME_CONSTANT"
        ],
        "prefix": "MODIFIER_PROPERTY_BASE_ATTACK_TIME_CONSTANT",
        "description": "(23)  GetModifierBaseAttackTimeConstant"
    },
    "MODIFIER_FUNCTION_INVALID": {
        "body": [
            "MODIFIER_FUNCTION_INVALID"
        ],
        "prefix": "MODIFIER_FUNCTION_INVALID",
        "description": "(255) "
    },
    "DOTA_MINIMAP_EVENT_HINT_LOCATION": {
        "body": [
            "DOTA_MINIMAP_EVENT_HINT_LOCATION"
        ],
        "prefix": "DOTA_MINIMAP_EVENT_HINT_LOCATION",
        "description": "(512) "
    },
    "CBaseEntity:Trigger": {
        "body": [
            "Trigger(  )",
            "-- Fires off this entity's OnTrigger responses."
        ],
        "prefix": "Trigger",
        "description": "Fires off this entity's OnTrigger responses."
    },
    "Warning": {
        "body": [
            "Warning( ${string_1} )",
            "-- Print a warning"
        ],
        "prefix": "Warning",
        "description": "Print a warning"
    },
    "CDOTABaseAbility:IsFullyCastable": {
        "body": [
            "IsFullyCastable(  )",
            "-- Returns whether the ability can be cast."
        ],
        "prefix": "IsFullyCastable",
        "description": "Returns whether the ability can be cast."
    },
    "MODIFIER_PROPERTY_SPELLS_REQUIRE_HP": {
        "body": [
            "MODIFIER_PROPERTY_SPELLS_REQUIRE_HP"
        ],
        "prefix": "MODIFIER_PROPERTY_SPELLS_REQUIRE_HP",
        "description": "(140)  GetModifierSpellsRequireHP"
    },
    "Convars:GetBool": {
        "body": [
            "GetBool( ${string_1} )",
            "-- GetBool(name) : returns the convar as a boolean flag."
        ],
        "prefix": "GetBool",
        "description": "GetBool(name) : returns the convar as a boolean flag."
    },
    "CDOTABaseAbility:GetAssociatedSecondaryAbilities": {
        "body": [
            "GetAssociatedSecondaryAbilities(  )",
            "-- "
        ],
        "prefix": "GetAssociatedSecondaryAbilities",
        "description": ""
    },
    "ACT_DOTA_MEDUSA_STONE_GAZE": {
        "body": [
            "ACT_DOTA_MEDUSA_STONE_GAZE"
        ],
        "prefix": "ACT_DOTA_MEDUSA_STONE_GAZE",
        "description": "(1607) "
    },
    "CBaseEntity:GetVelocity": {
        "body": [
            "GetVelocity(  )",
            "-- "
        ],
        "prefix": "GetVelocity",
        "description": ""
    },
    "DOTA_TEAM_CUSTOM_8": {
        "body": [
            "DOTA_TEAM_CUSTOM_8"
        ],
        "prefix": "DOTA_TEAM_CUSTOM_8",
        "description": "(13) "
    },
    "CDOTA_Modifier_Lua:GetTexture": {
        "body": [
            "GetTexture(  )",
            "-- Return the name of the buff icon to be shown for this modifier."
        ],
        "prefix": "GetTexture",
        "description": "Return the name of the buff icon to be shown for this modifier."
    },
    "MODIFIER_PROPERTY_MANA_REGEN_CONSTANT": {
        "body": [
            "MODIFIER_PROPERTY_MANA_REGEN_CONSTANT"
        ],
        "prefix": "MODIFIER_PROPERTY_MANA_REGEN_CONSTANT",
        "description": "(45)  GetModifierConstantManaRegen"
    },
    "CDOTA_Item_Lua:OnUpgrade": {
        "body": [
            "OnUpgrade(  )",
            "-- Ability gained a level."
        ],
        "prefix": "OnUpgrade",
        "description": "Ability gained a level."
    },
    "CDOTABaseAbility:OnToggle": {
        "body": [
            "OnToggle(  )",
            "-- "
        ],
        "prefix": "OnToggle",
        "description": ""
    },
    "MODIFIER_PROPERTY_PHYSICAL_ARMOR_BONUS": {
        "body": [
            "MODIFIER_PROPERTY_PHYSICAL_ARMOR_BONUS"
        ],
        "prefix": "MODIFIER_PROPERTY_PHYSICAL_ARMOR_BONUS",
        "description": "(37)  GetModifierPhysicalArmorBonus"
    },
    "MODIFIER_STATE_ATTACK_IMMUNE": {
        "body": [
            "MODIFIER_STATE_ATTACK_IMMUNE"
        ],
        "prefix": "MODIFIER_STATE_ATTACK_IMMUNE",
        "description": "(2) "
    },
    "CDOTABaseAbility:OnOwnerSpawned": {
        "body": [
            "OnOwnerSpawned(  )",
            "-- "
        ],
        "prefix": "OnOwnerSpawned",
        "description": ""
    },
    "CDOTA_Modifier_Lua:OnRefresh": {
        "body": [
            "OnRefresh( ${table} )",
            "-- Runs when the modifier is refreshed."
        ],
        "prefix": "OnRefresh",
        "description": "Runs when the modifier is refreshed."
    },
    "MODIFIER_PROPERTY_PERSISTENT_INVISIBILITY": {
        "body": [
            "MODIFIER_PROPERTY_PERSISTENT_INVISIBILITY"
        ],
        "prefix": "MODIFIER_PROPERTY_PERSISTENT_INVISIBILITY",
        "description": "(9)  GetModifierPersistentInvisibility"
    },
    "CDOTA_PlayerResource:GetDenies": {
        "body": [
            "GetDenies( ${iPlayerID} )",
            "-- "
        ],
        "prefix": "GetDenies",
        "description": ""
    },
    "CBaseAnimating:SetPoseParameter": {
        "body": [
            "SetPoseParameter( ${szName}, ${fValue} )",
            "-- Set the specified pose parameter to the specified value."
        ],
        "prefix": "SetPoseParameter",
        "description": "Set the specified pose parameter to the specified value."
    },
    "DOTA_LOADOUT_TYPE_VOICE": {
        "body": [
            "DOTA_LOADOUT_TYPE_VOICE"
        ],
        "prefix": "DOTA_LOADOUT_TYPE_VOICE",
        "description": "(27) "
    },
    "SUBQUEST_NUM_TEXT_REPLACE_VALUES": {
        "body": [
            "SUBQUEST_NUM_TEXT_REPLACE_VALUES"
        ],
        "prefix": "SUBQUEST_NUM_TEXT_REPLACE_VALUES",
        "description": "(2) "
    },
    "ACT_DOTA_CHANNEL_ABILITY_3": {
        "body": [
            "ACT_DOTA_CHANNEL_ABILITY_3"
        ],
        "prefix": "ACT_DOTA_CHANNEL_ABILITY_3",
        "description": "(1522) "
    },
    "DOTA_HUD_VISIBILITY_ACTION_PANEL": {
        "body": [
            "DOTA_HUD_VISIBILITY_ACTION_PANEL"
        ],
        "prefix": "DOTA_HUD_VISIBILITY_ACTION_PANEL",
        "description": "(3) "
    },
    "DOTA_GAMERULES_STATE_TEAM_SHOWCASE": {
        "body": [
            "DOTA_GAMERULES_STATE_TEAM_SHOWCASE"
        ],
        "prefix": "DOTA_GAMERULES_STATE_TEAM_SHOWCASE",
        "description": "(5) "
    },
    "ACT_DOTA_SLARK_POUNCE": {
        "body": [
            "ACT_DOTA_SLARK_POUNCE"
        ],
        "prefix": "ACT_DOTA_SLARK_POUNCE",
        "description": "(1604) "
    },
    "StopEffect": {
        "body": [
            "StopEffect( ${handle_1}, ${string_2} )",
            "-- Pass entity and effect name"
        ],
        "prefix": "StopEffect",
        "description": "Pass entity and effect name"
    },
    "DOTA_UNIT_TARGET_FLAG_NOT_ILLUSIONS": {
        "body": [
            "DOTA_UNIT_TARGET_FLAG_NOT_ILLUSIONS"
        ],
        "prefix": "DOTA_UNIT_TARGET_FLAG_NOT_ILLUSIONS",
        "description": "(8192) "
    },
    "DebugDrawLine_vCol": {
        "body": [
            "DebugDrawLine_vCol( ${vOrigin}, ${vTarget}, ${vRGB}, ${iZtest}, ${fiDuration} )",
            "-- Draw a debug overlay line"
        ],
        "prefix": "DebugDrawLine_vCol",
        "description": "Draw a debug line using color vec (start, end, vRgb, a, ztest, duration)"
    },
    "MODIFIER_STATE_FLYING": {
        "body": [
            "MODIFIER_STATE_FLYING"
        ],
        "prefix": "MODIFIER_STATE_FLYING",
        "description": "(23) "
    },
    "CDOTABaseGameMode:SetFountainPercentageHealthRegen": {
        "body": [
            "SetFountainPercentageHealthRegen( ${flPercentageHealthRegen} )",
            "-- Set the percentage rate that the fountain will regen health. (-1 for default)"
        ],
        "prefix": "SetFountainPercentageHealthRegen",
        "description": "Set the percentage rate that the fountain will regen health. (-1 for default)"
    },
    "DOTA_HEROPICK_STATE_FH_SELECT": {
        "body": [
            "DOTA_HEROPICK_STATE_FH_SELECT"
        ],
        "prefix": "DOTA_HEROPICK_STATE_FH_SELECT",
        "description": "(30) "
    },
    "MODIFIER_PROPERTY_RESPAWNTIME": {
        "body": [
            "MODIFIER_PROPERTY_RESPAWNTIME"
        ],
        "prefix": "MODIFIER_PROPERTY_RESPAWNTIME",
        "description": "(63)  GetModifierConstantRespawnTime"
    },
    "CBasePlayer:GetHMDAvatar": {
        "body": [
            "GetHMDAvatar(  )",
            "-- Returns the HMD Avatar entity for this player if it exists."
        ],
        "prefix": "GetHMDAvatar",
        "description": "Returns the HMD Avatar entity for this player if it exists."
    },
    "CreateHTTPRequest": {
        "body": [
            "CreateHTTPRequest( ${string_1}, ${string_2} )",
            "-- Create an HTTP request."
        ],
        "prefix": "CreateHTTPRequest",
        "description": "Create an HTTP request."
    },
    "ACT_DOTA_CAST_DRAGONBREATH": {
        "body": [
            "ACT_DOTA_CAST_DRAGONBREATH"
        ],
        "prefix": "ACT_DOTA_CAST_DRAGONBREATH",
        "description": "(1538) "
    },
    "CDOTA_PlayerResource:GetNthCourierForTeam": {
        "body": [
            "GetNthCourierForTeam( ${nCourierIndex}, ${nTeamNumber} )",
            "-- "
        ],
        "prefix": "GetNthCourierForTeam",
        "description": ""
    },
    "ACT_DOTA_GREEVIL_OVERRIDE_ABILITY": {
        "body": [
            "ACT_DOTA_GREEVIL_OVERRIDE_ABILITY"
        ],
        "prefix": "ACT_DOTA_GREEVIL_OVERRIDE_ABILITY",
        "description": "(1618) "
    },
    "DOTA_ABILITY_BEHAVIOR_DONT_CANCEL_CHANNEL": {
        "body": [
            "DOTA_ABILITY_BEHAVIOR_DONT_CANCEL_CHANNEL"
        ],
        "prefix": "DOTA_ABILITY_BEHAVIOR_DONT_CANCEL_CHANNEL",
        "description": "(536870912) "
    },
    "DOTA_LOADOUT_TYPE_NONE": {
        "body": [
            "DOTA_LOADOUT_TYPE_NONE"
        ],
        "prefix": "DOTA_LOADOUT_TYPE_NONE",
        "description": "(43) "
    },
    "DOTA_TEAM_CUSTOM_1": {
        "body": [
            "DOTA_TEAM_CUSTOM_1"
        ],
        "prefix": "DOTA_TEAM_CUSTOM_1",
        "description": "(6) "
    },
    "ACT_TINY_AVALANCHE": {
        "body": [
            "ACT_TINY_AVALANCHE"
        ],
        "prefix": "ACT_TINY_AVALANCHE",
        "description": "(1558) "
    },
    "CDOTA_BaseNPC_Hero:HasOwnerAbandoned": {
        "body": [
            "HasOwnerAbandoned(  )",
            "-- "
        ],
        "prefix": "HasOwnerAbandoned",
        "description": ""
    },
    "DebugDrawScreenTextLine": {
        "body": [
            "DebugDrawScreenTextLine( ${fX}, ${fY}, ${iOffset}, ${sText}, ${iRed}, ${iGreen}, ${iBlue}, ${iAlpha}, ${fDuration} )",
            "-- Draw text on the screen, offset downwards by a set number of lines"
        ],
        "prefix": "DebugDrawScreenTextLine",
        "description": "Draw text with a line offset (x, y, lineOffset, text, r, g, b, a, duration)"
    },
    "UF_FAIL_HERO": {
        "body": [
            "UF_FAIL_HERO"
        ],
        "prefix": "UF_FAIL_HERO",
        "description": "(3) "
    },
    "DOTA_ABILITY_BEHAVIOR_IMMEDIATE": {
        "body": [
            "DOTA_ABILITY_BEHAVIOR_IMMEDIATE"
        ],
        "prefix": "DOTA_ABILITY_BEHAVIOR_IMMEDIATE",
        "description": "(2048) "
    },
    "CBaseEntity:GetForwardVector": {
        "body": [
            "GetForwardVector(  )",
            "-- Get the forward vector of the entity."
        ],
        "prefix": "GetForwardVector",
        "description": "Get the forward vector of the entity."
    },
    "DOTA_ABILITY_BEHAVIOR_DONT_RESUME_MOVEMENT": {
        "body": [
            "DOTA_ABILITY_BEHAVIOR_DONT_RESUME_MOVEMENT"
        ],
        "prefix": "DOTA_ABILITY_BEHAVIOR_DONT_RESUME_MOVEMENT",
        "description": "(262144) "
    },
    "CDOTA_BaseNPC:IsCreep": {
        "body": [
            "IsCreep(  )",
            "-- Is this unit a creep?"
        ],
        "prefix": "IsCreep",
        "description": "Is this unit a creep?"
    },
    "ACT_DOTA_PET_WARD_OBSERVER": {
        "body": [
            "ACT_DOTA_PET_WARD_OBSERVER"
        ],
        "prefix": "ACT_DOTA_PET_WARD_OBSERVER",
        "description": "(1699) "
    },
    "CDOTA_BaseNPC:TriggerSpellReflect": {
        "body": [
            "TriggerSpellReflect( ${hAbility} )",
            "-- Trigger the Lotus Orb-like effect.(hAbility)"
        ],
        "prefix": "TriggerSpellReflect",
        "description": "Trigger the Lotus Orb-like effect.(hAbility)"
    },
    "PATTACH_WATERWAKE": {
        "body": [
            "PATTACH_WATERWAKE"
        ],
        "prefix": "PATTACH_WATERWAKE",
        "description": "(12) "
    },
    "CDOTA_BaseNPC:SetCursorPosition": {
        "body": [
            "SetCursorPosition( ${vLocation} )",
            "-- "
        ],
        "prefix": "SetCursorPosition",
        "description": ""
    },
    "CDOTA_Modifier_Lua_Motion_Both:SetPriority": {
        "body": [
            "SetPriority( ${nMotionPriority} )",
            "-- Set the priority"
        ],
        "prefix": "SetPriority",
        "description": "Set the priority"
    },
    "DOTA_ABILITY_BEHAVIOR_HIDDEN": {
        "body": [
            "DOTA_ABILITY_BEHAVIOR_HIDDEN"
        ],
        "prefix": "DOTA_ABILITY_BEHAVIOR_HIDDEN",
        "description": "(1) "
    },
    "CDOTA_BaseNPC_Hero:IncrementLastHits": {
        "body": [
            "IncrementLastHits(  )",
            "-- Value is stored in PlayerResource."
        ],
        "prefix": "IncrementLastHits",
        "description": "Value is stored in PlayerResource."
    },
    "CDebugOverlayScriptHelper:UnitTestCycleOverlayRenderType": {
        "body": [
            "UnitTestCycleOverlayRenderType(  )",
            "-- Toggles the overlay render type, for unit tests"
        ],
        "prefix": "UnitTestCycleOverlayRenderType",
        "description": "Toggles the overlay render type, for unit tests"
    },
    "DOTA_TEAM_GOODGUYS": {
        "body": [
            "DOTA_TEAM_GOODGUYS"
        ],
        "prefix": "DOTA_TEAM_GOODGUYS",
        "description": "(2) "
    },
    "CDOTA_BaseNPC_Hero:GetDeaths": {
        "body": [
            "GetDeaths(  )",
            "-- Value is stored in PlayerResource."
        ],
        "prefix": "GetDeaths",
        "description": "Value is stored in PlayerResource."
    },
    "CDOTA_Item_Lua:OnSpellStart": {
        "body": [
            "OnSpellStart(  )",
            "-- Cast time finished, spell effects begin."
        ],
        "prefix": "OnSpellStart",
        "description": "Cast time finished, spell effects begin."
    },
    "CDOTA_Modifier_Lua_Motion_Both:ApplyHorizontalMotionController": {
        "body": [
            "ApplyHorizontalMotionController(  )",
            "-- Starts the horizontal motion controller effects for this buff.  Returns true if successful."
        ],
        "prefix": "ApplyHorizontalMotionController",
        "description": "Starts the horizontal motion controller effects for this buff.  Returns true if successful."
    },
    "CDOTA_BaseNPC:PickupDroppedItem": {
        "body": [
            "PickupDroppedItem( ${hItem} )",
            "-- Pick up a dropped item."
        ],
        "prefix": "PickupDroppedItem",
        "description": "Pick up a dropped item."
    },
    "CDOTA_PlayerResource:GetTeam": {
        "body": [
            "GetTeam( ${iPlayerID} )",
            "-- "
        ],
        "prefix": "GetTeam",
        "description": ""
    },
    "CDOTA_BaseNPC:GetMoveSpeedModifier": {
        "body": [
            "GetMoveSpeedModifier( ${flBaseSpeed} )",
            "-- "
        ],
        "prefix": "GetMoveSpeedModifier",
        "description": ""
    },
    "MODIFIER_PROPERTY_MAGICAL_RESISTANCE_DECREPIFY_UNIQUE": {
        "body": [
            "MODIFIER_PROPERTY_MAGICAL_RESISTANCE_DECREPIFY_UNIQUE"
        ],
        "prefix": "MODIFIER_PROPERTY_MAGICAL_RESISTANCE_DECREPIFY_UNIQUE",
        "description": "(43)  GetModifierMagicalResistanceDecrepifyUnique"
    },
    "AddFOWViewer": {
        "body": [
            "AddFOWViewer( ${int_1}, ${Vector_2}, ${float_3}, ${float_4}, ${bool_5} )",
            "-- Add temporary vision for a given team ( nTeamID, vLocation, flRadius, flDuration, bObstructedVision)"
        ],
        "prefix": "AddFOWViewer",
        "description": "Add temporary vision for a given team ( nTeamID, vLocation, flRadius, flDuration, bObstructedVision)"
    },
    "ACT_DOTA_CAST_REFRACTION": {
        "body": [
            "ACT_DOTA_CAST_REFRACTION"
        ],
        "prefix": "ACT_DOTA_CAST_REFRACTION",
        "description": "(1597) "
    },
    "CDOTA_BaseNPC_Hero:GetNumItemsInInventory": {
        "body": [
            "GetNumItemsInInventory(  )",
            "-- "
        ],
        "prefix": "GetNumItemsInInventory",
        "description": ""
    },
    "CDOTA_BaseNPC:IsControllableByAnyPlayer": {
        "body": [
            "IsControllableByAnyPlayer(  )",
            "-- Is this unit controlled by any non-bot player?"
        ],
        "prefix": "IsControllableByAnyPlayer",
        "description": "Is this unit controlled by any non-bot player?"
    },
    "DOTA_UNIT_CAP_MOVE_NONE": {
        "body": [
            "DOTA_UNIT_CAP_MOVE_NONE"
        ],
        "prefix": "DOTA_UNIT_CAP_MOVE_NONE",
        "description": "(0) "
    },
    "MODIFIER_PROPERTY_ABSOLUTE_NO_DAMAGE_MAGICAL": {
        "body": [
            "MODIFIER_PROPERTY_ABSOLUTE_NO_DAMAGE_MAGICAL"
        ],
        "prefix": "MODIFIER_PROPERTY_ABSOLUTE_NO_DAMAGE_MAGICAL",
        "description": "(88)  GetAbsoluteNoDamageMagical"
    },
    "CDOTA_BaseNPC_Building:SetInvulnCount": {
        "body": [
            "SetInvulnCount( ${nInvulnCount} )",
            "-- Set the invulnerability counter of this building."
        ],
        "prefix": "SetInvulnCount",
        "description": "Set the invulnerability counter of this building."
    },
    "CDOTA_Modifier_Lua:GetAuraDuration": {
        "body": [
            "GetAuraDuration(  )",
            "-- Returns aura stickiness"
        ],
        "prefix": "GetAuraDuration",
        "description": "Returns aura stickiness"
    },
    "CDOTABaseAbility:IsItem": {
        "body": [
            "IsItem(  )",
            "-- "
        ],
        "prefix": "IsItem",
        "description": ""
    },
    "CBasePlayer:IsVRControllerButtonPressed": {
        "body": [
            "IsVRControllerButtonPressed( ${nButton} )",
            "-- Returns true if the controller button is pressed."
        ],
        "prefix": "IsVRControllerButtonPressed",
        "description": "Returns true if the controller button is pressed."
    },
    "CCustomGameEventManager:UnregisterListener": {
        "body": [
            "UnregisterListener( ${int_1} )",
            "-- ( int ListnerID ) - Unregister a specific listener"
        ],
        "prefix": "UnregisterListener",
        "description": "( int ListnerID ) - Unregister a specific listener"
    },
    "MODIFIER_EVENT_ON_ORDER": {
        "body": [
            "MODIFIER_EVENT_ON_ORDER"
        ],
        "prefix": "MODIFIER_EVENT_ON_ORDER",
        "description": "(106)  OnOrder"
    },
    "CDOTA_Ability_Lua:OnInventoryContentsChanged": {
        "body": [
            "OnInventoryContentsChanged(  )",
            "-- Caster inventory changed."
        ],
        "prefix": "OnInventoryContentsChanged",
        "description": "Caster inventory changed."
    },
    "CDOTA_Buff:GetAuraDuration": {
        "body": [
            "GetAuraDuration(  )",
            "-- Returns aura stickiness (default 0.5)"
        ],
        "prefix": "GetAuraDuration",
        "description": "Returns aura stickiness (default 0.5)"
    },
    "CDOTA_BaseNPC:GetAttackRangeBuffer": {
        "body": [
            "GetAttackRangeBuffer(  )",
            "-- Gets the attack range buffer."
        ],
        "prefix": "GetAttackRangeBuffer",
        "description": "Gets the attack range buffer."
    },
    "DOTA_DAMAGE_FLAG_IGNORES_PHYSICAL_ARMOR": {
        "body": [
            "DOTA_DAMAGE_FLAG_IGNORES_PHYSICAL_ARMOR"
        ],
        "prefix": "DOTA_DAMAGE_FLAG_IGNORES_PHYSICAL_ARMOR",
        "description": "(2) "
    },
    "CDOTA_BaseNPC:GetPlayerOwnerID": {
        "body": [
            "GetPlayerOwnerID(  )",
            "-- Get the owner player ID for this unit."
        ],
        "prefix": "GetPlayerOwnerID",
        "description": "Get the owner player ID for this unit."
    },
    "DOTA_HUD_VISIBILITY_SHOP_SUGGESTEDITEMS": {
        "body": [
            "DOTA_HUD_VISIBILITY_SHOP_SUGGESTEDITEMS"
        ],
        "prefix": "DOTA_HUD_VISIBILITY_SHOP_SUGGESTEDITEMS",
        "description": "(12) "
    },
    "CDOTA_BaseNPC:RemoveVerticalMotionController": {
        "body": [
            "RemoveVerticalMotionController( ${hBuff} )",
            "-- "
        ],
        "prefix": "RemoveVerticalMotionController",
        "description": ""
    },
    "CEntities:FindByModelWithin": {
        "body": [
            "FindByModelWithin( ${handle_1}, ${string_2}, ${Vector_3}, ${float_4} )",
            "-- Find entities by model name within a radius. Pass 'null' to start an iteration, or reference to a previously found entity to continue a search"
        ],
        "prefix": "FindByModelWithin",
        "description": "Find entities by model name within a radius. Pass 'null' to start an iteration, or reference to a previously found entity to continue a search"
    },
    "UF_SUCCESS": {
        "body": [
            "UF_SUCCESS"
        ],
        "prefix": "UF_SUCCESS",
        "description": "(0) "
    },
    "DOTA_HEROPICK_STATE_CM_BAN3": {
        "body": [
            "DOTA_HEROPICK_STATE_CM_BAN3"
        ],
        "prefix": "DOTA_HEROPICK_STATE_CM_BAN3",
        "description": "(9) "
    },
    "DOTA_GAMERULES_STATE_POST_GAME": {
        "body": [
            "DOTA_GAMERULES_STATE_POST_GAME"
        ],
        "prefix": "DOTA_GAMERULES_STATE_POST_GAME",
        "description": "(8) "
    },
    "CDOTA_Buff:GetDuration": {
        "body": [
            "GetDuration(  )",
            "-- "
        ],
        "prefix": "GetDuration",
        "description": ""
    },
    "CDOTA_BaseNPC_Hero:ModifyAgility": {
        "body": [
            "ModifyAgility( ${flNewAgility} )",
            "-- Adds passed value to base attribute value, then calls CalculateStatBonus."
        ],
        "prefix": "ModifyAgility",
        "description": "Adds passed value to base attribute value, then calls CalculateStatBonus."
    },
    "CDOTA_BaseNPC:GetHealthRegen": {
        "body": [
            "GetHealthRegen(  )",
            "-- "
        ],
        "prefix": "GetHealthRegen",
        "description": ""
    },
    "DOTA_HEROPICK_STATE_CM_SELECT1": {
        "body": [
            "DOTA_HEROPICK_STATE_CM_SELECT1"
        ],
        "prefix": "DOTA_HEROPICK_STATE_CM_SELECT1",
        "description": "(17) "
    },
    "UF_FAIL_INVISIBLE": {
        "body": [
            "UF_FAIL_INVISIBLE"
        ],
        "prefix": "UF_FAIL_INVISIBLE",
        "description": "(21) "
    },
    "CBaseEntity:GatherCriteria": {
        "body": [
            "GatherCriteria( ${hResult} )",
            "-- Returns a table containing the criteria that would be used for response queries on this entity. This is the same as the table that is passed to response rule script function callbacks."
        ],
        "prefix": "GatherCriteria",
        "description": "Returns a table containing the criteria that would be used for response queries on this entity. This is the same as the table that is passed to response rule script function callbacks."
    },
    "CDOTA_PlayerResource:IncrementClaimedDenies": {
        "body": [
            "IncrementClaimedDenies( ${iPlayerID} )",
            "-- "
        ],
        "prefix": "IncrementClaimedDenies",
        "description": ""
    },
    "CDOTA_BaseNPC_Building:GetInvulnCount": {
        "body": [
            "GetInvulnCount(  )",
            "-- Get the invulnerability count for a building."
        ],
        "prefix": "GetInvulnCount",
        "description": "Get the invulnerability count for a building."
    },
    "DebugBreak": {
        "body": [
            "DebugBreak(  )",
            "-- Breaks in the debugger"
        ],
        "prefix": "DebugBreak",
        "description": "Breaks in the debugger"
    },
    "EmitSoundOnLocationForAllies": {
        "body": [
            "EmitSoundOnLocationForAllies( ${Vector_1}, ${string_2}, ${handle_3} )",
            "-- Emit a sound on a location from a unit, only for players allied with that unit (vLocation, soundName, hCaster"
        ],
        "prefix": "EmitSoundOnLocationForAllies",
        "description": "Emit a sound on a location from a unit, only for players allied with that unit (vLocation, soundName, hCaster"
    },
    "CDOTA_PlayerResource:ModifyGold": {
        "body": [
            "ModifyGold( ${iPlayerID}, ${iGoldChange}, ${bReliable}, ${nReason} )",
            "-- "
        ],
        "prefix": "ModifyGold",
        "description": ""
    },
    "CDOTA_BaseNPC:PerformAttack": {
        "body": [
            "PerformAttack( ${hTarget}, ${bUseCastAttackOrb}, ${bProcessProcs}, ${bSkipCooldown}, ${bIgnoreInvis} )",
            "-- Performs an attack on a target."
        ],
        "prefix": "PerformAttack",
        "description": "Performs an attack on a target."
    },
    "CDOTA_BaseNPC:DropItemAtPositionImmediate": {
        "body": [
            "DropItemAtPositionImmediate( ${hItem}, ${vPosition} )",
            "-- Immediately drop a carried item at a given position."
        ],
        "prefix": "DropItemAtPositionImmediate",
        "description": "Immediately drop a carried item at a given position."
    },
    "DOTA_HEROPICK_STATE_AP_SELECT": {
        "body": [
            "DOTA_HEROPICK_STATE_AP_SELECT"
        ],
        "prefix": "DOTA_HEROPICK_STATE_AP_SELECT",
        "description": "(1) "
    },
    "CDOTA_PlayerResource:GetCustomBuybackCost": {
        "body": [
            "GetCustomBuybackCost( ${iPlayerID} )",
            "-- "
        ],
        "prefix": "GetCustomBuybackCost",
        "description": ""
    },
    "CDebugOverlayScriptHelper:YawArrow": {
        "body": [
            "YawArrow( ${Vector_1}, ${float_2}, ${float_3}, ${float_4}, ${int_5}, ${int_6}, ${int_7}, ${int_8}, ${bool_9}, ${float_10} )",
            "-- Draws a arrow associated with a specific yaw. Specify endpoints in world space."
        ],
        "prefix": "YawArrow",
        "description": "Draws a arrow associated with a specific yaw. Specify endpoints in world space."
    },
    "CDOTA_BaseNPC_Creature:SetManaRegenGain": {
        "body": [
            "SetManaRegenGain( ${flManaRegenGain} )",
            "-- Set the mana points regen gained per level on this creature."
        ],
        "prefix": "SetManaRegenGain",
        "description": "Set the mana points regen gained per level on this creature."
    },
    "CDOTA_BaseNPC:Stop": {
        "body": [
            "Stop(  )",
            "-- Stop the current order."
        ],
        "prefix": "Stop",
        "description": "Stop the current order."
    },
    "CDOTA_PlayerResource:GetEventPointsForPlayerID": {
        "body": [
            "GetEventPointsForPlayerID( ${iPlayerID} )",
            "-- "
        ],
        "prefix": "GetEventPointsForPlayerID",
        "description": ""
    },
    "DOTA_HEROPICK_STATE_CD_CAPTAINPICK": {
        "body": [
            "DOTA_HEROPICK_STATE_CD_CAPTAINPICK"
        ],
        "prefix": "DOTA_HEROPICK_STATE_CD_CAPTAINPICK",
        "description": "(32) "
    },
    "DAMAGE_TYPE_MAGICAL": {
        "body": [
            "DAMAGE_TYPE_MAGICAL"
        ],
        "prefix": "DAMAGE_TYPE_MAGICAL",
        "description": "(2) "
    },
    "CDOTABaseGameMode:SetBountyRunePickupFilter": {
        "body": [
            "SetBountyRunePickupFilter( ${hFunction}, ${hContext} )",
            "-- Set a filter function to control the behavior when a bounty rune is picked up. (Modify the table and Return true to use new values, return false to cancel the event)"
        ],
        "prefix": "SetBountyRunePickupFilter",
        "description": "Set a filter function to control the behavior when a bounty rune is picked up. (Modify the table and Return true to use new values, return false to cancel the event)"
    },
    "CDOTA_Buff:GetStackCount": {
        "body": [
            "GetStackCount(  )",
            "-- "
        ],
        "prefix": "GetStackCount",
        "description": ""
    },
    "ACT_DOTA_CAGED_CREEP_SMASH": {
        "body": [
            "ACT_DOTA_CAGED_CREEP_SMASH"
        ],
        "prefix": "ACT_DOTA_CAGED_CREEP_SMASH",
        "description": "(1646) "
    },
    "CBaseAnimating:GetAttachmentAngles": {
        "body": [
            "GetAttachmentAngles( ${iAttachment} )",
            "-- Get the attachement id's angles as a p,y,r vector."
        ],
        "prefix": "GetAttachmentAngles",
        "description": "Get the attachement id's angles as a p,y,r vector."
    },
    "DOTA_ATTRIBUTE_MAX": {
        "body": [
            "DOTA_ATTRIBUTE_MAX"
        ],
        "prefix": "DOTA_ATTRIBUTE_MAX",
        "description": "(3) "
    },
    "CDOTA_PlayerResource:ResetTotalEarnedGold": {
        "body": [
            "ResetTotalEarnedGold( ${iPlayerID} )",
            "-- "
        ],
        "prefix": "ResetTotalEarnedGold",
        "description": ""
    },
    "EntIndexToHScript": {
        "body": [
            "EntIndexToHScript( ${int_1} )",
            "-- Turn an entity index integer to an HScript representing that entity's script instance."
        ],
        "prefix": "EntIndexToHScript",
        "description": "Turn an entity index integer to an HScript representing that entity's script instance."
    },
    "UnloadSpawnGroup": {
        "body": [
            "UnloadSpawnGroup( ${string_1} )",
            "-- Unload a spawn group by name"
        ],
        "prefix": "UnloadSpawnGroup",
        "description": "Unload a spawn group by name"
    },
    "DOTA_LOADOUT_TYPE_HEROIC_STATUE": {
        "body": [
            "DOTA_LOADOUT_TYPE_HEROIC_STATUE"
        ],
        "prefix": "DOTA_LOADOUT_TYPE_HEROIC_STATUE",
        "description": "(37) "
    },
    "CBaseAnimating:IsSequenceFinished": {
        "body": [
            "IsSequenceFinished(  )",
            "-- Ask whether the main sequence is done playing."
        ],
        "prefix": "IsSequenceFinished",
        "description": "Ask whether the main sequence is done playing."
    },
    "CDOTABaseAbility:IsSharedWithTeammates": {
        "body": [
            "IsSharedWithTeammates(  )",
            "-- "
        ],
        "prefix": "IsSharedWithTeammates",
        "description": ""
    },
    "CDOTA_Modifier_Lua:GetAuraRadius": {
        "body": [
            "GetAuraRadius(  )",
            "-- Return the range around the parent this aura tries to apply its buff."
        ],
        "prefix": "GetAuraRadius",
        "description": "Return the range around the parent this aura tries to apply its buff."
    },
    "CDOTA_BaseNPC:GetItemInSlot": {
        "body": [
            "GetItemInSlot( ${i} )",
            "-- Returns nth item in inventory slot (index is zero based)."
        ],
        "prefix": "GetItemInSlot",
        "description": "Returns nth item in inventory slot (index is zero based)."
    },
    "CDOTA_Item_Lua:OnHeroLevelUp": {
        "body": [
            "OnHeroLevelUp(  )",
            "-- Caster gained a level."
        ],
        "prefix": "OnHeroLevelUp",
        "description": "Caster gained a level."
    },
    "CDOTA_Ability_Lua:OnOwnerDied": {
        "body": [
            "OnOwnerDied(  )",
            "-- Caster died."
        ],
        "prefix": "OnOwnerDied",
        "description": "Caster died."
    },
    "CDOTABaseAbility:RefundManaCost": {
        "body": [
            "RefundManaCost(  )",
            "-- "
        ],
        "prefix": "RefundManaCost",
        "description": ""
    },
    "CDOTA_BaseNPC_Hero:HasAnyAvailableInventorySpace": {
        "body": [
            "HasAnyAvailableInventorySpace(  )",
            "-- "
        ],
        "prefix": "HasAnyAvailableInventorySpace",
        "description": ""
    },
    "DOTA_ModifyGold_CheatCommand": {
        "body": [
            "DOTA_ModifyGold_CheatCommand"
        ],
        "prefix": "DOTA_ModifyGold_CheatCommand",
        "description": "(8) "
    },
    "CDOTABaseGameMode:SetRemoveIllusionsOnDeath": {
        "body": [
            "SetRemoveIllusionsOnDeath( ${bRemove} )",
            "-- Make it so illusions are immediately removed upon death, rather than sticking around for a few seconds."
        ],
        "prefix": "SetRemoveIllusionsOnDeath",
        "description": "Make it so illusions are immediately removed upon death, rather than sticking around for a few seconds."
    },
    "CDOTABaseGameMode:SetAlwaysShowPlayerInventory": {
        "body": [
            "SetAlwaysShowPlayerInventory( ${bAlwaysShow} )",
            "-- Show the player hero's inventory in the HUD, regardless of what unit is selected."
        ],
        "prefix": "SetAlwaysShowPlayerInventory",
        "description": "Show the player hero's inventory in the HUD, regardless of what unit is selected."
    },
    "CDOTA_Modifier_Lua:OnCreated": {
        "body": [
            "OnCreated( ${table} )",
            "-- Runs when the modifier is created."
        ],
        "prefix": "OnCreated",
        "description": "Runs when the modifier is created."
    },
    "EmitAnnouncerSoundForPlayer": {
        "body": [
            "EmitAnnouncerSoundForPlayer( ${string_1}, ${int_2} )",
            "-- Emit an announcer sound for a player."
        ],
        "prefix": "EmitAnnouncerSoundForPlayer",
        "description": "Emit an announcer sound for a player."
    },
    "CDOTA_Ability_Lua:OnProjectileHit": {
        "body": [
            "OnProjectileHit( ${hTarget}, ${vLocation} )",
            "-- (HSCRIPT hTarget, Vector vLocation) Projectile has collided with a given target or reached its destination (target is invalid)."
        ],
        "prefix": "OnProjectileHit",
        "description": "(HSCRIPT hTarget, Vector vLocation) Projectile has collided with a given target or reached its destination (target is invalid)."
    },
    "StopListeningToAllGameEvents": {
        "body": [
            "StopListeningToAllGameEvents( ${handle_1} )",
            "-- Stop listening to all game events within a specific context."
        ],
        "prefix": "StopListeningToAllGameEvents",
        "description": "Stop listening to all game events within a specific context."
    },
    "CBaseTrigger:Disable": {
        "body": [
            "Disable(  )",
            "-- Disable's the trigger"
        ],
        "prefix": "Disable",
        "description": "Disable's the trigger"
    },
    "ACT_TINY_GROWL": {
        "body": [
            "ACT_TINY_GROWL"
        ],
        "prefix": "ACT_TINY_GROWL",
        "description": "(1560) "
    },
    "CDOTA_BaseNPC:IsStunned": {
        "body": [
            "IsStunned(  )",
            "-- "
        ],
        "prefix": "IsStunned",
        "description": ""
    },
    "CDOTABaseAbility:GetLevelSpecialValueFor": {
        "body": [
            "GetLevelSpecialValueFor( ${szName}, ${nLevel} )",
            "-- "
        ],
        "prefix": "GetLevelSpecialValueFor",
        "description": ""
    },
    "CDOTA_BaseNPC:IsBuilding": {
        "body": [
            "IsBuilding(  )",
            "-- Is this unit a building?"
        ],
        "prefix": "IsBuilding",
        "description": "Is this unit a building?"
    },
    "DOTA_UNIT_TARGET_FLAG_NOT_MAGIC_IMMUNE_ALLIES": {
        "body": [
            "DOTA_UNIT_TARGET_FLAG_NOT_MAGIC_IMMUNE_ALLIES"
        ],
        "prefix": "DOTA_UNIT_TARGET_FLAG_NOT_MAGIC_IMMUNE_ALLIES",
        "description": "(32) "
    },
    "CInfoData:QueryFloat": {
        "body": [
            "QueryFloat( ${tok}, ${flDefault} )",
            "-- Query float data for this key"
        ],
        "prefix": "QueryFloat",
        "description": "Query float data for this key"
    },
    "CDOTA_Modifier_Lua_Motion_Both:OnHorizontalMotionInterrupted": {
        "body": [
            "OnHorizontalMotionInterrupted(  )",
            "-- Called when the motion gets interrupted."
        ],
        "prefix": "OnHorizontalMotionInterrupted",
        "description": "Called when the motion gets interrupted."
    },
    "MODIFIER_PROPERTY_BASEATTACK_BONUSDAMAGE": {
        "body": [
            "MODIFIER_PROPERTY_BASEATTACK_BONUSDAMAGE"
        ],
        "prefix": "MODIFIER_PROPERTY_BASEATTACK_BONUSDAMAGE",
        "description": "(2)  GetModifierBaseAttack_BonusDamage"
    },
    "CDOTA_BaseNPC_Hero:GetNumAttackers": {
        "body": [
            "GetNumAttackers(  )",
            "-- "
        ],
        "prefix": "GetNumAttackers",
        "description": ""
    },
    "GetWorldMaxX": {
        "body": [
            "GetWorldMaxX(  )",
            "-- Gets the world's maximum X position."
        ],
        "prefix": "GetWorldMaxX",
        "description": "Gets the world's maximum X position."
    },
    "CDOTABaseGameMode:SetBotsInLateGame": {
        "body": [
            "SetBotsInLateGame( ${bLateGame} )",
            "-- Set if bots should enable their late game behavior."
        ],
        "prefix": "SetBotsInLateGame",
        "description": "Set if bots should enable their late game behavior."
    },
    "DOTA_LOADOUT_TYPE_WARD": {
        "body": [
            "DOTA_LOADOUT_TYPE_WARD"
        ],
        "prefix": "DOTA_LOADOUT_TYPE_WARD",
        "description": "(33) "
    },
    "CDOTABaseAbility:SetAbilityIndex": {
        "body": [
            "SetAbilityIndex( ${iIndex} )",
            "-- "
        ],
        "prefix": "SetAbilityIndex",
        "description": ""
    },
    "DOTA_DAMAGE_FLAG_NO_DIRECTOR_EVENT": {
        "body": [
            "DOTA_DAMAGE_FLAG_NO_DIRECTOR_EVENT"
        ],
        "prefix": "DOTA_DAMAGE_FLAG_NO_DIRECTOR_EVENT",
        "description": "(64) "
    },
    "DOTA_LOADOUT_TYPE_LOADING_SCREEN": {
        "body": [
            "DOTA_LOADOUT_TYPE_LOADING_SCREEN"
        ],
        "prefix": "DOTA_LOADOUT_TYPE_LOADING_SCREEN",
        "description": "(35) "
    },
    "CDOTABaseGameMode:GetCustomBuybackCostEnabled": {
        "body": [
            "GetCustomBuybackCostEnabled(  )",
            "-- Turns on capability to define custom buyback costs."
        ],
        "prefix": "GetCustomBuybackCostEnabled",
        "description": "Turns on capability to define custom buyback costs."
    },
    "CDOTABaseGameMode:GetCustomBuybackCooldownEnabled": {
        "body": [
            "GetCustomBuybackCooldownEnabled(  )",
            "-- Turns on capability to define custom buyback cooldowns."
        ],
        "prefix": "GetCustomBuybackCooldownEnabled",
        "description": "Turns on capability to define custom buyback cooldowns."
    },
    "DOTA_UNIT_TARGET_FLAG_NOT_ANCIENTS": {
        "body": [
            "DOTA_UNIT_TARGET_FLAG_NOT_ANCIENTS"
        ],
        "prefix": "DOTA_UNIT_TARGET_FLAG_NOT_ANCIENTS",
        "description": "(512) "
    },
    "CScriptParticleManager:SetParticleControlEnt": {
        "body": [
            "SetParticleControlEnt( ${int_1}, ${int_2}, ${handle_3}, ${int_4}, ${string_5}, ${Vector_6}, ${bool_7} )",
            "-- "
        ],
        "prefix": "SetParticleControlEnt",
        "description": ""
    },
    "MODIFIER_STATE_INVISIBLE": {
        "body": [
            "MODIFIER_STATE_INVISIBLE"
        ],
        "prefix": "MODIFIER_STATE_INVISIBLE",
        "description": "(7) "
    },
    "CDOTA_Item_Lua:GetCustomCastError": {
        "body": [
            "GetCustomCastError(  )",
            "-- Return the error string of a failed command with no target."
        ],
        "prefix": "GetCustomCastError",
        "description": "Return the error string of a failed command with no target."
    },
    "CDOTA_PlayerResource:GetGoldSpentOnSupport": {
        "body": [
            "GetGoldSpentOnSupport( ${iPlayerID} )",
            "-- "
        ],
        "prefix": "GetGoldSpentOnSupport",
        "description": ""
    },
    "CBaseEntity:GetUpVector": {
        "body": [
            "GetUpVector(  )",
            "-- Get the up vector of the entity."
        ],
        "prefix": "GetUpVector",
        "description": "Get the up vector of the entity."
    },
    "CDOTA_BaseNPC:GetHealthDeficit": {
        "body": [
            "GetHealthDeficit(  )",
            "-- Returns integer amount of health missing from max."
        ],
        "prefix": "GetHealthDeficit",
        "description": "Returns integer amount of health missing from max."
    },
    "CDOTABaseAbility:OnSpellStart": {
        "body": [
            "OnSpellStart(  )",
            "-- "
        ],
        "prefix": "OnSpellStart",
        "description": ""
    },
    "ACT_DOTA_LEAP_SWIPE": {
        "body": [
            "ACT_DOTA_LEAP_SWIPE"
        ],
        "prefix": "ACT_DOTA_LEAP_SWIPE",
        "description": "(1659) "
    },
    "CDOTA_Ability_Lua:GetAssociatedSecondaryAbilities": {
        "body": [
            "GetAssociatedSecondaryAbilities(  )",
            "-- Returns other abilities that are stolen simultaneously, or otherwise related in functionality.  Generally hidden abilities."
        ],
        "prefix": "GetAssociatedSecondaryAbilities",
        "description": "Returns other abilities that are stolen simultaneously, or otherwise related in functionality.  Generally hidden abilities."
    },
    "CDOTA_PlayerResource:GetRunePickups": {
        "body": [
            "GetRunePickups( ${iPlayerID} )",
            "-- "
        ],
        "prefix": "GetRunePickups",
        "description": ""
    },
    "MODIFIER_PROPERTY_INCOMING_PHYSICAL_DAMAGE_PERCENTAGE": {
        "body": [
            "MODIFIER_PROPERTY_INCOMING_PHYSICAL_DAMAGE_PERCENTAGE"
        ],
        "prefix": "MODIFIER_PROPERTY_INCOMING_PHYSICAL_DAMAGE_PERCENTAGE",
        "description": "(31)  GetModifierIncomingPhysicalDamage_Percentage"
    },
    "ACT_DOTA_CAST_ABILITY_2_ES_ROLL": {
        "body": [
            "ACT_DOTA_CAST_ABILITY_2_ES_ROLL"
        ],
        "prefix": "ACT_DOTA_CAST_ABILITY_2_ES_ROLL",
        "description": "(1653) "
    },
    "CDOTA_BaseNPC:AngerNearbyUnits": {
        "body": [
            "AngerNearbyUnits(  )",
            "-- "
        ],
        "prefix": "AngerNearbyUnits",
        "description": ""
    },
    "CDebugOverlayScriptHelper:FilledRect2D": {
        "body": [
            "FilledRect2D( ${Vector2D_1}, ${Vector2D_2}, ${int_3}, ${int_4}, ${int_5}, ${int_6}, ${float_7} )",
            "-- Draws a screen-space filled 2D rectangle. Coordinates are in pixels."
        ],
        "prefix": "FilledRect2D",
        "description": "Draws a screen-space filled 2D rectangle. Coordinates are in pixels."
    },
    "MODIFIER_PROPERTY_MOVESPEED_BASE_OVERRIDE": {
        "body": [
            "MODIFIER_PROPERTY_MOVESPEED_BASE_OVERRIDE"
        ],
        "prefix": "MODIFIER_PROPERTY_MOVESPEED_BASE_OVERRIDE",
        "description": "(11)  GetModifierMoveSpeedOverride"
    },
    "CDOTA_BaseNPC:IsDominated": {
        "body": [
            "IsDominated(  )",
            "-- "
        ],
        "prefix": "IsDominated",
        "description": ""
    },
    "MODIFIER_PROPERTY_FIXED_NIGHT_VISION": {
        "body": [
            "MODIFIER_PROPERTY_FIXED_NIGHT_VISION"
        ],
        "prefix": "MODIFIER_PROPERTY_FIXED_NIGHT_VISION",
        "description": "(85)  GetFixedNightVision"
    },
    "CBaseEntity:IsAlive": {
        "body": [
            "IsAlive(  )",
            "-- Is this entity alive?"
        ],
        "prefix": "IsAlive",
        "description": "Is this entity alive?"
    },
    "CDOTABaseAbility:GetSharedCooldownName": {
        "body": [
            "GetSharedCooldownName(  )",
            "-- "
        ],
        "prefix": "GetSharedCooldownName",
        "description": ""
    },
    "DOTA_ModifyGold_SharedGold": {
        "body": [
            "DOTA_ModifyGold_SharedGold"
        ],
        "prefix": "DOTA_ModifyGold_SharedGold",
        "description": "(16) "
    },
    "CDOTA_BaseNPC:IsChanneling": {
        "body": [
            "IsChanneling(  )",
            "-- Is this unit currently channeling a spell?"
        ],
        "prefix": "IsChanneling",
        "description": "Is this unit currently channeling a spell?"
    },
    "CDOTA_BaseNPC_Hero:RespawnHero": {
        "body": [
            "RespawnHero( ${bBuyBack}, ${bIsActuallyBeingSpawnedForTheFirstTime}, ${bRespawnPenalty} )",
            "-- Respawn this hero."
        ],
        "prefix": "RespawnHero",
        "description": "Respawn this hero."
    },
    "CDOTABaseGameMode:GetUseCustomHeroLevels": {
        "body": [
            "GetUseCustomHeroLevels(  )",
            "-- Are custom-defined XP values for hero level ups in use?"
        ],
        "prefix": "GetUseCustomHeroLevels",
        "description": "Are custom-defined XP values for hero level ups in use?"
    },
    "CDOTA_BaseNPC:AttackNoEarlierThan": {
        "body": [
            "AttackNoEarlierThan( ${flTime} )",
            "-- "
        ],
        "prefix": "AttackNoEarlierThan",
        "description": ""
    },
    "CDOTA_PlayerResource:GetCustomBuybackCooldown": {
        "body": [
            "GetCustomBuybackCooldown( ${iPlayerID} )",
            "-- "
        ],
        "prefix": "GetCustomBuybackCooldown",
        "description": ""
    },
    "MODIFIER_STATE_NIGHTMARED": {
        "body": [
            "MODIFIER_STATE_NIGHTMARED"
        ],
        "prefix": "MODIFIER_STATE_NIGHTMARED",
        "description": "(11) "
    },
    "ACT_DOTA_NIAN_PIN_END": {
        "body": [
            "ACT_DOTA_NIAN_PIN_END"
        ],
        "prefix": "ACT_DOTA_NIAN_PIN_END",
        "description": "(1657) "
    },
    "CEntityInstance:GetName": {
        "body": [
            "GetName(  )",
            "-- "
        ],
        "prefix": "GetName",
        "description": ""
    },
    "CDOTA_BaseNPC:GetCreationTime": {
        "body": [
            "GetCreationTime(  )",
            "-- "
        ],
        "prefix": "GetCreationTime",
        "description": ""
    },
    "ACT_DOTA_THUNDER_STRIKE": {
        "body": [
            "ACT_DOTA_THUNDER_STRIKE"
        ],
        "prefix": "ACT_DOTA_THUNDER_STRIKE",
        "description": "(1678) "
    },
    "ACT_DOTA_CAGED_CREEP_RAGE": {
        "body": [
            "ACT_DOTA_CAGED_CREEP_RAGE"
        ],
        "prefix": "ACT_DOTA_CAGED_CREEP_RAGE",
        "description": "(1644) "
    },
    "GetWorldMinX": {
        "body": [
            "GetWorldMinX(  )",
            "-- Gets the world's minimum X position."
        ],
        "prefix": "GetWorldMinX",
        "description": "Gets the world's minimum X position."
    },
    "CBaseEntity:GetSoundDuration": {
        "body": [
            "GetSoundDuration( ${soundname}, ${actormodel} )",
            "-- Returns float duration of the sound. Takes soundname and optional actormodelname."
        ],
        "prefix": "GetSoundDuration",
        "description": "Returns float duration of the sound. Takes soundname and optional actormodelname."
    },
    "CDOTA_Modifier_Lua:IsHidden": {
        "body": [
            "IsHidden(  )",
            "-- True/false if this modifier should be displayed on the buff bar."
        ],
        "prefix": "IsHidden",
        "description": "True/false if this modifier should be displayed on the buff bar."
    },
    "CDOTABaseGameMode:SetGoldSoundDisabled": {
        "body": [
            "SetGoldSoundDisabled( ${bDisabled} )",
            "-- Turn the sound when gold is acquired off/on."
        ],
        "prefix": "SetGoldSoundDisabled",
        "description": "Turn the sound when gold is acquired off/on."
    },
    "CBaseEntity:GetRootMoveParent": {
        "body": [
            "GetRootMoveParent(  )",
            "-- If in hierarchy, walks up the hierarchy to find the root parent."
        ],
        "prefix": "GetRootMoveParent",
        "description": "If in hierarchy, walks up the hierarchy to find the root parent."
    },
    "CDOTABaseGameMode:IsBuybackEnabled": {
        "body": [
            "IsBuybackEnabled(  )",
            "-- Enables or disables buyback completely."
        ],
        "prefix": "IsBuybackEnabled",
        "description": "Enables or disables buyback completely."
    },
    "ACT_DOTA_TAUNT_SNIPER": {
        "body": [
            "ACT_DOTA_TAUNT_SNIPER"
        ],
        "prefix": "ACT_DOTA_TAUNT_SNIPER",
        "description": "(1641) "
    },
    "CDOTA_BaseNPC_Hero:IncrementLastHitMultikill": {
        "body": [
            "IncrementLastHitMultikill(  )",
            "-- Value is stored in PlayerResource."
        ],
        "prefix": "IncrementLastHitMultikill",
        "description": "Value is stored in PlayerResource."
    },
    "DOTA_UNIT_TARGET_NONE": {
        "body": [
            "DOTA_UNIT_TARGET_NONE"
        ],
        "prefix": "DOTA_UNIT_TARGET_NONE",
        "description": "(0) "
    },
    "CDebugOverlayScriptHelper:EntityAttachments": {
        "body": [
            "EntityAttachments( ${ehandle_1}, ${float_2}, ${float_3} )",
            "-- Draws the attachments of the entity"
        ],
        "prefix": "EntityAttachments",
        "description": "Draws the attachments of the entity"
    },
    "CDOTA_Ability_Nian_Roar:GetCastCount": {
        "body": [
            "GetCastCount(  )",
            "-- Number of times Nian has used the roar"
        ],
        "prefix": "GetCastCount",
        "description": "Number of times Nian has used the roar"
    },
    "DOTA_MINIMAP_EVENT_ANCIENT_UNDER_ATTACK": {
        "body": [
            "DOTA_MINIMAP_EVENT_ANCIENT_UNDER_ATTACK"
        ],
        "prefix": "DOTA_MINIMAP_EVENT_ANCIENT_UNDER_ATTACK",
        "description": "(2) "
    },
    "SpawnEntityListFromTableSynchronous": {
        "body": [
            "SpawnEntityListFromTableSynchronous( ${handle_1} )",
            "-- Synchronously spawn an entity group from a list of spawn tables."
        ],
        "prefix": "SpawnEntityListFromTableSynchronous",
        "description": "Synchronously spawn an entity group from a list of spawn tables."
    },
    "CancelEntityIOEvents": {
        "body": [
            "CancelEntityIOEvents( ${ehandle_1} )",
            "-- Create all I/O events for a particular entity"
        ],
        "prefix": "CancelEntityIOEvents",
        "description": "Create all I/O events for a particular entity"
    },
    "RotationDelta": {
        "body": [
            "RotationDelta( ${QAngle_1}, ${QAngle_2} )",
            "-- Find the delta between two QAngles."
        ],
        "prefix": "RotationDelta",
        "description": "Find the delta between two QAngles."
    },
    "CDOTA_BaseNPC_Hero:RecordLastHit": {
        "body": [
            "RecordLastHit(  )",
            "-- "
        ],
        "prefix": "RecordLastHit",
        "description": ""
    },
    "CDotaSubquestBase:SetTextReplaceValue": {
        "body": [
            "SetTextReplaceValue( ${valueSlot}, ${value} )",
            "-- Set a subquest value"
        ],
        "prefix": "SetTextReplaceValue",
        "description": "Set a subquest value"
    },
    "DOTA_HEROPICK_STATE_CM_SELECT7": {
        "body": [
            "DOTA_HEROPICK_STATE_CM_SELECT7"
        ],
        "prefix": "DOTA_HEROPICK_STATE_CM_SELECT7",
        "description": "(23) "
    },
    "DOTA_PLAYER_LOADOUT_END": {
        "body": [
            "DOTA_PLAYER_LOADOUT_END"
        ],
        "prefix": "DOTA_PLAYER_LOADOUT_END",
        "description": "(42) "
    },
    "CDOTA_BaseNPC:IsDeniable": {
        "body": [
            "IsDeniable(  )",
            "-- "
        ],
        "prefix": "IsDeniable",
        "description": ""
    },
    "CBaseEntity:GetAngularVelocity": {
        "body": [
            "GetAngularVelocity(  )",
            "-- Get the local angular velocity - returns a vector of pitch,yaw,roll"
        ],
        "prefix": "GetAngularVelocity",
        "description": "Get the local angular velocity - returns a vector of pitch,yaw,roll"
    },
    "CDOTA_Buff:GetRemainingTime": {
        "body": [
            "GetRemainingTime(  )",
            "-- "
        ],
        "prefix": "GetRemainingTime",
        "description": ""
    },
    "CDOTABaseGameMode:GetCustomHeroMaxLevel": {
        "body": [
            "GetCustomHeroMaxLevel(  )",
            "-- Allows definition of the max level heroes can achieve (default is 25)."
        ],
        "prefix": "GetCustomHeroMaxLevel",
        "description": "Allows definition of the max level heroes can achieve (default is 25)."
    },
    "DOTA_ABILITY_BEHAVIOR_AUTOCAST": {
        "body": [
            "DOTA_ABILITY_BEHAVIOR_AUTOCAST"
        ],
        "prefix": "DOTA_ABILITY_BEHAVIOR_AUTOCAST",
        "description": "(4096) "
    },
    "UTIL_MessageTextAll": {
        "body": [
            "UTIL_MessageTextAll( ${string_1}, ${int_2}, ${int_3}, ${int_4}, ${int_5} )",
            "-- Sends colored text to all clients."
        ],
        "prefix": "UTIL_MessageTextAll",
        "description": "Sends colored text to all clients."
    },
    "CDOTA_BaseNPC:Hold": {
        "body": [
            "Hold(  )",
            "-- Hold position."
        ],
        "prefix": "Hold",
        "description": "Hold position."
    },
    "UTIL_ResetMessageText": {
        "body": [
            "UTIL_ResetMessageText( ${int_1} )",
            "-- Clear all message text on one client."
        ],
        "prefix": "UTIL_ResetMessageText",
        "description": "Clear all message text on one client."
    },
    "CEntities:FindByNameWithin": {
        "body": [
            "FindByNameWithin( ${handle_1}, ${string_2}, ${Vector_3}, ${float_4} )",
            "-- Find entities by name within a radius. Pass 'null' to start an iteration, or reference to a previously found entity to continue a search"
        ],
        "prefix": "FindByNameWithin",
        "description": "Find entities by name within a radius. Pass 'null' to start an iteration, or reference to a previously found entity to continue a search"
    },
    "CDOTA_Modifier_Lua_Horizontal_Motion:UpdateHorizontalMotion": {
        "body": [
            "UpdateHorizontalMotion( ${me}, ${dt} )",
            "-- Perform any motion from the given interval on the NPC."
        ],
        "prefix": "UpdateHorizontalMotion",
        "description": "Perform any motion from the given interval on the NPC."
    },
    "CDOTA_PlayerResource:HasSelectedHero": {
        "body": [
            "HasSelectedHero( ${iPlayerID} )",
            "-- "
        ],
        "prefix": "HasSelectedHero",
        "description": ""
    },
    "MODIFIER_EVENT_ON_SPENT_MANA": {
        "body": [
            "MODIFIER_EVENT_ON_SPENT_MANA"
        ],
        "prefix": "MODIFIER_EVENT_ON_SPENT_MANA",
        "description": "(121)  OnSpentMana"
    },
    "SendFrostivusTimeElapsedToGC": {
        "body": [
            "SendFrostivusTimeElapsedToGC(  )",
            "-- "
        ],
        "prefix": "SendFrostivusTimeElapsedToGC",
        "description": ""
    },
    "ACT_DOTA_ROQUELAIRE_LAND": {
        "body": [
            "ACT_DOTA_ROQUELAIRE_LAND"
        ],
        "prefix": "ACT_DOTA_ROQUELAIRE_LAND",
        "description": "(1615) "
    },
    "DOTA_RUNE_DOUBLEDAMAGE": {
        "body": [
            "DOTA_RUNE_DOUBLEDAMAGE"
        ],
        "prefix": "DOTA_RUNE_DOUBLEDAMAGE",
        "description": "(0) "
    },
    "CBodyComponent:SetAngularVelocity": {
        "body": [
            "SetAngularVelocity( ${Vector_1} )",
            "-- "
        ],
        "prefix": "SetAngularVelocity",
        "description": ""
    },
    "UF_FAIL_COURIER": {
        "body": [
            "UF_FAIL_COURIER"
        ],
        "prefix": "UF_FAIL_COURIER",
        "description": "(8) "
    },
    "CDOTA_BaseNPC:GetModelRadius": {
        "body": [
            "GetModelRadius(  )",
            "-- "
        ],
        "prefix": "GetModelRadius",
        "description": ""
    },
    "CDOTABaseGameMode:GetAnnouncerDisabled": {
        "body": [
            "GetAnnouncerDisabled(  )",
            "-- Are in-game announcers disabled?"
        ],
        "prefix": "GetAnnouncerDisabled",
        "description": "Are in-game announcers disabled?"
    },
    "StopSoundEvent": {
        "body": [
            "StopSoundEvent( ${string_1}, ${handle_2} )",
            "-- Stops a sound event with optional delivery"
        ],
        "prefix": "StopSoundEvent",
        "description": "Stops a sound event with optional delivery"
    },
    "CBaseEntity:HasAttribute": {
        "body": [
            "HasAttribute( ${pName} )",
            "-- See if an entity has a particular attribute."
        ],
        "prefix": "HasAttribute",
        "description": "See if an entity has a particular attribute."
    },
    "CDOTA_Item:IsAlertableItem": {
        "body": [
            "IsAlertableItem(  )",
            "-- "
        ],
        "prefix": "IsAlertableItem",
        "description": ""
    },
    "CDOTA_Item_DataDriven:ApplyDataDrivenThinker": {
        "body": [
            "ApplyDataDrivenThinker( ${hCaster}, ${vLocation}, ${pszModifierName}, ${hModifierTable} )",
            "-- Applies a data driven thinker at the location"
        ],
        "prefix": "ApplyDataDrivenThinker",
        "description": "Applies a data driven thinker at the location"
    },
    "DebugDrawCircle": {
        "body": [
            "DebugDrawCircle( ${vOrigin}, ${vRBG}, ${fAlpha}, ${vForward}, ${bZtest}, ${fDuration} )",
            "-- Draws a debug circle Mins and Maxs are vectors in any two opposite corners"
        ],
        "prefix": "DebugDrawCircle",
        "description": "Draw a debug circle (center, vRgb, a, rad, ztest, duration)"
    },
    "CDOTA_PlayerResource:SpendGold": {
        "body": [
            "SpendGold( ${iPlayerID}, ${iCost}, ${iReason} )",
            "-- "
        ],
        "prefix": "SpendGold",
        "description": ""
    },
    "CDOTA_BaseNPC:IsRooted": {
        "body": [
            "IsRooted(  )",
            "-- "
        ],
        "prefix": "IsRooted",
        "description": ""
    },
    "ACT_DOTA_TINKER_REARM3": {
        "body": [
            "ACT_DOTA_TINKER_REARM3"
        ],
        "prefix": "ACT_DOTA_TINKER_REARM3",
        "description": "(1557) "
    },
    "GridNav:DestroyTreesAroundPoint": {
        "body": [
            "DestroyTreesAroundPoint( ${Vector_1}, ${float_2}, ${bool_3} )",
            "-- Destroy all trees in the area(vPosition, flRadius, bFullCollision"
        ],
        "prefix": "DestroyTreesAroundPoint",
        "description": "Destroy all trees in the area(vPosition, flRadius, bFullCollision"
    },
    "MODIFIER_EVENT_ON_ATTACK_ALLIED": {
        "body": [
            "MODIFIER_EVENT_ON_ATTACK_ALLIED"
        ],
        "prefix": "MODIFIER_EVENT_ON_ATTACK_ALLIED",
        "description": "(104)  OnAttackAllied"
    },
    "PlayerInstanceFromIndex": {
        "body": [
            "PlayerInstanceFromIndex( ${int_1} )",
            "-- Get a script instance of a player by index."
        ],
        "prefix": "PlayerInstanceFromIndex",
        "description": "Get a script instance of a player by index."
    },
    "ACT_DOTA_ALCHEMIST_CONCOCTION": {
        "body": [
            "ACT_DOTA_ALCHEMIST_CONCOCTION"
        ],
        "prefix": "ACT_DOTA_ALCHEMIST_CONCOCTION",
        "description": "(1573) "
    },
    "Convars:GetInt": {
        "body": [
            "GetInt( ${sAttr} )",
            "-- GetInt(name) : returns the convar as an int. May return null if no such convar."
        ],
        "prefix": "GetInt",
        "description": "GetInt(name) : returns the convar as an int. May return null if no such convar."
    },
    "CDOTA_Modifier_Lua:GetAuraSearchFlags": {
        "body": [
            "GetAuraSearchFlags(  )",
            "-- Return the unit flags this aura respects when placing buffs."
        ],
        "prefix": "GetAuraSearchFlags",
        "description": "Return the unit flags this aura respects when placing buffs."
    },
    "CDOTA_Ability_Lua:CastFilterResultTarget": {
        "body": [
            "CastFilterResultTarget( ${hTarget} )",
            "-- (HSCRIPT hTarget) Determine whether an issued command on a target is valid."
        ],
        "prefix": "CastFilterResultTarget",
        "description": "(HSCRIPT hTarget) Determine whether an issued command on a target is valid."
    },
    "CBaseEntity:AddEffects": {
        "body": [
            "AddEffects( ${nFlags} )",
            "-- AddEffects( int ): Adds the render effect flag."
        ],
        "prefix": "AddEffects",
        "description": "AddEffects( int ): Adds the render effect flag."
    },
    "DOTA_MINIMAP_EVENT_TEAMMATE_DIED": {
        "body": [
            "DOTA_MINIMAP_EVENT_TEAMMATE_DIED"
        ],
        "prefix": "DOTA_MINIMAP_EVENT_TEAMMATE_DIED",
        "description": "(64) "
    },
    "CDOTA_PlayerResource:GetBroadcasterChannelSlot": {
        "body": [
            "GetBroadcasterChannelSlot( ${iPlayerID} )",
            "-- "
        ],
        "prefix": "GetBroadcasterChannelSlot",
        "description": ""
    },
    "DOTA_HUD_VISIBILITY_TOP_TIMEOFDAY": {
        "body": [
            "DOTA_HUD_VISIBILITY_TOP_TIMEOFDAY"
        ],
        "prefix": "DOTA_HUD_VISIBILITY_TOP_TIMEOFDAY",
        "description": "(0) "
    },
    "CDOTABaseAbility:PlaysDefaultAnimWhenStolen": {
        "body": [
            "PlaysDefaultAnimWhenStolen(  )",
            "-- "
        ],
        "prefix": "PlaysDefaultAnimWhenStolen",
        "description": ""
    },
    "DebugDrawText": {
        "body": [
            "DebugDrawText( ${Vector_1}, ${string_2}, ${bool_3}, ${float_4} )",
            "-- Draw text in 3d (origin, text, bViewCheck, duration)"
        ],
        "prefix": "DebugDrawText",
        "description": "Draw text in 3d (origin, text, bViewCheck, duration)"
    },
    "GridNav:IsBlocked": {
        "body": [
            "IsBlocked( ${Vector_1} )",
            "-- Checks whether the given position is blocked"
        ],
        "prefix": "IsBlocked",
        "description": "Checks whether the given position is blocked"
    },
    "CBaseEntity:SetOrigin": {
        "body": [
            "SetOrigin( ${v} )",
            "-- "
        ],
        "prefix": "SetOrigin",
        "description": ""
    },
    "DOTA_HEROPICK_STATE_CD_BAN5": {
        "body": [
            "DOTA_HEROPICK_STATE_CD_BAN5"
        ],
        "prefix": "DOTA_HEROPICK_STATE_CD_BAN5",
        "description": "(37) "
    },
    "DOTA_ABILITY_BEHAVIOR_CHANNELLED": {
        "body": [
            "DOTA_ABILITY_BEHAVIOR_CHANNELLED"
        ],
        "prefix": "DOTA_ABILITY_BEHAVIOR_CHANNELLED",
        "description": "(128) "
    },
    "MODIFIER_STATE_NO_UNIT_COLLISION": {
        "body": [
            "MODIFIER_STATE_NO_UNIT_COLLISION"
        ],
        "prefix": "MODIFIER_STATE_NO_UNIT_COLLISION",
        "description": "(24) "
    },
    "CDOTA_Ability_DataDriven:ApplyDataDrivenThinker": {
        "body": [
            "ApplyDataDrivenThinker( ${hCaster}, ${vLocation}, ${pszModifierName}, ${hModifierTable} )",
            "-- Applies a data driven thinker at the location"
        ],
        "prefix": "ApplyDataDrivenThinker",
        "description": "Applies a data driven thinker at the location"
    },
    "MODIFIER_PROPERTY_ABSOLUTE_NO_DAMAGE_PURE": {
        "body": [
            "MODIFIER_PROPERTY_ABSOLUTE_NO_DAMAGE_PURE"
        ],
        "prefix": "MODIFIER_PROPERTY_ABSOLUTE_NO_DAMAGE_PURE",
        "description": "(89)  GetAbsoluteNoDamagePure"
    },
    "DOTA_LOADOUT_TYPE_MUSIC": {
        "body": [
            "DOTA_LOADOUT_TYPE_MUSIC"
        ],
        "prefix": "DOTA_LOADOUT_TYPE_MUSIC",
        "description": "(32) "
    },
    "CDOTABaseAbility:NumModifiersUsingAbility": {
        "body": [
            "NumModifiersUsingAbility(  )",
            "-- "
        ],
        "prefix": "NumModifiersUsingAbility",
        "description": ""
    },
    "CNativeOutputs:Init": {
        "body": [
            "Init( ${int_1} )",
            "-- Initialize with number of outputs"
        ],
        "prefix": "Init",
        "description": "Initialize with number of outputs"
    },
    "CalcClosestPointOnEntityOBB": {
        "body": [
            "CalcClosestPointOnEntityOBB( ${handle_1}, ${Vector_2} )",
            "-- Compute the closest point on the OBB of an entity."
        ],
        "prefix": "CalcClosestPointOnEntityOBB",
        "description": "Compute the closest point on the OBB of an entity."
    },
    "DOTA_HUD_VISIBILITY_TOP_SCOREBOARD": {
        "body": [
            "DOTA_HUD_VISIBILITY_TOP_SCOREBOARD"
        ],
        "prefix": "DOTA_HUD_VISIBILITY_TOP_SCOREBOARD",
        "description": "(2) "
    },
    "DOTA_MOTION_CONTROLLER_PRIORITY_MEDIUM": {
        "body": [
            "DOTA_MOTION_CONTROLLER_PRIORITY_MEDIUM"
        ],
        "prefix": "DOTA_MOTION_CONTROLLER_PRIORITY_MEDIUM",
        "description": "(2) "
    },
    "CDOTABaseAbility:OnOwnerDied": {
        "body": [
            "OnOwnerDied(  )",
            "-- "
        ],
        "prefix": "OnOwnerDied",
        "description": ""
    },
    "CDOTA_BaseNPC:GetAttackCapability": {
        "body": [
            "GetAttackCapability(  )",
            "-- "
        ],
        "prefix": "GetAttackCapability",
        "description": ""
    },
    "ACT_DOTA_LIFESTEALER_ASSIMILATE": {
        "body": [
            "ACT_DOTA_LIFESTEALER_ASSIMILATE"
        ],
        "prefix": "ACT_DOTA_LIFESTEALER_ASSIMILATE",
        "description": "(1703) "
    },
    "CDOTA_BaseNPC_Hero:IncrementDeaths": {
        "body": [
            "IncrementDeaths( ${iKillerID} )",
            "-- Value is stored in PlayerResource."
        ],
        "prefix": "IncrementDeaths",
        "description": "Value is stored in PlayerResource."
    },
    "DOTA_HEROPICK_STATE_CM_SELECT6": {
        "body": [
            "DOTA_HEROPICK_STATE_CM_SELECT6"
        ],
        "prefix": "DOTA_HEROPICK_STATE_CM_SELECT6",
        "description": "(22) "
    },
    "UF_FAIL_INVALID_LOCATION": {
        "body": [
            "UF_FAIL_INVALID_LOCATION"
        ],
        "prefix": "UF_FAIL_INVALID_LOCATION",
        "description": "(25) "
    },
    "ACT_DOTA_CAST_CHAOS_METEOR": {
        "body": [
            "ACT_DOTA_CAST_CHAOS_METEOR"
        ],
        "prefix": "ACT_DOTA_CAST_CHAOS_METEOR",
        "description": "(1586) "
    },
    "CMarkupVolumeTagged:HasTag": {
        "body": [
            "HasTag( ${pszTagName} )",
            "-- Does this volume have the given tag."
        ],
        "prefix": "HasTag",
        "description": "Does this volume have the given tag."
    },
    "MODIFIER_PROPERTY_STATS_INTELLECT_BONUS": {
        "body": [
            "MODIFIER_PROPERTY_STATS_INTELLECT_BONUS"
        ],
        "prefix": "MODIFIER_PROPERTY_STATS_INTELLECT_BONUS",
        "description": "(59)  GetModifierBonusStats_Intellect"
    },
    "CDOTA_BaseNPC:Heal": {
        "body": [
            "Heal( ${flAmount}, ${hInflictor} )",
            "-- Heal this unit."
        ],
        "prefix": "Heal",
        "description": "Heal this unit."
    },
    "CDOTA_Item:StacksWithOtherOwners": {
        "body": [
            "StacksWithOtherOwners(  )",
            "-- "
        ],
        "prefix": "StacksWithOtherOwners",
        "description": ""
    },
    "CDOTA_BaseNPC_Hero:ClearLastHitMultikill": {
        "body": [
            "ClearLastHitMultikill(  )",
            "-- Value is stored in PlayerResource."
        ],
        "prefix": "ClearLastHitMultikill",
        "description": "Value is stored in PlayerResource."
    },
    "CBaseEntity:SetContextThink": {
        "body": [
            "SetContextThink( ${pszContextName}, ${hThinkFunc}, ${flInterval} )",
            "-- Set a think function on this entity."
        ],
        "prefix": "SetContextThink",
        "description": "Set a think function on this entity."
    },
    "DOTA_MINIMAP_EVENT_TEAMMATE_TELEPORTING": {
        "body": [
            "DOTA_MINIMAP_EVENT_TEAMMATE_TELEPORTING"
        ],
        "prefix": "DOTA_MINIMAP_EVENT_TEAMMATE_TELEPORTING",
        "description": "(32) "
    },
    "CDOTA_PlayerResource:AddGoldSpentOnSupport": {
        "body": [
            "AddGoldSpentOnSupport( ${iPlayerID}, ${iCost} )",
            "-- "
        ],
        "prefix": "AddGoldSpentOnSupport",
        "description": ""
    },
    "CDOTA_BaseNPC_Hero:GetBaseStrength": {
        "body": [
            "GetBaseStrength(  )",
            "-- "
        ],
        "prefix": "GetBaseStrength",
        "description": ""
    },
    "DOTA_UNIT_TARGET_FLAG_NOT_NIGHTMARED": {
        "body": [
            "DOTA_UNIT_TARGET_FLAG_NOT_NIGHTMARED"
        ],
        "prefix": "DOTA_UNIT_TARGET_FLAG_NOT_NIGHTMARED",
        "description": "(524288) "
    },
    "CDOTA_Modifier_Lua:GetEffectName": {
        "body": [
            "GetEffectName(  )",
            "-- Return the name of the particle system that is created while this modifier is active."
        ],
        "prefix": "GetEffectName",
        "description": "Return the name of the particle system that is created while this modifier is active."
    },
    "MODIFIER_EVENT_ON_ABILITY_END_CHANNEL": {
        "body": [
            "MODIFIER_EVENT_ON_ABILITY_END_CHANNEL"
        ],
        "prefix": "MODIFIER_EVENT_ON_ABILITY_END_CHANNEL",
        "description": "(112)  OnAbilityEndChannel"
    },
    "CDOTA_BaseNPC:IsFrozen": {
        "body": [
            "IsFrozen(  )",
            "-- "
        ],
        "prefix": "IsFrozen",
        "description": ""
    },
    "StartSoundEventReliable": {
        "body": [
            "StartSoundEventReliable( ${string_1}, ${handle_2} )",
            "-- Start a sound event with reliable delivery"
        ],
        "prefix": "StartSoundEventReliable",
        "description": "Start a sound event with reliable delivery"
    },
    "CDOTA_MapTree:IsStanding": {
        "body": [
            "IsStanding(  )",
            "-- Returns true if the tree is standing, false if it has been cut down"
        ],
        "prefix": "IsStanding",
        "description": "Returns true if the tree is standing, false if it has been cut down"
    },
    "CScriptHeroList:GetHeroCount": {
        "body": [
            "GetHeroCount(  )",
            "-- Returns the number of heroes in the world"
        ],
        "prefix": "GetHeroCount",
        "description": "Returns the number of heroes in the world"
    },
    "DOTA_HEROPICK_STATE_CD_SELECT5": {
        "body": [
            "DOTA_HEROPICK_STATE_CD_SELECT5"
        ],
        "prefix": "DOTA_HEROPICK_STATE_CD_SELECT5",
        "description": "(43) "
    },
    "InitLogFile": {
        "body": [
            "InitLogFile( ${string_1}, ${string_2} )",
            "-- If the given file doesn't exist, creates it with the given contents; does nothing if it exists"
        ],
        "prefix": "InitLogFile",
        "description": "If the given file doesn't exist, creates it with the given contents; does nothing if it exists"
    },
    "IsValidEntity": {
        "body": [
            "IsValidEntity( ${handle_1} )",
            "-- Checks to see if the given hScript is a valid entity"
        ],
        "prefix": "IsValidEntity",
        "description": "Checks to see if the given hScript is a valid entity"
    },
    "CDOTABaseGameMode:SetTrackingProjectileFilter": {
        "body": [
            "SetTrackingProjectileFilter( ${hFunction}, ${hContext} )",
            "-- Set a filter function to control when tracking projectiles are launched. (Modify the table and Return true to use new values, return false to cancel the event)"
        ],
        "prefix": "SetTrackingProjectileFilter",
        "description": "Set a filter function to control when tracking projectiles are launched. (Modify the table and Return true to use new values, return false to cancel the event)"
    },
    "DOTA_GAMERULES_STATE_HERO_SELECTION": {
        "body": [
            "DOTA_GAMERULES_STATE_HERO_SELECTION"
        ],
        "prefix": "DOTA_GAMERULES_STATE_HERO_SELECTION",
        "description": "(3) "
    },
    "CDOTA_PlayerResource:AddAegisPickup": {
        "body": [
            "AddAegisPickup( ${iPlayerID} )",
            "-- "
        ],
        "prefix": "AddAegisPickup",
        "description": ""
    },
    "CDOTA_BaseNPC:IsHexed": {
        "body": [
            "IsHexed(  )",
            "-- "
        ],
        "prefix": "IsHexed",
        "description": ""
    },
    "UF_FAIL_OUT_OF_WORLD": {
        "body": [
            "UF_FAIL_OUT_OF_WORLD"
        ],
        "prefix": "UF_FAIL_OUT_OF_WORLD",
        "description": "(27) "
    },
    "CBasePlayer:IsNoclipping": {
        "body": [
            "IsNoclipping(  )",
            "-- Returns true if the player is in noclip mode."
        ],
        "prefix": "IsNoclipping",
        "description": "Returns true if the player is in noclip mode."
    },
    "CDOTABaseAbility:GetIntrinsicModifierName": {
        "body": [
            "GetIntrinsicModifierName(  )",
            "-- "
        ],
        "prefix": "GetIntrinsicModifierName",
        "description": ""
    },
    "CDOTA_Item_Lua:GetBehavior": {
        "body": [
            "GetBehavior(  )",
            "-- Return cast behavior type of this ability."
        ],
        "prefix": "GetBehavior",
        "description": "Return cast behavior type of this ability."
    },
    "CDebugOverlayScriptHelper:EntityText": {
        "body": [
            "EntityText( ${ehandle_1}, ${int_2}, ${string_3}, ${int_4}, ${int_5}, ${int_6}, ${int_7}, ${float_8} )",
            "-- Draws text on an entity"
        ],
        "prefix": "EntityText",
        "description": "Draws text on an entity"
    },
    "GridNav:FindPathLength": {
        "body": [
            "FindPathLength( ${Vector_1}, ${Vector_2} )",
            "-- Find a path between the two points an return the length of the path. If there is not a path between the points the returned value will be -1. float (vStart, vEnd )"
        ],
        "prefix": "FindPathLength",
        "description": "Find a path between the two points an return the length of the path. If there is not a path between the points the returned value will be -1. float (vStart, vEnd )"
    },
    "MODIFIER_PROPERTY_PREATTACK_CRITICALSTRIKE": {
        "body": [
            "MODIFIER_PROPERTY_PREATTACK_CRITICALSTRIKE"
        ],
        "prefix": "MODIFIER_PROPERTY_PREATTACK_CRITICALSTRIKE",
        "description": "(70)  GetModifierPreAttack_CriticalStrike"
    },
    "DOTA_ABILITY_BEHAVIOR_ATTACK": {
        "body": [
            "DOTA_ABILITY_BEHAVIOR_ATTACK"
        ],
        "prefix": "DOTA_ABILITY_BEHAVIOR_ATTACK",
        "description": "(131072) "
    },
    "CDOTA_BaseNPC_Hero:ClearLastHitStreak": {
        "body": [
            "ClearLastHitStreak(  )",
            "-- Value is stored in PlayerResource."
        ],
        "prefix": "ClearLastHitStreak",
        "description": "Value is stored in PlayerResource."
    },
    "CBaseEntity:GetOwner": {
        "body": [
            "GetOwner(  )",
            "-- Gets this entity's owner"
        ],
        "prefix": "GetOwner",
        "description": "Gets this entity's owner"
    },
    "CDOTABaseAbility:CastAbility": {
        "body": [
            "CastAbility(  )",
            "-- "
        ],
        "prefix": "CastAbility",
        "description": ""
    },
    "CDOTA_BaseNPC:HasMovementCapability": {
        "body": [
            "HasMovementCapability(  )",
            "-- "
        ],
        "prefix": "HasMovementCapability",
        "description": ""
    },
    "CDOTA_Unit_Courier:UpgradeToFlyingCourier": {
        "body": [
            "UpgradeToFlyingCourier(  )",
            "-- Upgrade to a flying courier"
        ],
        "prefix": "UpgradeToFlyingCourier",
        "description": "Upgrade to a flying courier"
    },
    "GetFrostyPointsForRound": {
        "body": [
            "GetFrostyPointsForRound( ${int_1}, ${int_2}, ${int_3} )",
            "-- "
        ],
        "prefix": "GetFrostyPointsForRound",
        "description": ""
    },
    "MODIFIER_PROPERTY_DISABLE_AUTOATTACK": {
        "body": [
            "MODIFIER_PROPERTY_DISABLE_AUTOATTACK"
        ],
        "prefix": "MODIFIER_PROPERTY_DISABLE_AUTOATTACK",
        "description": "(79)  GetDisableAutoAttack"
    },
    "CDOTA_PlayerResource:IsFakeClient": {
        "body": [
            "IsFakeClient( ${iPlayerID} )",
            "-- "
        ],
        "prefix": "IsFakeClient",
        "description": ""
    },
    "CDOTA_BaseNPC:CanSellItems": {
        "body": [
            "CanSellItems(  )",
            "-- Query if this unit can sell items."
        ],
        "prefix": "CanSellItems",
        "description": "Query if this unit can sell items."
    },
    "RandomVector": {
        "body": [
            "RandomVector( ${float_1} )",
            "-- Get a random 2D vector of the given length."
        ],
        "prefix": "RandomVector",
        "description": "Get a random 2D vector of the given length."
    },
    "CDebugOverlayScriptHelper:PopDebugOverlayScope": {
        "body": [
            "PopDebugOverlayScope(  )",
            "-- Pops the identifier used to group overlays. Overlays marked with this identifier can be deleted in a big batch."
        ],
        "prefix": "PopDebugOverlayScope",
        "description": "Pops the identifier used to group overlays. Overlays marked with this identifier can be deleted in a big batch."
    },
    "CEntities:FindByTarget": {
        "body": [
            "FindByTarget( ${handle_1}, ${string_2} )",
            "-- Find entities by targetname. Pass 'null' to start an iteration, or reference to a previously found entity to continue a search"
        ],
        "prefix": "FindByTarget",
        "description": "Find entities by targetname. Pass 'null' to start an iteration, or reference to a previously found entity to continue a search"
    },
    "ACT_DOTA_GREET": {
        "body": [
            "ACT_DOTA_GREET"
        ],
        "prefix": "ACT_DOTA_GREET",
        "description": "(1690) "
    },
    "MODIFIER_PROPERTY_MOVESPEED_BONUS_PERCENTAGE": {
        "body": [
            "MODIFIER_PROPERTY_MOVESPEED_BONUS_PERCENTAGE"
        ],
        "prefix": "MODIFIER_PROPERTY_MOVESPEED_BONUS_PERCENTAGE",
        "description": "(12)  GetModifierMoveSpeedBonus_Percentage"
    },
    "CDotaQuest:AddSubquest": {
        "body": [
            "AddSubquest( ${hSubquest} )",
            "-- Add a subquest to this quest"
        ],
        "prefix": "AddSubquest",
        "description": "Add a subquest to this quest"
    },
    "CBodyComponent:SetAnimation": {
        "body": [
            "SetAnimation( ${string_1} )",
            "-- Pass string for the animation to play on this model"
        ],
        "prefix": "SetAnimation",
        "description": "Pass string for the animation to play on this model"
    },
    "UF_FAIL_DOMINATED": {
        "body": [
            "UF_FAIL_DOMINATED"
        ],
        "prefix": "UF_FAIL_DOMINATED",
        "description": "(13) "
    },
    "ACT_DOTA_CAPTURE": {
        "body": [
            "ACT_DOTA_CAPTURE"
        ],
        "prefix": "ACT_DOTA_CAPTURE",
        "description": "(1533) "
    },
    "DOTA_MINIMAP_EVENT_TUTORIAL_TASK_ACTIVE": {
        "body": [
            "DOTA_MINIMAP_EVENT_TUTORIAL_TASK_ACTIVE"
        ],
        "prefix": "DOTA_MINIMAP_EVENT_TUTORIAL_TASK_ACTIVE",
        "description": "(128) "
    },
    "ACT_DOTA_TELEPORT_COOP_EXIT": {
        "body": [
            "ACT_DOTA_TELEPORT_COOP_EXIT"
        ],
        "prefix": "ACT_DOTA_TELEPORT_COOP_EXIT",
        "description": "(1694) "
    },
    "CDOTA_Item_Lua:OnInventoryContentsChanged": {
        "body": [
            "OnInventoryContentsChanged(  )",
            "-- Caster inventory changed."
        ],
        "prefix": "OnInventoryContentsChanged",
        "description": "Caster inventory changed."
    },
    "CBaseCombatCharacter:ShootPosition": {
        "body": [
            "ShootPosition( ${nHand} )",
            "-- Returns the shoot position eyes (or hand in VR)."
        ],
        "prefix": "ShootPosition",
        "description": "Returns the shoot position eyes (or hand in VR)."
    },
    "CDOTA_BaseNPC:IsRangedAttacker": {
        "body": [
            "IsRangedAttacker(  )",
            "-- Is this unit a ranged attacker?"
        ],
        "prefix": "IsRangedAttacker",
        "description": "Is this unit a ranged attacker?"
    },
    "MODIFIER_PROPERTY_BASEDAMAGEOUTGOING_PERCENTAGE_UNIQUE": {
        "body": [
            "MODIFIER_PROPERTY_BASEDAMAGEOUTGOING_PERCENTAGE_UNIQUE"
        ],
        "prefix": "MODIFIER_PROPERTY_BASEDAMAGEOUTGOING_PERCENTAGE_UNIQUE",
        "description": "(29)  GetModifierBaseDamageOutgoing_PercentageUnique"
    },
    "ProjectileManager:GetLinearProjectileVelocity": {
        "body": [
            "GetLinearProjectileVelocity( ${int_1} )",
            "-- Returns a vector representing the current velocity of the projectile."
        ],
        "prefix": "GetLinearProjectileVelocity",
        "description": "Returns a vector representing the current velocity of the projectile."
    },
    "CDOTA_Item_Lua:OnChannelThink": {
        "body": [
            "OnChannelThink( ${flInterval} )",
            "-- (float flInterval) Channeling is taking place."
        ],
        "prefix": "OnChannelThink",
        "description": "(float flInterval) Channeling is taking place."
    },
    "CDOTA_BaseNPC:SetBaseAttackTime": {
        "body": [
            "SetBaseAttackTime( ${flBaseAttackTime} )",
            "-- "
        ],
        "prefix": "SetBaseAttackTime",
        "description": ""
    },
    "CDOTA_BaseNPC_Hero:GetLastHits": {
        "body": [
            "GetLastHits(  )",
            "-- Value is stored in PlayerResource."
        ],
        "prefix": "GetLastHits",
        "description": "Value is stored in PlayerResource."
    },
    "QUEST_TEXT_REPLACE_VALUE_ROUND": {
        "body": [
            "QUEST_TEXT_REPLACE_VALUE_ROUND"
        ],
        "prefix": "QUEST_TEXT_REPLACE_VALUE_ROUND",
        "description": "(2) "
    },
    "DOTA_TEAM_NEUTRALS": {
        "body": [
            "DOTA_TEAM_NEUTRALS"
        ],
        "prefix": "DOTA_TEAM_NEUTRALS",
        "description": "(4) "
    },
    "CDOTABaseAbility:ProcsMagicStick": {
        "body": [
            "ProcsMagicStick(  )",
            "-- "
        ],
        "prefix": "ProcsMagicStick",
        "description": ""
    },
    "CDOTA_Modifier_Lua:IsAuraActiveOnDeath": {
        "body": [
            "IsAuraActiveOnDeath(  )",
            "-- True/false if this aura provides buffs when the parent is dead."
        ],
        "prefix": "IsAuraActiveOnDeath",
        "description": "True/false if this aura provides buffs when the parent is dead."
    },
    "CDOTABaseGameMode:GetCameraDistanceOverride": {
        "body": [
            "GetCameraDistanceOverride(  )",
            "-- Set a different camera distance; dota default is 1134."
        ],
        "prefix": "GetCameraDistanceOverride",
        "description": "Set a different camera distance; dota default is 1134."
    },
    "CDOTA_Ability_Lua:OnHeroLevelUp": {
        "body": [
            "OnHeroLevelUp(  )",
            "-- Caster gained a level."
        ],
        "prefix": "OnHeroLevelUp",
        "description": "Caster gained a level."
    },
    "ACT_DOTA_IDLE_IMPATIENT_SWORD_TAP": {
        "body": [
            "ACT_DOTA_IDLE_IMPATIENT_SWORD_TAP"
        ],
        "prefix": "ACT_DOTA_IDLE_IMPATIENT_SWORD_TAP",
        "description": "(1648) "
    },
    "CDOTA_PlayerResource:GetCreepDamageTaken": {
        "body": [
            "GetCreepDamageTaken( ${iPlayerID}, ${bTotal} )",
            "-- "
        ],
        "prefix": "GetCreepDamageTaken",
        "description": ""
    },
    "CDOTA_BaseNPC_Hero:GetGoldBounty": {
        "body": [
            "GetGoldBounty(  )",
            "-- "
        ],
        "prefix": "GetGoldBounty",
        "description": ""
    },
    "CDOTA_BaseNPC_Hero:SetBotDifficulty": {
        "body": [
            "SetBotDifficulty( ${nDifficulty} )",
            "-- "
        ],
        "prefix": "SetBotDifficulty",
        "description": ""
    },
    "CDOTA_PlayerResource:GetEventPremiumPointsGranted": {
        "body": [
            "GetEventPremiumPointsGranted( ${iPlayerID} )",
            "-- "
        ],
        "prefix": "GetEventPremiumPointsGranted",
        "description": ""
    },
    "ACT_DOTA_CHANNEL_END_ABILITY_3": {
        "body": [
            "ACT_DOTA_CHANNEL_END_ABILITY_3"
        ],
        "prefix": "ACT_DOTA_CHANNEL_END_ABILITY_3",
        "description": "(1528) "
    },
    "CBaseEntity:GetContext": {
        "body": [
            "GetContext( ${name} )",
            "-- GetContext( name ): looks up a context and returns it if available. May return string, float, or null (if the context isn't found)."
        ],
        "prefix": "GetContext",
        "description": "GetContext( name ): looks up a context and returns it if available. May return string, float, or null (if the context isn't found)."
    },
    "CDOTA_PlayerResource:GetKills": {
        "body": [
            "GetKills( ${iPlayerID} )",
            "-- "
        ],
        "prefix": "GetKills",
        "description": ""
    },
    "CEntities:FindAllByClassname": {
        "body": [
            "FindAllByClassname( ${string_1} )",
            "-- Finds all entities by class name. Returns an array containing all the found entities."
        ],
        "prefix": "FindAllByClassname",
        "description": "Finds all entities by class name. Returns an array containing all the found entities."
    },
    "ACT_DOTA_IDLE": {
        "body": [
            "ACT_DOTA_IDLE"
        ],
        "prefix": "ACT_DOTA_IDLE",
        "description": "(1500) "
    },
    "MODIFIER_ATTRIBUTE_IGNORE_INVULNERABLE": {
        "body": [
            "MODIFIER_ATTRIBUTE_IGNORE_INVULNERABLE"
        ],
        "prefix": "MODIFIER_ATTRIBUTE_IGNORE_INVULNERABLE",
        "description": "(4) "
    },
    "CEntities:FindByName": {
        "body": [
            "FindByName( ${handle_1}, ${string_2} )",
            "-- Find entities by name. Pass 'null' to start an iteration, or reference to a previously found entity to continue a search"
        ],
        "prefix": "FindByName",
        "description": "Find entities by name. Pass 'null' to start an iteration, or reference to a previously found entity to continue a search"
    },
    "CDOTA_BaseNPC_Hero:ClearStreak": {
        "body": [
            "ClearStreak(  )",
            "-- Value is stored in PlayerResource."
        ],
        "prefix": "ClearStreak",
        "description": "Value is stored in PlayerResource."
    },
    "SetQuestName": {
        "body": [
            "SetQuestName( ${string_1} )",
            "-- Set the current quest name."
        ],
        "prefix": "SetQuestName",
        "description": "Set the current quest name."
    },
    "ACT_DOTA_GREEVIL_HOOK_END": {
        "body": [
            "ACT_DOTA_GREEVIL_HOOK_END"
        ],
        "prefix": "ACT_DOTA_GREEVIL_HOOK_END",
        "description": "(1620) "
    },
    "CDOTA_Item:SetStacksWithOtherOwners": {
        "body": [
            "SetStacksWithOtherOwners( ${bStacksWithOtherOwners} )",
            "-- "
        ],
        "prefix": "SetStacksWithOtherOwners",
        "description": ""
    },
    "DOTA_UNIT_TARGET_FLAG_NOT_SUMMONED": {
        "body": [
            "DOTA_UNIT_TARGET_FLAG_NOT_SUMMONED"
        ],
        "prefix": "DOTA_UNIT_TARGET_FLAG_NOT_SUMMONED",
        "description": "(4096) "
    },
    "MODIFIER_PROPERTY_FIXED_DAY_VISION": {
        "body": [
            "MODIFIER_PROPERTY_FIXED_DAY_VISION"
        ],
        "prefix": "MODIFIER_PROPERTY_FIXED_DAY_VISION",
        "description": "(84)  GetFixedDayVision"
    },
    "ABILITY_CANNOT_BE_UPGRADED_NOT_UPGRADABLE": {
        "body": [
            "ABILITY_CANNOT_BE_UPGRADED_NOT_UPGRADABLE"
        ],
        "prefix": "ABILITY_CANNOT_BE_UPGRADED_NOT_UPGRADABLE",
        "description": "(1) "
    },
    "MODIFIER_PROPERTY_ATTACKSPEED_BONUS_CONSTANT_POWER_TREADS": {
        "body": [
            "MODIFIER_PROPERTY_ATTACKSPEED_BONUS_CONSTANT_POWER_TREADS"
        ],
        "prefix": "MODIFIER_PROPERTY_ATTACKSPEED_BONUS_CONSTANT_POWER_TREADS",
        "description": "(20)  GetModifierAttackSpeedBonus_Constant_PowerTreads"
    },
    "CDOTABaseGameMode:SetModifierGainedFilter": {
        "body": [
            "SetModifierGainedFilter( ${hFunction}, ${hContext} )",
            "-- Set a filter function to control modifiers that are gained, return false to destroy modifier."
        ],
        "prefix": "SetModifierGainedFilter",
        "description": "Set a filter function to control modifiers that are gained, return false to destroy modifier."
    },
    "QUEST_TEXT_REPLACE_VALUE_REWARD": {
        "body": [
            "QUEST_TEXT_REPLACE_VALUE_REWARD"
        ],
        "prefix": "QUEST_TEXT_REPLACE_VALUE_REWARD",
        "description": "(3) "
    },
    "CEntityInstance:GetPublicScriptScope": {
        "body": [
            "GetPublicScriptScope(  )",
            "-- Retrieve the public script-side data associated with an entity"
        ],
        "prefix": "GetPublicScriptScope",
        "description": "Retrieve the public script-side data associated with an entity"
    },
    "StartSoundEventFromPositionReliable": {
        "body": [
            "StartSoundEventFromPositionReliable( ${string_1}, ${Vector_2} )",
            "-- Start a sound event from position with reliable delivery"
        ],
        "prefix": "StartSoundEventFromPositionReliable",
        "description": "Start a sound event from position with reliable delivery"
    },
    "CDOTABaseAbility:GetChannelStartTime": {
        "body": [
            "GetChannelStartTime(  )",
            "-- "
        ],
        "prefix": "GetChannelStartTime",
        "description": ""
    },
    "CDOTA_Ability_Lua:ProcsMagicStick": {
        "body": [
            "ProcsMagicStick(  )",
            "-- Returns true if this ability will generate magic stick charges for nearby enemies."
        ],
        "prefix": "ProcsMagicStick",
        "description": "Returns true if this ability will generate magic stick charges for nearby enemies."
    },
    "CCustomNetTableManager:GetTableValue": {
        "body": [
            "GetTableValue( ${string_1}, ${string_2} )",
            "-- ( string TableName, string KeyName )"
        ],
        "prefix": "GetTableValue",
        "description": "( string TableName, string KeyName )"
    },
    "CDOTA_BaseNPC:UnitCanRespawn": {
        "body": [
            "UnitCanRespawn(  )",
            "-- "
        ],
        "prefix": "UnitCanRespawn",
        "description": ""
    },
    "MODIFIER_PROPERTY_BASEDAMAGEOUTGOING_PERCENTAGE": {
        "body": [
            "MODIFIER_PROPERTY_BASEDAMAGEOUTGOING_PERCENTAGE"
        ],
        "prefix": "MODIFIER_PROPERTY_BASEDAMAGEOUTGOING_PERCENTAGE",
        "description": "(28)  GetModifierBaseDamageOutgoing_Percentage"
    },
    "CDOTA_PlayerResource:GetReliableGold": {
        "body": [
            "GetReliableGold( ${iPlayerID} )",
            "-- "
        ],
        "prefix": "GetReliableGold",
        "description": ""
    },
    "DOTA_MOTION_CONTROLLER_PRIORITY_HIGH": {
        "body": [
            "DOTA_MOTION_CONTROLLER_PRIORITY_HIGH"
        ],
        "prefix": "DOTA_MOTION_CONTROLLER_PRIORITY_HIGH",
        "description": "(3) "
    },
    "CScriptKeyValues:GetValue": {
        "body": [
            "GetValue( ${string_1} )",
            "-- Reads a spawn key"
        ],
        "prefix": "GetValue",
        "description": "Reads a spawn key"
    },
    "ACT_DOTA_LIFESTEALER_INFEST_END": {
        "body": [
            "ACT_DOTA_LIFESTEALER_INFEST_END"
        ],
        "prefix": "ACT_DOTA_LIFESTEALER_INFEST_END",
        "description": "(1577) "
    },
    "CDOTA_BaseNPC:IsAttackingEntity": {
        "body": [
            "IsAttackingEntity( ${hEntity} )",
            "-- "
        ],
        "prefix": "IsAttackingEntity",
        "description": ""
    },
    "CDOTA_Item:IsPurchasable": {
        "body": [
            "IsPurchasable(  )",
            "-- "
        ],
        "prefix": "IsPurchasable",
        "description": ""
    },
    "UnitFilter": {
        "body": [
            "UnitFilter( ${handle_1}, ${int_2}, ${int_3}, ${int_4}, ${int_5} )",
            "-- Check if a unit passes a set of filters. (hNPC, nTargetTeam, nTargetType, nTargetFlags, nTeam"
        ],
        "prefix": "UnitFilter",
        "description": "Check if a unit passes a set of filters. (hNPC, nTargetTeam, nTargetType, nTargetFlags, nTeam"
    },
    "CDOTA_BaseNPC:GetBaseDamageMin": {
        "body": [
            "GetBaseDamageMin(  )",
            "-- Get the minimum attack damage of this unit."
        ],
        "prefix": "GetBaseDamageMin",
        "description": "Get the minimum attack damage of this unit."
    },
    "GridNav:GridPosToWorldCenterX": {
        "body": [
            "GridPosToWorldCenterX( ${int_1} )",
            "-- Get the X position of the center of a given X index"
        ],
        "prefix": "GridPosToWorldCenterX",
        "description": "Get the X position of the center of a given X index"
    },
    "GridNav:IsNearbyTree": {
        "body": [
            "IsNearbyTree( ${Vector_1}, ${float_2}, ${bool_3} )",
            "-- (position, radius, checkFullTreeRadius?) Checks whether there are any trees overlapping the given point"
        ],
        "prefix": "IsNearbyTree",
        "description": "(position, radius, checkFullTreeRadius?) Checks whether there are any trees overlapping the given point"
    },
    "ACT_DOTA_WHEEL_LAYER": {
        "body": [
            "ACT_DOTA_WHEEL_LAYER"
        ],
        "prefix": "ACT_DOTA_WHEEL_LAYER",
        "description": "(1571) "
    },
    "DOTA_UNIT_TARGET_FLAG_INVULNERABLE": {
        "body": [
            "DOTA_UNIT_TARGET_FLAG_INVULNERABLE"
        ],
        "prefix": "DOTA_UNIT_TARGET_FLAG_INVULNERABLE",
        "description": "(64) "
    },
    "CDOTABaseGameMode:ClearModifyGoldFilter": {
        "body": [
            "ClearModifyGoldFilter(  )",
            "-- Clear the script filter that controls how hero gold is modified."
        ],
        "prefix": "ClearModifyGoldFilter",
        "description": "Clear the script filter that controls how hero gold is modified."
    },
    "CDOTA_Unit_Nian:GetTail": {
        "body": [
            "GetTail(  )",
            "-- Is the Nian's tail broken?"
        ],
        "prefix": "GetTail",
        "description": "Is the Nian's tail broken?"
    },
    "ACT_DOTA_CAST_BURROW_END": {
        "body": [
            "ACT_DOTA_CAST_BURROW_END"
        ],
        "prefix": "ACT_DOTA_CAST_BURROW_END",
        "description": "(1702) "
    },
    "DOTA_MAX_PLAYERS": {
        "body": [
            "DOTA_MAX_PLAYERS"
        ],
        "prefix": "DOTA_MAX_PLAYERS",
        "description": "(64)  Max number of players connected to the server including spectators."
    },
    "SetOpvarFloatPlayer": {
        "body": [
            "SetOpvarFloatPlayer( ${string_1}, ${string_2}, ${string_3}, ${float_4}, ${handle_5} )",
            "-- Sets an opvar value for a single player"
        ],
        "prefix": "SetOpvarFloatPlayer",
        "description": "Sets an opvar value for a single player"
    },
    "ACT_DOTA_TELEPORT_COOP_WAIT": {
        "body": [
            "ACT_DOTA_TELEPORT_COOP_WAIT"
        ],
        "prefix": "ACT_DOTA_TELEPORT_COOP_WAIT",
        "description": "(1692) "
    },
    "CDOTA_BaseNPC:SellItem": {
        "body": [
            "SellItem( ${hItem} )",
            "-- Sells the passed item in this unit's inventory."
        ],
        "prefix": "SellItem",
        "description": "Sells the passed item in this unit's inventory."
    },
    "DOTA_MOTION_CONTROLLER_PRIORITY_LOW": {
        "body": [
            "DOTA_MOTION_CONTROLLER_PRIORITY_LOW"
        ],
        "prefix": "DOTA_MOTION_CONTROLLER_PRIORITY_LOW",
        "description": "(1) "
    },
    "CDOTA_BaseNPC_Hero:GetTogglableWearable": {
        "body": [
            "GetTogglableWearable( ${nSlotType} )",
            "-- Get wearable entity in slot (slot)"
        ],
        "prefix": "GetTogglableWearable",
        "description": "Get wearable entity in slot (slot)"
    },
    "CBaseEntity:Attribute_SetFloatValue": {
        "body": [
            "Attribute_SetFloatValue( ${pName}, ${flValue} )",
            "-- Set float value for an entity attribute."
        ],
        "prefix": "Attribute_SetFloatValue",
        "description": "Set float value for an entity attribute."
    },
    "CDOTA_PlayerResource:GetTowerKills": {
        "body": [
            "GetTowerKills( ${iPlayerID} )",
            "-- "
        ],
        "prefix": "GetTowerKills",
        "description": ""
    },
    "DOTA_LOADOUT_TYPE_ABILITY3": {
        "body": [
            "DOTA_LOADOUT_TYPE_ABILITY3"
        ],
        "prefix": "DOTA_LOADOUT_TYPE_ABILITY3",
        "description": "(24) "
    },
    "CDOTABaseAbility:SpeakAbilityConcept": {
        "body": [
            "SpeakAbilityConcept( ${iConcept} )",
            "-- "
        ],
        "prefix": "SpeakAbilityConcept",
        "description": ""
    },
    "DOTA_UNIT_TARGET_TEAM_ENEMY": {
        "body": [
            "DOTA_UNIT_TARGET_TEAM_ENEMY"
        ],
        "prefix": "DOTA_UNIT_TARGET_TEAM_ENEMY",
        "description": "(2) "
    },
    "CDOTA_BaseNPC:AddItem": {
        "body": [
            "AddItem( ${hItem} )",
            "-- Add an item to this unit's inventory."
        ],
        "prefix": "AddItem",
        "description": "Add an item to this unit's inventory."
    },
    "CDOTA_Modifier_Lua_Motion_Both:UpdateHorizontalMotion": {
        "body": [
            "UpdateHorizontalMotion( ${me}, ${dt} )",
            "-- Perform any motion from the given interval on the NPC."
        ],
        "prefix": "UpdateHorizontalMotion",
        "description": "Perform any motion from the given interval on the NPC."
    },
    "ACT_DOTA_CHANNEL_ABILITY_6": {
        "body": [
            "ACT_DOTA_CHANNEL_ABILITY_6"
        ],
        "prefix": "ACT_DOTA_CHANNEL_ABILITY_6",
        "description": "(1525) "
    },
    "CDOTA_BaseNPC:GetPhysicalArmorValue": {
        "body": [
            "GetPhysicalArmorValue(  )",
            "-- Returns current physical armor value."
        ],
        "prefix": "GetPhysicalArmorValue",
        "description": "Returns current physical armor value."
    },
    "CDOTA_PlayerResource:ReplaceHeroWith": {
        "body": [
            "ReplaceHeroWith( ${iPlayerID}, ${pszHeroClass}, ${nGold}, ${nXP} )",
            "-- (playerID, heroClassName, gold, XP) - replaces the player's hero with a new one of the specified class, gold and XP"
        ],
        "prefix": "ReplaceHeroWith",
        "description": "(playerID, heroClassName, gold, XP) - replaces the player's hero with a new one of the specified class, gold and XP"
    },
    "CDOTABaseAbility:GetSpecialValueFor": {
        "body": [
            "GetSpecialValueFor( ${szName} )",
            "-- Gets a value from this ability's special value block for its current level."
        ],
        "prefix": "GetSpecialValueFor",
        "description": "Gets a value from this ability's special value block for its current level."
    },
    "CDOTA_Ability_Lua:OnChannelFinish": {
        "body": [
            "OnChannelFinish( ${bInterrupted} )",
            "-- (bool bInterrupted) Channel finished."
        ],
        "prefix": "OnChannelFinish",
        "description": "(bool bInterrupted) Channel finished."
    },
    "DOTA_UNIT_TARGET_FLAG_PLAYER_CONTROLLED": {
        "body": [
            "DOTA_UNIT_TARGET_FLAG_PLAYER_CONTROLLED"
        ],
        "prefix": "DOTA_UNIT_TARGET_FLAG_PLAYER_CONTROLLED",
        "description": "(1024) "
    },
    "CDOTA_BaseNPC:IsSummoned": {
        "body": [
            "IsSummoned(  )",
            "-- Is this unit summoned?"
        ],
        "prefix": "IsSummoned",
        "description": "Is this unit summoned?"
    },
    "rr_GetResponseTargets": {
        "body": [
            "rr_GetResponseTargets(  )",
            "-- Retrieve a table of all available expresser targets, in the form { name : handle, name: handle }."
        ],
        "prefix": "rr_GetResponseTargets",
        "description": "Retrieve a table of all available expresser targets, in the form { name : handle, name: handle }."
    },
    "MODIFIER_STATE_NO_HEALTH_BAR": {
        "body": [
            "MODIFIER_STATE_NO_HEALTH_BAR"
        ],
        "prefix": "MODIFIER_STATE_NO_HEALTH_BAR",
        "description": "(22) "
    },
    "MODIFIER_PROPERTY_TOTALDAMAGEOUTGOING_PERCENTAGE": {
        "body": [
            "MODIFIER_PROPERTY_TOTALDAMAGEOUTGOING_PERCENTAGE"
        ],
        "prefix": "MODIFIER_PROPERTY_TOTALDAMAGEOUTGOING_PERCENTAGE",
        "description": "(27)  GetModifierTotalDamageOutgoing_Percentage"
    },
    "Convars:SetStr": {
        "body": [
            "SetStr( ${string_1}, ${string_2} )",
            "-- SetStr(name, val) : sets the value of the convar to the string."
        ],
        "prefix": "SetStr",
        "description": "SetStr(name, val) : sets the value of the convar to the string."
    },
    "DOTA_ABILITY_LAST_BEHAVIOR": {
        "body": [
            "DOTA_ABILITY_LAST_BEHAVIOR"
        ],
        "prefix": "DOTA_ABILITY_LAST_BEHAVIOR",
        "description": "(536870912) "
    },
    "Convars:GetFloat": {
        "body": [
            "GetFloat( ${string_1} )",
            "-- GetFloat(name) : returns the convar as a float. May return null if no such convar."
        ],
        "prefix": "GetFloat",
        "description": "GetFloat(name) : returns the convar as a float. May return null if no such convar."
    },
    "DOTA_RUNE_BOUNTY": {
        "body": [
            "DOTA_RUNE_BOUNTY"
        ],
        "prefix": "DOTA_RUNE_BOUNTY",
        "description": "(5) "
    },
    "DOTA_LOADOUT_TYPE_NECK": {
        "body": [
            "DOTA_LOADOUT_TYPE_NECK"
        ],
        "prefix": "DOTA_LOADOUT_TYPE_NECK",
        "description": "(9) "
    },
    "CDOTABaseGameMode:SetMinimumAttackSpeed": {
        "body": [
            "SetMinimumAttackSpeed( ${nMinSpeed} )",
            "-- Set the minimum attack speed for units."
        ],
        "prefix": "SetMinimumAttackSpeed",
        "description": "Set the minimum attack speed for units."
    },
    "MinimapEvent": {
        "body": [
            "MinimapEvent( ${int_1}, ${handle_2}, ${int_3}, ${int_4}, ${int_5}, ${int_6} )",
            "-- Start a minimap event. (nTeamID, hEntity, nXCoord, nYCoord, nEventType, nEventDuration)."
        ],
        "prefix": "MinimapEvent",
        "description": "Start a minimap event. (nTeamID, hEntity, nXCoord, nYCoord, nEventType, nEventDuration)."
    },
    "CDOTABaseAbility:GetAssociatedPrimaryAbilities": {
        "body": [
            "GetAssociatedPrimaryAbilities(  )",
            "-- "
        ],
        "prefix": "GetAssociatedPrimaryAbilities",
        "description": ""
    },
    "ACT_DOTA_IDLE_SLEEPING": {
        "body": [
            "ACT_DOTA_IDLE_SLEEPING"
        ],
        "prefix": "ACT_DOTA_IDLE_SLEEPING",
        "description": "(1622) "
    },
    "CDOTA_Item:Think": {
        "body": [
            "Think(  )",
            "-- Think this item"
        ],
        "prefix": "Think",
        "description": "Think this item"
    },
    "CDOTA_PlayerResource:SetCustomTeamAssignment": {
        "body": [
            "SetCustomTeamAssignment( ${iPlayerID}, ${iTeamAssignment} )",
            "-- Set custom team assignment for this player."
        ],
        "prefix": "SetCustomTeamAssignment",
        "description": "Set custom team assignment for this player."
    },
    "CDOTA_BaseNPC:IsBoss": {
        "body": [
            "IsBoss(  )",
            "-- Is this a real hero?"
        ],
        "prefix": "IsBoss",
        "description": "Is this a real hero?"
    },
    "DOTA_HEROPICK_STATE_CD_SELECT3": {
        "body": [
            "DOTA_HEROPICK_STATE_CD_SELECT3"
        ],
        "prefix": "DOTA_HEROPICK_STATE_CD_SELECT3",
        "description": "(41) "
    },
    "ACT_DOTA_RATTLETRAP_BATTERYASSAULT": {
        "body": [
            "ACT_DOTA_RATTLETRAP_BATTERYASSAULT"
        ],
        "prefix": "ACT_DOTA_RATTLETRAP_BATTERYASSAULT",
        "description": "(1549) "
    },
    "CDOTA_BaseNPC_Hero:SetCustomDeathXP": {
        "body": [
            "SetCustomDeathXP( ${iValue} )",
            "-- Sets a custom experience value for this hero.  Note, GameRules boolean must be set for this to work!"
        ],
        "prefix": "SetCustomDeathXP",
        "description": "Sets a custom experience value for this hero.  Note, GameRules boolean must be set for this to work!"
    },
    "DOTA_LOADOUT_TYPE_MULTIKILL_BANNER": {
        "body": [
            "DOTA_LOADOUT_TYPE_MULTIKILL_BANNER"
        ],
        "prefix": "DOTA_LOADOUT_TYPE_MULTIKILL_BANNER",
        "description": "(38) "
    },
    "CDOTA_Ability_Lua:OnOwnerSpawned": {
        "body": [
            "OnOwnerSpawned(  )",
            "-- Caster respawned or spawned for the first time."
        ],
        "prefix": "OnOwnerSpawned",
        "description": "Caster respawned or spawned for the first time."
    },
    "CDOTA_BaseNPC:GetSecondsPerAttack": {
        "body": [
            "GetSecondsPerAttack(  )",
            "-- "
        ],
        "prefix": "GetSecondsPerAttack",
        "description": ""
    },
    "MODIFIER_STATE_DOMINATED": {
        "body": [
            "MODIFIER_STATE_DOMINATED"
        ],
        "prefix": "MODIFIER_STATE_DOMINATED",
        "description": "(28) "
    },
    "CDOTA_BaseNPC_Hero:ShouldDoFlyHeightVisual": {
        "body": [
            "ShouldDoFlyHeightVisual(  )",
            "-- "
        ],
        "prefix": "ShouldDoFlyHeightVisual",
        "description": ""
    },
    "CDOTA_Item_Lua:OnHeroDiedNearby": {
        "body": [
            "OnHeroDiedNearby( ${unit}, ${attacker}, ${table} )",
            "-- A hero has died in the vicinity (ie Urn), takes table of params."
        ],
        "prefix": "OnHeroDiedNearby",
        "description": "A hero has died in the vicinity (ie Urn), takes table of params."
    },
    "CDOTA_BaseNPC:IsPhantom": {
        "body": [
            "IsPhantom(  )",
            "-- Is this a phantom unit?"
        ],
        "prefix": "IsPhantom",
        "description": "Is this a phantom unit?"
    },
    "CDOTA_Buff:GetCreationTime": {
        "body": [
            "GetCreationTime(  )",
            "-- "
        ],
        "prefix": "GetCreationTime",
        "description": ""
    },
    "DOTA_UNIT_TARGET_TEAM_FRIENDLY": {
        "body": [
            "DOTA_UNIT_TARGET_TEAM_FRIENDLY"
        ],
        "prefix": "DOTA_UNIT_TARGET_TEAM_FRIENDLY",
        "description": "(1) "
    },
    "CDOTA_BaseNPC:PickupRune": {
        "body": [
            "PickupRune( ${hItem} )",
            "-- Pick up a rune."
        ],
        "prefix": "PickupRune",
        "description": "Pick up a rune."
    },
    "CDebugOverlayScriptHelper:EntityAxis": {
        "body": [
            "EntityAxis( ${ehandle_1}, ${float_2}, ${bool_3}, ${float_4} )",
            "-- Draws the axis of the entity origin"
        ],
        "prefix": "EntityAxis",
        "description": "Draws the axis of the entity origin"
    },
    "CDOTA_PlayerResource:SetOverrideSelectionEntity": {
        "body": [
            "SetOverrideSelectionEntity( ${nPlayerID}, ${hEntity} )",
            "-- Set the forced selection entity for a player."
        ],
        "prefix": "SetOverrideSelectionEntity",
        "description": "Set the forced selection entity for a player."
    },
    "DOTA_LOADOUT_TYPE_COURIER": {
        "body": [
            "DOTA_LOADOUT_TYPE_COURIER"
        ],
        "prefix": "DOTA_LOADOUT_TYPE_COURIER",
        "description": "(29) "
    },
    "ACT_DOTA_RAZE_2": {
        "body": [
            "ACT_DOTA_RAZE_2"
        ],
        "prefix": "ACT_DOTA_RAZE_2",
        "description": "(1664) "
    },
    "TraceLine": {
        "body": [
            "TraceLine( ${handle_1} )",
            "-- Pass table - Inputs: startpos, endpos, mask, ignore  -- outputs: pos, fraction, hit, enthit, startsolid"
        ],
        "prefix": "TraceLine",
        "description": "Pass table - Inputs: startpos, endpos, mask, ignore  -- outputs: pos, fraction, hit, enthit, startsolid"
    },
    "CDOTA_BaseNPC_Hero:GetBaseAgility": {
        "body": [
            "GetBaseAgility(  )",
            "-- "
        ],
        "prefix": "GetBaseAgility",
        "description": ""
    },
    "MODIFIER_PROPERTY_AVOID_SPELL": {
        "body": [
            "MODIFIER_PROPERTY_AVOID_SPELL"
        ],
        "prefix": "MODIFIER_PROPERTY_AVOID_SPELL",
        "description": "(35)  GetModifierAvoidSpell"
    },
    "cvar_setf": {
        "body": [
            "cvar_setf( ${string_1}, ${float_2} )",
            "-- Sets the value of the given cvar, as a float."
        ],
        "prefix": "cvar_setf",
        "description": "Sets the value of the given cvar, as a float."
    },
    "MODIFIER_PROPERTY_EXTRA_STRENGTH_BONUS": {
        "body": [
            "MODIFIER_PROPERTY_EXTRA_STRENGTH_BONUS"
        ],
        "prefix": "MODIFIER_PROPERTY_EXTRA_STRENGTH_BONUS",
        "description": "(53)  GetModifierExtraStrengthBonus"
    },
    "DOTA_ABILITY_BEHAVIOR_PASSIVE": {
        "body": [
            "DOTA_ABILITY_BEHAVIOR_PASSIVE"
        ],
        "prefix": "DOTA_ABILITY_BEHAVIOR_PASSIVE",
        "description": "(2) "
    },
    "CDOTA_BaseNPC_Hero:SetAbilityPoints": {
        "body": [
            "SetAbilityPoints( ${iPoints} )",
            "-- Sets the current unspent ability points."
        ],
        "prefix": "SetAbilityPoints",
        "description": "Sets the current unspent ability points."
    },
    "CDOTA_BaseNPC:IsNeutralUnitType": {
        "body": [
            "IsNeutralUnitType(  )",
            "-- Is this a neutral?"
        ],
        "prefix": "IsNeutralUnitType",
        "description": "Is this a neutral?"
    },
    "MODIFIER_EVENT_ON_HEALTH_GAINED": {
        "body": [
            "MODIFIER_EVENT_ON_HEALTH_GAINED"
        ],
        "prefix": "MODIFIER_EVENT_ON_HEALTH_GAINED",
        "description": "(125)  OnHealthGained"
    },
    "MODIFIER_STATE_MUTED": {
        "body": [
            "MODIFIER_STATE_MUTED"
        ],
        "prefix": "MODIFIER_STATE_MUTED",
        "description": "(4) "
    },
    "ACT_DOTA_MAGNUS_SKEWER_START": {
        "body": [
            "ACT_DOTA_MAGNUS_SKEWER_START"
        ],
        "prefix": "ACT_DOTA_MAGNUS_SKEWER_START",
        "description": "(1605) "
    },
    "CEntityInstance:DisconnectRedirectedOutput": {
        "body": [
            "DisconnectRedirectedOutput( ${string_1}, ${string_2}, ${handle_3} )",
            "-- Removes a connected script function from an I/O event on the passed entity."
        ],
        "prefix": "DisconnectRedirectedOutput",
        "description": "Removes a connected script function from an I/O event on the passed entity."
    },
    "CDebugOverlayScriptHelper:Line": {
        "body": [
            "Line( ${Vector_1}, ${Vector_2}, ${int_3}, ${int_4}, ${int_5}, ${int_6}, ${bool_7}, ${float_8} )",
            "-- Draws a line between two points"
        ],
        "prefix": "Line",
        "description": "Draws a line between two points"
    },
    "CDOTABaseAbility:CanAbilityBeUpgraded": {
        "body": [
            "CanAbilityBeUpgraded(  )",
            "-- "
        ],
        "prefix": "CanAbilityBeUpgraded",
        "description": ""
    },
    "CDOTA_BaseNPC:GetUnitName": {
        "body": [
            "GetUnitName(  )",
            "-- Get the name of this unit."
        ],
        "prefix": "GetUnitName",
        "description": "Get the name of this unit."
    },
    "DOTA_HEROPICK_STATE_CM_BAN6": {
        "body": [
            "DOTA_HEROPICK_STATE_CM_BAN6"
        ],
        "prefix": "DOTA_HEROPICK_STATE_CM_BAN6",
        "description": "(12) "
    },
    "PrintLinkedConsoleMessage": {
        "body": [
            "PrintLinkedConsoleMessage( ${string_1}, ${string_2} )",
            "-- Print a console message with a linked console command"
        ],
        "prefix": "PrintLinkedConsoleMessage",
        "description": "Print a console message with a linked console command"
    },
    "MODIFIER_PROPERTY_MOVESPEED_LIMIT": {
        "body": [
            "MODIFIER_PROPERTY_MOVESPEED_LIMIT"
        ],
        "prefix": "MODIFIER_PROPERTY_MOVESPEED_LIMIT",
        "description": "(17)  GetModifierMoveSpeed_Limit"
    },
    "MODIFIER_PROPERTY_PROCATTACK_BONUS_DAMAGE_PURE": {
        "body": [
            "MODIFIER_PROPERTY_PROCATTACK_BONUS_DAMAGE_PURE"
        ],
        "prefix": "MODIFIER_PROPERTY_PROCATTACK_BONUS_DAMAGE_PURE",
        "description": "(5)  GetModifierProcAttack_BonusDamage_Pure"
    },
    "DOTA_ABILITY_BEHAVIOR_UNRESTRICTED": {
        "body": [
            "DOTA_ABILITY_BEHAVIOR_UNRESTRICTED"
        ],
        "prefix": "DOTA_ABILITY_BEHAVIOR_UNRESTRICTED",
        "description": "(1048576) "
    },
    "CCustomNetTableManager:SetTableValue": {
        "body": [
            "SetTableValue( ${string_1}, ${string_2}, ${handle_3} )",
            "-- ( string TableName, string KeyName, script_table Value )"
        ],
        "prefix": "SetTableValue",
        "description": "( string TableName, string KeyName, script_table Value )"
    },
    "CDOTA_Modifier_Lua:GetAuraSearchTeam": {
        "body": [
            "GetAuraSearchTeam(  )",
            "-- Return the teams this aura applies its buff to."
        ],
        "prefix": "GetAuraSearchTeam",
        "description": "Return the teams this aura applies its buff to."
    },
    "CDOTA_BaseNPC:SetAttackCapability": {
        "body": [
            "SetAttackCapability( ${iAttackCapabilities} )",
            "-- "
        ],
        "prefix": "SetAttackCapability",
        "description": ""
    },
    "MODIFIER_ATTRIBUTE_MULTIPLE": {
        "body": [
            "MODIFIER_ATTRIBUTE_MULTIPLE"
        ],
        "prefix": "MODIFIER_ATTRIBUTE_MULTIPLE",
        "description": "(2) "
    },
    "CDOTA_BaseNPC:IsOther": {
        "body": [
            "IsOther(  )",
            "-- Is this unit a ward-type unit?"
        ],
        "prefix": "IsOther",
        "description": "Is this unit a ward-type unit?"
    },
    "ACT_DOTA_ATTACK": {
        "body": [
            "ACT_DOTA_ATTACK"
        ],
        "prefix": "ACT_DOTA_ATTACK",
        "description": "(1503) "
    },
    "CDOTA_BaseNPC:TriggerModifierDodge": {
        "body": [
            "TriggerModifierDodge(  )",
            "-- "
        ],
        "prefix": "TriggerModifierDodge",
        "description": ""
    },
    "MODIFIER_STATE_BLIND": {
        "body": [
            "MODIFIER_STATE_BLIND"
        ],
        "prefix": "MODIFIER_STATE_BLIND",
        "description": "(29) "
    },
    "CBaseModelEntity:SetModel": {
        "body": [
            "SetModel( ${pModelName} )",
            "-- "
        ],
        "prefix": "SetModel",
        "description": ""
    },
    "ACT_DOTA_LOADOUT_RARE": {
        "body": [
            "ACT_DOTA_LOADOUT_RARE"
        ],
        "prefix": "ACT_DOTA_LOADOUT_RARE",
        "description": "(1683) "
    },
    "CDOTA_PlayerResource:IncrementNearbyCreepDeaths": {
        "body": [
            "IncrementNearbyCreepDeaths( ${iPlayerID} )",
            "-- "
        ],
        "prefix": "IncrementNearbyCreepDeaths",
        "description": ""
    },
    "MODIFIER_PROPERTY_MOVESPEED_BONUS_CONSTANT": {
        "body": [
            "MODIFIER_PROPERTY_MOVESPEED_BONUS_CONSTANT"
        ],
        "prefix": "MODIFIER_PROPERTY_MOVESPEED_BONUS_CONSTANT",
        "description": "(10)  GetModifierMoveSpeedBonus_Constant"
    },
    "Convars:SetInt": {
        "body": [
            "SetInt( ${string_1}, ${int_2} )",
            "-- SetInt(name, val) : sets the value of the convar to the int."
        ],
        "prefix": "SetInt",
        "description": "SetInt(name, val) : sets the value of the convar to the int."
    },
    "ACT_DOTA_SPAWN": {
        "body": [
            "ACT_DOTA_SPAWN"
        ],
        "prefix": "ACT_DOTA_SPAWN",
        "description": "(1534) "
    },
    "CDOTA_PlayerResource:IncrementLastHits": {
        "body": [
            "IncrementLastHits( ${iPlayerID} )",
            "-- "
        ],
        "prefix": "IncrementLastHits",
        "description": ""
    },
    "CDOTA_BaseNPC:Interrupt": {
        "body": [
            "Interrupt(  )",
            "-- "
        ],
        "prefix": "Interrupt",
        "description": ""
    },
    "CDOTA_BaseNPC:IsAttacking": {
        "body": [
            "IsAttacking(  )",
            "-- "
        ],
        "prefix": "IsAttacking",
        "description": ""
    },
    "PATTACH_WORLDORIGIN": {
        "body": [
            "PATTACH_WORLDORIGIN"
        ],
        "prefix": "PATTACH_WORLDORIGIN",
        "description": "(8) "
    },
    "DebugScreenTextPretty": {
        "body": [
            "DebugScreenTextPretty( ${float_1}, ${float_2}, ${int_3}, ${string_4}, ${int_5}, ${int_6}, ${int_7}, ${int_8}, ${float_9}, ${string_10}, ${int_11}, ${bool_12} )",
            "-- Draw pretty debug text (x, y, lineOffset, text, r, g, b, a, duration, font, size, bBold)"
        ],
        "prefix": "DebugScreenTextPretty",
        "description": "Draw pretty debug text (x, y, lineOffset, text, r, g, b, a, duration, font, size, bBold)"
    },
    "ACT_DOTA_RELAX_END": {
        "body": [
            "ACT_DOTA_RELAX_END"
        ],
        "prefix": "ACT_DOTA_RELAX_END",
        "description": "(1610) "
    },
    "CBaseEntity:ApplyAbsVelocityImpulse": {
        "body": [
            "ApplyAbsVelocityImpulse( ${vecImpulse} )",
            "-- Apply a Velocity Impulse"
        ],
        "prefix": "ApplyAbsVelocityImpulse",
        "description": "Apply a Velocity Impulse"
    },
    "CDOTA_BaseNPC:GetMagicalArmorValue": {
        "body": [
            "GetMagicalArmorValue(  )",
            "-- Returns current magical armor value."
        ],
        "prefix": "GetMagicalArmorValue",
        "description": "Returns current magical armor value."
    },
    "CDOTA_BaseNPC:CastAbilityNoTarget": {
        "body": [
            "CastAbilityNoTarget( ${hAbility}, ${iPlayerIndex} )",
            "-- Cast an ability with no target."
        ],
        "prefix": "CastAbilityNoTarget",
        "description": "Cast an ability with no target."
    },
    "CDOTA_PlayerResource:GetStuns": {
        "body": [
            "GetStuns( ${iPlayerID} )",
            "-- "
        ],
        "prefix": "GetStuns",
        "description": ""
    },
    "MODIFIER_PROPERTY_RESPAWNTIME_STACKING": {
        "body": [
            "MODIFIER_PROPERTY_RESPAWNTIME_STACKING"
        ],
        "prefix": "MODIFIER_PROPERTY_RESPAWNTIME_STACKING",
        "description": "(65)  GetModifierStackingRespawnTime"
    },
    "CDOTA_Ability_Lua:GetPlaybackRateOverride": {
        "body": [
            "GetPlaybackRateOverride(  )",
            "-- Return the animation rate of the cast animation."
        ],
        "prefix": "GetPlaybackRateOverride",
        "description": "Return the animation rate of the cast animation."
    },
    "CEntityInstance:RemoveSelf": {
        "body": [
            "RemoveSelf(  )",
            "-- Delete this entity"
        ],
        "prefix": "RemoveSelf",
        "description": "Delete this entity"
    },
    "QUEST_TEXT_REPLACE_VALUE_TARGET_VALUE": {
        "body": [
            "QUEST_TEXT_REPLACE_VALUE_TARGET_VALUE"
        ],
        "prefix": "QUEST_TEXT_REPLACE_VALUE_TARGET_VALUE",
        "description": "(1) "
    },
    "DOTA_LOADOUT_TYPE_ARMS": {
        "body": [
            "DOTA_LOADOUT_TYPE_ARMS"
        ],
        "prefix": "DOTA_LOADOUT_TYPE_ARMS",
        "description": "(6) "
    },
    "CDOTA_PlayerResource:AddClaimedFarm": {
        "body": [
            "AddClaimedFarm( ${iPlayerID}, ${flFarmValue}, ${bEarnedValue} )",
            "-- "
        ],
        "prefix": "AddClaimedFarm",
        "description": ""
    },
    "CDOTA_Item:GetPurchaseTime": {
        "body": [
            "GetPurchaseTime(  )",
            "-- Get the purchase time of this item"
        ],
        "prefix": "GetPurchaseTime",
        "description": "Get the purchase time of this item"
    },
    "ACT_DOTA_CHANNEL_ABILITY_1": {
        "body": [
            "ACT_DOTA_CHANNEL_ABILITY_1"
        ],
        "prefix": "ACT_DOTA_CHANNEL_ABILITY_1",
        "description": "(1520) "
    },
    "CDOTA_Item_Lua:IsHiddenAbilityCastable": {
        "body": [
            "IsHiddenAbilityCastable(  )",
            "-- Returns true if this ability can be used when not on the action panel."
        ],
        "prefix": "IsHiddenAbilityCastable",
        "description": "Returns true if this ability can be used when not on the action panel."
    },
    "CDOTA_Item:IsCastOnPickup": {
        "body": [
            "IsCastOnPickup(  )",
            "-- "
        ],
        "prefix": "IsCastOnPickup",
        "description": ""
    },
    "EmitAnnouncerSound": {
        "body": [
            "EmitAnnouncerSound( ${string_1} )",
            "-- Emit an announcer sound for all players."
        ],
        "prefix": "EmitAnnouncerSound",
        "description": "Emit an announcer sound for all players."
    },
    "CSceneEntity:FindNamedEntity": {
        "body": [
            "FindNamedEntity( ${string_1} )",
            "-- given an entity reference, such as !target, get actual entity from scene object"
        ],
        "prefix": "FindNamedEntity",
        "description": "given an entity reference, such as !target, get actual entity from scene object"
    },
    "CDOTA_Unit_Nian:IsHornAlive": {
        "body": [
            "IsHornAlive(  )",
            "-- Is the Nian's horn broken?"
        ],
        "prefix": "IsHornAlive",
        "description": "Is the Nian's horn broken?"
    },
    "CDOTA_BaseNPC:NotOnMinimap": {
        "body": [
            "NotOnMinimap(  )",
            "-- "
        ],
        "prefix": "NotOnMinimap",
        "description": ""
    },
    "CBodyComponent:AddVelocity": {
        "body": [
            "AddVelocity( ${Vector_1}, ${Vector_2} )",
            "-- Add linear and angular velocity to the physics object"
        ],
        "prefix": "AddVelocity",
        "description": "Add linear and angular velocity to the physics object"
    },
    "DOTA_LOADOUT_TYPE_TELEPORT_EFFECT": {
        "body": [
            "DOTA_LOADOUT_TYPE_TELEPORT_EFFECT"
        ],
        "prefix": "DOTA_LOADOUT_TYPE_TELEPORT_EFFECT",
        "description": "(40) "
    },
    "MODIFIER_PROPERTY_TRANSLATE_ATTACK_SOUND": {
        "body": [
            "MODIFIER_PROPERTY_TRANSLATE_ATTACK_SOUND"
        ],
        "prefix": "MODIFIER_PROPERTY_TRANSLATE_ATTACK_SOUND",
        "description": "(137)  GetAttackSound"
    },
    "CSceneEntity:IsPaused": {
        "body": [
            "IsPaused(  )",
            "-- If this scene is currently paused."
        ],
        "prefix": "IsPaused",
        "description": "If this scene is currently paused."
    },
    "CDOTA_Ability_Lua:OnChannelThink": {
        "body": [
            "OnChannelThink( ${flInterval} )",
            "-- (float flInterval) Channeling is taking place."
        ],
        "prefix": "OnChannelThink",
        "description": "(float flInterval) Channeling is taking place."
    },
    "CDOTA_BaseNPC:GetBaseDayTimeVisionRange": {
        "body": [
            "GetBaseDayTimeVisionRange(  )",
            "-- Returns the vision range before modifiers."
        ],
        "prefix": "GetBaseDayTimeVisionRange",
        "description": "Returns the vision range before modifiers."
    },
    "CDOTA_BaseNPC:GetProjectileSpeed": {
        "body": [
            "GetProjectileSpeed(  )",
            "-- "
        ],
        "prefix": "GetProjectileSpeed",
        "description": ""
    },
    "CBaseEntity:SetAngularVelocity": {
        "body": [
            "SetAngularVelocity( ${pitchVel}, ${yawVel}, ${rollVel} )",
            "-- Set the local angular velocity - takes float pitch,yaw,roll velocities"
        ],
        "prefix": "SetAngularVelocity",
        "description": "Set the local angular velocity - takes float pitch,yaw,roll velocities"
    },
    "MAX_PATTACH_TYPES": {
        "body": [
            "MAX_PATTACH_TYPES"
        ],
        "prefix": "MAX_PATTACH_TYPES",
        "description": "(13) "
    },
    "ACT_DOTA_LIFESTEALER_EJECT": {
        "body": [
            "ACT_DOTA_LIFESTEALER_EJECT"
        ],
        "prefix": "ACT_DOTA_LIFESTEALER_EJECT",
        "description": "(1704) "
    },
    "MODIFIER_PROPERTY_OVERRIDE_ANIMATION_RATE": {
        "body": [
            "MODIFIER_PROPERTY_OVERRIDE_ANIMATION_RATE"
        ],
        "prefix": "MODIFIER_PROPERTY_OVERRIDE_ANIMATION_RATE",
        "description": "(76)  GetOverrideAnimationRate"
    },
    "CDebugOverlayScriptHelper:CircleScreenOriented": {
        "body": [
            "CircleScreenOriented( ${Vector_1}, ${float_2}, ${int_3}, ${int_4}, ${int_5}, ${int_6}, ${bool_7}, ${float_8} )",
            "-- Draws a circle oriented to the screen. Specify center in world space."
        ],
        "prefix": "CircleScreenOriented",
        "description": "Draws a circle oriented to the screen. Specify center in world space."
    },
    "DOTA_LOADOUT_TYPE_SHOULDER": {
        "body": [
            "DOTA_LOADOUT_TYPE_SHOULDER"
        ],
        "prefix": "DOTA_LOADOUT_TYPE_SHOULDER",
        "description": "(5) "
    },
    "MODIFIER_STATE_PASSIVES_DISABLED": {
        "body": [
            "MODIFIER_STATE_PASSIVES_DISABLED"
        ],
        "prefix": "MODIFIER_STATE_PASSIVES_DISABLED",
        "description": "(27) "
    },
    "CBodyComponent:SetMaterialGroup": {
        "body": [
            "SetMaterialGroup( ${utlstringtoken_1} )",
            "-- "
        ],
        "prefix": "SetMaterialGroup",
        "description": ""
    },
    "DoIncludeScript": {
        "body": [
            "DoIncludeScript( ${string_1}, ${handle_2} )",
            "-- Execute a script (internal)"
        ],
        "prefix": "DoIncludeScript",
        "description": "Execute a script (internal)"
    },
    "ACT_DOTA_RATTLETRAP_HOOKSHOT_START": {
        "body": [
            "ACT_DOTA_RATTLETRAP_HOOKSHOT_START"
        ],
        "prefix": "ACT_DOTA_RATTLETRAP_HOOKSHOT_START",
        "description": "(1551) "
    },
    "FireGameEventLocal": {
        "body": [
            "FireGameEventLocal( ${string_1}, ${handle_2} )",
            "-- Fire a game event without broadcasting to the client."
        ],
        "prefix": "FireGameEventLocal",
        "description": "Fire a game event without broadcasting to the client."
    },
    "DOTA_DAMAGE_FLAG_NONE": {
        "body": [
            "DOTA_DAMAGE_FLAG_NONE"
        ],
        "prefix": "DOTA_DAMAGE_FLAG_NONE",
        "description": "(0) "
    },
    "CDOTA_Buff:GetDieTime": {
        "body": [
            "GetDieTime(  )",
            "-- "
        ],
        "prefix": "GetDieTime",
        "description": ""
    },
    "DOTA_ModifyGold_CreepKill": {
        "body": [
            "DOTA_ModifyGold_CreepKill"
        ],
        "prefix": "DOTA_ModifyGold_CreepKill",
        "description": "(13) "
    },
    "DOTA_LOADOUT_TYPE_COUNT": {
        "body": [
            "DOTA_LOADOUT_TYPE_COUNT"
        ],
        "prefix": "DOTA_LOADOUT_TYPE_COUNT",
        "description": "(44) "
    },
    "ACT_DOTA_NIGHTSTALKER_TRANSITION": {
        "body": [
            "ACT_DOTA_NIGHTSTALKER_TRANSITION"
        ],
        "prefix": "ACT_DOTA_NIGHTSTALKER_TRANSITION",
        "description": "(1565) "
    },
    "DOTA_HUD_VISIBILITY_COUNT": {
        "body": [
            "DOTA_HUD_VISIBILITY_COUNT"
        ],
        "prefix": "DOTA_HUD_VISIBILITY_COUNT",
        "description": "(13) "
    },
    "CBaseEntity:NextMovePeer": {
        "body": [
            "NextMovePeer(  )",
            "-- "
        ],
        "prefix": "NextMovePeer",
        "description": ""
    },
    "CDOTA_Modifier_Lua:GetAuraEntityReject": {
        "body": [
            "GetAuraEntityReject( ${hEntity} )",
            "-- Return true/false if this entity should receive the aura under specific conditions"
        ],
        "prefix": "GetAuraEntityReject",
        "description": "Return true/false if this entity should receive the aura under specific conditions"
    },
    "SUBQUEST_TEXT_REPLACE_VALUE_TARGET_VALUE": {
        "body": [
            "SUBQUEST_TEXT_REPLACE_VALUE_TARGET_VALUE"
        ],
        "prefix": "SUBQUEST_TEXT_REPLACE_VALUE_TARGET_VALUE",
        "description": "(1) "
    },
    "MODIFIER_EVENT_ON_ATTACKED": {
        "body": [
            "MODIFIER_EVENT_ON_ATTACKED"
        ],
        "prefix": "MODIFIER_EVENT_ON_ATTACKED",
        "description": "(118)  OnAttacked"
    },
    "MODIFIER_PROPERTY_EXTRA_HEALTH_PERCENTAGE": {
        "body": [
            "MODIFIER_PROPERTY_EXTRA_HEALTH_PERCENTAGE"
        ],
        "prefix": "MODIFIER_PROPERTY_EXTRA_HEALTH_PERCENTAGE",
        "description": "(56)  GetModifierExtraHealthPercentage"
    },
    "SpawnEntityGroupFromTable": {
        "body": [
            "SpawnEntityGroupFromTable( ${handle_1}, ${bool_2}, ${handle_3} )",
            "-- Hierarchically spawn an entity group from a set of spawn tables."
        ],
        "prefix": "SpawnEntityGroupFromTable",
        "description": "Hierarchically spawn an entity group from a set of spawn tables."
    },
    "ACT_DOTA_RAZE_1": {
        "body": [
            "ACT_DOTA_RAZE_1"
        ],
        "prefix": "ACT_DOTA_RAZE_1",
        "description": "(1663) "
    },
    "DOTA_HEROPICK_STATE_CD_SELECT6": {
        "body": [
            "DOTA_HEROPICK_STATE_CD_SELECT6"
        ],
        "prefix": "DOTA_HEROPICK_STATE_CD_SELECT6",
        "description": "(44) "
    },
    "ACT_DOTA_GESTURE_POINT": {
        "body": [
            "ACT_DOTA_GESTURE_POINT"
        ],
        "prefix": "ACT_DOTA_GESTURE_POINT",
        "description": "(1624) "
    },
    "CDOTA_BaseNPC_Hero:SetBuybackCooldownTime": {
        "body": [
            "SetBuybackCooldownTime( ${flTime} )",
            "-- Sets the buyback cooldown time."
        ],
        "prefix": "SetBuybackCooldownTime",
        "description": "Sets the buyback cooldown time."
    },
    "UF_FAIL_FRIENDLY": {
        "body": [
            "UF_FAIL_FRIENDLY"
        ],
        "prefix": "UF_FAIL_FRIENDLY",
        "description": "(1) "
    },
    "MODIFIER_EVENT_ON_ORB_EFFECT": {
        "body": [
            "MODIFIER_EVENT_ON_ORB_EFFECT"
        ],
        "prefix": "MODIFIER_EVENT_ON_ORB_EFFECT",
        "description": "(117) "
    },
    "ACT_DOTA_ENFEEBLE": {
        "body": [
            "ACT_DOTA_ENFEEBLE"
        ],
        "prefix": "ACT_DOTA_ENFEEBLE",
        "description": "(1674) "
    },
    "CDOTA_BaseNPC_Hero:GetRespawnsDisabled": {
        "body": [
            "GetRespawnsDisabled(  )",
            "-- Is this hero prevented from respawning?"
        ],
        "prefix": "GetRespawnsDisabled",
        "description": "Is this hero prevented from respawning?"
    },
    "CDOTABaseAbility:IsChanneling": {
        "body": [
            "IsChanneling(  )",
            "-- Returns whether the ability is currently channeling."
        ],
        "prefix": "IsChanneling",
        "description": "Returns whether the ability is currently channeling."
    },
    "UF_FAIL_MECHANICAL": {
        "body": [
            "UF_FAIL_MECHANICAL"
        ],
        "prefix": "UF_FAIL_MECHANICAL",
        "description": "(7) "
    },
    "DOTA_HEROPICK_STATE_CM_SELECT3": {
        "body": [
            "DOTA_HEROPICK_STATE_CM_SELECT3"
        ],
        "prefix": "DOTA_HEROPICK_STATE_CM_SELECT3",
        "description": "(19) "
    },
    "CDebugOverlayScriptHelper:Cross": {
        "body": [
            "Cross( ${Vector_1}, ${float_2}, ${int_3}, ${int_4}, ${int_5}, ${int_6}, ${bool_7}, ${float_8} )",
            "-- Draws a screen-aligned cross. Specify origin in world space."
        ],
        "prefix": "Cross",
        "description": "Draws a screen-aligned cross. Specify origin in world space."
    },
    "ACT_DOTA_AMBUSH": {
        "body": [
            "ACT_DOTA_AMBUSH"
        ],
        "prefix": "ACT_DOTA_AMBUSH",
        "description": "(1627) "
    },
    "MODIFIER_PROPERTY_COOLDOWN_REDUCTION_CONSTANT": {
        "body": [
            "MODIFIER_PROPERTY_COOLDOWN_REDUCTION_CONSTANT"
        ],
        "prefix": "MODIFIER_PROPERTY_COOLDOWN_REDUCTION_CONSTANT",
        "description": "(22)  GetModifierCooldownReduction_Constant"
    },
    "CEnvProjectedTexture:SetFarRange": {
        "body": [
            "SetFarRange( ${flRange} )",
            "-- Set light maximum range"
        ],
        "prefix": "SetFarRange",
        "description": "Set light maximum range"
    },
    "UnloadSpawnGroupByHandle": {
        "body": [
            "UnloadSpawnGroupByHandle( ${int_1} )",
            "-- Unload a spawn group by handle"
        ],
        "prefix": "UnloadSpawnGroupByHandle",
        "description": "Unload a spawn group by handle"
    },
    "AngleDiff": {
        "body": [
            "AngleDiff( ${fAngle1}, ${fAngle2} )",
            "-- Returns the number of degrees difference between two yaw angles"
        ],
        "prefix": "AngleDiff",
        "description": "Returns the number of degrees difference between two yaw angles"
    },
    "CBaseModelEntity:SetRenderMode": {
        "body": [
            "SetRenderMode( ${nMode} )",
            "-- SetRenderMode( int ): Sets the render mode of the entity."
        ],
        "prefix": "SetRenderMode",
        "description": "SetRenderMode( int ): Sets the render mode of the entity."
    },
    "DOTA_TEAM_CUSTOM_5": {
        "body": [
            "DOTA_TEAM_CUSTOM_5"
        ],
        "prefix": "DOTA_TEAM_CUSTOM_5",
        "description": "(10) "
    },
    "GetSystemDate": {
        "body": [
            "GetSystemDate(  )",
            "-- Get the current real world date"
        ],
        "prefix": "GetSystemDate",
        "description": "Get the current real world date"
    },
    "CDOTABaseAbility:GetAbilityDamageType": {
        "body": [
            "GetAbilityDamageType(  )",
            "-- "
        ],
        "prefix": "GetAbilityDamageType",
        "description": ""
    },
    "CDebugOverlayScriptHelper:DrawTickMarkedLine": {
        "body": [
            "DrawTickMarkedLine( ${Vector_1}, ${Vector_2}, ${float_3}, ${int_4}, ${int_5}, ${int_6}, ${int_7}, ${int_8}, ${bool_9}, ${float_10} )",
            "-- Draws a dashed line. Specify endpoints in world space."
        ],
        "prefix": "DrawTickMarkedLine",
        "description": "Draws a dashed line. Specify endpoints in world space."
    },
    "ACT_DOTA_CHANNEL_ABILITY_5": {
        "body": [
            "ACT_DOTA_CHANNEL_ABILITY_5"
        ],
        "prefix": "ACT_DOTA_CHANNEL_ABILITY_5",
        "description": "(1524) "
    },
    "MODIFIER_PROPERTY_EXTRA_MANA_BONUS": {
        "body": [
            "MODIFIER_PROPERTY_EXTRA_MANA_BONUS"
        ],
        "prefix": "MODIFIER_PROPERTY_EXTRA_MANA_BONUS",
        "description": "(55)  GetModifierExtraManaBonus"
    },
    "MODIFIER_PROPERTY_LIFETIME_FRACTION": {
        "body": [
            "MODIFIER_PROPERTY_LIFETIME_FRACTION"
        ],
        "prefix": "MODIFIER_PROPERTY_LIFETIME_FRACTION",
        "description": "(138)  GetUnitLifetimeFraction"
    },
    "ACT_DOTA_CHANNEL_ABILITY_4": {
        "body": [
            "ACT_DOTA_CHANNEL_ABILITY_4"
        ],
        "prefix": "ACT_DOTA_CHANNEL_ABILITY_4",
        "description": "(1523) "
    },
    "SpawnEntityListFromTableAsynchronous": {
        "body": [
            "SpawnEntityListFromTableAsynchronous( ${handle_1}, ${handle_2} )",
            "-- Asynchronously spawn an entity group from a list of spawn tables. A callback will be triggered when the spawning is complete"
        ],
        "prefix": "SpawnEntityListFromTableAsynchronous",
        "description": "Asynchronously spawn an entity group from a list of spawn tables. A callback will be triggered when the spawning is complete"
    },
    "CDOTA_BaseNPC:GetBaseAttackTime": {
        "body": [
            "GetBaseAttackTime(  )",
            "-- "
        ],
        "prefix": "GetBaseAttackTime",
        "description": ""
    },
    "CDOTA_Ability_Lua:OnUpgrade": {
        "body": [
            "OnUpgrade(  )",
            "-- Ability gained a level."
        ],
        "prefix": "OnUpgrade",
        "description": "Ability gained a level."
    },
    "CDOTA_Ability_Lua:OnToggle": {
        "body": [
            "OnToggle(  )",
            "-- Ability is toggled on/off."
        ],
        "prefix": "OnToggle",
        "description": "Ability is toggled on/off."
    },
    "CDOTA_Ability_Lua:GetIntrinsicModifierName": {
        "body": [
            "GetIntrinsicModifierName(  )",
            "-- Returns the name of the modifier applied passively by this ability."
        ],
        "prefix": "GetIntrinsicModifierName",
        "description": "Returns the name of the modifier applied passively by this ability."
    },
    "ACT_DOTA_CENTAUR_STAMPEDE": {
        "body": [
            "ACT_DOTA_CENTAUR_STAMPEDE"
        ],
        "prefix": "ACT_DOTA_CENTAUR_STAMPEDE",
        "description": "(1611) "
    },
    "ITEM_NOT_SHAREABLE": {
        "body": [
            "ITEM_NOT_SHAREABLE"
        ],
        "prefix": "ITEM_NOT_SHAREABLE",
        "description": "(2) "
    },
    "DOTA_TEAM_CUSTOM_MAX": {
        "body": [
            "DOTA_TEAM_CUSTOM_MAX"
        ],
        "prefix": "DOTA_TEAM_CUSTOM_MAX",
        "description": "(13) "
    },
    "PATTACH_RENDERORIGIN_FOLLOW": {
        "body": [
            "PATTACH_RENDERORIGIN_FOLLOW"
        ],
        "prefix": "PATTACH_RENDERORIGIN_FOLLOW",
        "description": "(10) "
    },
    "RandomFloat": {
        "body": [
            "RandomFloat( ${float_1}, ${float_2} )",
            "-- Get a random float within a range"
        ],
        "prefix": "RandomFloat",
        "description": "Get a random float within a range"
    },
    "MODIFIER_PROPERTY_TOOLTIP": {
        "body": [
            "MODIFIER_PROPERTY_TOOLTIP"
        ],
        "prefix": "MODIFIER_PROPERTY_TOOLTIP",
        "description": "(132)  OnTooltip"
    },
    "CScriptPrecacheContext:GetValue": {
        "body": [
            "GetValue( ${string_1} )",
            "-- Reads a spawn key"
        ],
        "prefix": "GetValue",
        "description": "Reads a spawn key"
    },
    "ACT_DOTA_POOF_END": {
        "body": [
            "ACT_DOTA_POOF_END"
        ],
        "prefix": "ACT_DOTA_POOF_END",
        "description": "(1603) "
    },
    "DOTA_ABILITY_BEHAVIOR_ITEM": {
        "body": [
            "DOTA_ABILITY_BEHAVIOR_ITEM"
        ],
        "prefix": "DOTA_ABILITY_BEHAVIOR_ITEM",
        "description": "(256) "
    },
    "CDOTA_BaseNPC:IsPhased": {
        "body": [
            "IsPhased(  )",
            "-- "
        ],
        "prefix": "IsPhased",
        "description": ""
    },
    "CBaseCombatCharacter:GetWeaponCount": {
        "body": [
            "GetWeaponCount(  )",
            "-- GetWeaponCount() : Gets the number of weapons currently equipped"
        ],
        "prefix": "GetWeaponCount",
        "description": "GetWeaponCount() : Gets the number of weapons currently equipped"
    },
    "CDOTABaseAbility:GetLevel": {
        "body": [
            "GetLevel(  )",
            "-- Get the current level of the ability."
        ],
        "prefix": "GetLevel",
        "description": "Get the current level of the ability."
    },
    "MODIFIER_PROPERTY_TOTAL_CONSTANT_BLOCK_UNAVOIDABLE_PRE_ARMOR": {
        "body": [
            "MODIFIER_PROPERTY_TOTAL_CONSTANT_BLOCK_UNAVOIDABLE_PRE_ARMOR"
        ],
        "prefix": "MODIFIER_PROPERTY_TOTAL_CONSTANT_BLOCK_UNAVOIDABLE_PRE_ARMOR",
        "description": "(72)  GetModifierPhysical_ConstantBlockUnavoidablePreArmor"
    },
    "LoadKeyValues": {
        "body": [
            "LoadKeyValues( ${string_1} )",
            "-- Creates a table from the specified keyvalues text file"
        ],
        "prefix": "LoadKeyValues",
        "description": "Creates a table from the specified keyvalues text file"
    },
    "DOTA_UNIT_TARGET_FLAG_NONE": {
        "body": [
            "DOTA_UNIT_TARGET_FLAG_NONE"
        ],
        "prefix": "DOTA_UNIT_TARGET_FLAG_NONE",
        "description": "(0) "
    },
    "CDOTA_Item_Physical:SetContainedItem": {
        "body": [
            "SetContainedItem( ${hItem} )",
            "-- Set the contained item."
        ],
        "prefix": "SetContainedItem",
        "description": "Set the contained item."
    },
    "CDOTABaseGameMode:ClearDamageFilter": {
        "body": [
            "ClearDamageFilter(  )",
            "-- Clear the script filter that controls how a unit takes damage."
        ],
        "prefix": "ClearDamageFilter",
        "description": "Clear the script filter that controls how a unit takes damage."
    },
    "DOTA_HUD_VISIBILITY_INVENTORY_PANEL": {
        "body": [
            "DOTA_HUD_VISIBILITY_INVENTORY_PANEL"
        ],
        "prefix": "DOTA_HUD_VISIBILITY_INVENTORY_PANEL",
        "description": "(5) "
    },
    "PATTACH_ROOTBONE_FOLLOW": {
        "body": [
            "PATTACH_ROOTBONE_FOLLOW"
        ],
        "prefix": "PATTACH_ROOTBONE_FOLLOW",
        "description": "(9) "
    },
    "CDOTA_PlayerResource:GetAegisPickups": {
        "body": [
            "GetAegisPickups( ${iPlayerID} )",
            "-- "
        ],
        "prefix": "GetAegisPickups",
        "description": ""
    },
    "CDOTABaseAbility:GetChannelTime": {
        "body": [
            "GetChannelTime(  )",
            "-- "
        ],
        "prefix": "GetChannelTime",
        "description": ""
    },
    "CDOTABaseAbility:IsInAbilityPhase": {
        "body": [
            "IsInAbilityPhase(  )",
            "-- Returns whether the ability is currently casting."
        ],
        "prefix": "IsInAbilityPhase",
        "description": "Returns whether the ability is currently casting."
    },
    "GetListenServerHost": {
        "body": [
            "GetListenServerHost(  )",
            "-- Get the local player on a listen server."
        ],
        "prefix": "GetListenServerHost",
        "description": "Get the local player on a listen server."
    },
    "DOTA_LOADOUT_TYPE_MOUNT": {
        "body": [
            "DOTA_LOADOUT_TYPE_MOUNT"
        ],
        "prefix": "DOTA_LOADOUT_TYPE_MOUNT",
        "description": "(16) "
    },
    "DOTA_HEROPICK_STATE_CD_BAN1": {
        "body": [
            "DOTA_HEROPICK_STATE_CD_BAN1"
        ],
        "prefix": "DOTA_HEROPICK_STATE_CD_BAN1",
        "description": "(33) "
    },
    "CDOTA_BaseNPC:IsDisarmed": {
        "body": [
            "IsDisarmed(  )",
            "-- "
        ],
        "prefix": "IsDisarmed",
        "description": ""
    },
    "EmitSoundOn": {
        "body": [
            "EmitSoundOn( ${string_1}, ${handle_2} )",
            "-- Play named sound on Entity"
        ],
        "prefix": "EmitSoundOn",
        "description": "Play named sound on Entity"
    },
    "CDOTA_BaseNPC:AddNoDraw": {
        "body": [
            "AddNoDraw(  )",
            "-- Adds the no draw flag."
        ],
        "prefix": "AddNoDraw",
        "description": "Adds the no draw flag."
    },
    "CToneMapControllerComponent:GetMinExposure": {
        "body": [
            "GetMinExposure(  )",
            "-- Gets min exposure for this tonemap controller"
        ],
        "prefix": "GetMinExposure",
        "description": "Gets min exposure for this tonemap controller"
    },
    "CDOTA_BaseNPC:GetAggroTarget": {
        "body": [
            "GetAggroTarget(  )",
            "-- Returns this unit's aggro target."
        ],
        "prefix": "GetAggroTarget",
        "description": "Returns this unit's aggro target."
    },
    "DOTA_UNIT_TARGET_FLAG_NO_INVIS": {
        "body": [
            "DOTA_UNIT_TARGET_FLAG_NO_INVIS"
        ],
        "prefix": "DOTA_UNIT_TARGET_FLAG_NO_INVIS",
        "description": "(256) "
    },
    "SendOverheadEventMessage": {
        "body": [
            "SendOverheadEventMessage( ${handle_1}, ${int_2}, ${handle_3}, ${int_4}, ${handle_5} )",
            "-- ( DOTAPlayer sendToPlayer, int iMessageType, Entity targetEntity, int iValue, DOTAPlayer sourcePlayer ) - sendToPlayer and sourcePlayer can be nil - iMessageType is one of OVERHEAD_ALERT_*"
        ],
        "prefix": "SendOverheadEventMessage",
        "description": "( DOTAPlayer sendToPlayer, int iMessageType, Entity targetEntity, int iValue, DOTAPlayer sourcePlayer ) - sendToPlayer and sourcePlayer can be nil - iMessageType is one of OVERHEAD_ALERT_*"
    },
    "CDOTA_BaseNPC:IsInvisible": {
        "body": [
            "IsInvisible(  )",
            "-- "
        ],
        "prefix": "IsInvisible",
        "description": ""
    },
    "ACT_DOTA_JAKIRO_LIQUIDFIRE_START": {
        "body": [
            "ACT_DOTA_JAKIRO_LIQUIDFIRE_START"
        ],
        "prefix": "ACT_DOTA_JAKIRO_LIQUIDFIRE_START",
        "description": "(1574) "
    },
    "ACT_DOTA_CAST_ABILITY_1": {
        "body": [
            "ACT_DOTA_CAST_ABILITY_1"
        ],
        "prefix": "ACT_DOTA_CAST_ABILITY_1",
        "description": "(1510) "
    },
    "CDOTABaseGameMode:SetOverrideSelectionEntity": {
        "body": [
            "SetOverrideSelectionEntity( ${hOverrideEntity} )",
            "-- Set an override for the default selection entity, instead of each player's hero."
        ],
        "prefix": "SetOverrideSelectionEntity",
        "description": "Set an override for the default selection entity, instead of each player's hero."
    },
    "CDOTA_BaseNPC:NotifyWearablesOfModelChange": {
        "body": [
            "NotifyWearablesOfModelChange( ${bOriginalModel} )",
            "-- "
        ],
        "prefix": "NotifyWearablesOfModelChange",
        "description": ""
    },
    "CDOTABaseAbility:GetGoldCostForUpgrade": {
        "body": [
            "GetGoldCostForUpgrade( ${iLevel} )",
            "-- "
        ],
        "prefix": "GetGoldCostForUpgrade",
        "description": ""
    },
    "MODIFIER_PROPERTY_ABSORB_SPELL": {
        "body": [
            "MODIFIER_PROPERTY_ABSORB_SPELL"
        ],
        "prefix": "MODIFIER_PROPERTY_ABSORB_SPELL",
        "description": "(77)  GetAbsorbSpell"
    },
    "CDOTABaseGameMode:ClearModifyExperienceFilter": {
        "body": [
            "ClearModifyExperienceFilter(  )",
            "-- Clear the script filter that controls how hero experience is modified."
        ],
        "prefix": "ClearModifyExperienceFilter",
        "description": "Clear the script filter that controls how hero experience is modified."
    },
    "DOTA_ModifyGold_Building": {
        "body": [
            "DOTA_ModifyGold_Building"
        ],
        "prefix": "DOTA_ModifyGold_Building",
        "description": "(11) "
    },
    "CDOTABaseAbility:IsHidden": {
        "body": [
            "IsHidden(  )",
            "-- "
        ],
        "prefix": "IsHidden",
        "description": ""
    },
    "CDOTABaseGameMode:SetFixedRespawnTime": {
        "body": [
            "SetFixedRespawnTime( ${flFixedRespawnTime} )",
            "-- Set a fixed delay for all players to respawn after."
        ],
        "prefix": "SetFixedRespawnTime",
        "description": "Set a fixed delay for all players to respawn after."
    },
    "CDOTA_BaseNPC_Hero:KilledHero": {
        "body": [
            "KilledHero( ${hHero}, ${hInflictor} )",
            "-- Args: Hero, Inflictor"
        ],
        "prefix": "KilledHero",
        "description": "Args: Hero, Inflictor"
    },
    "MODIFIER_STATE_ROOTED": {
        "body": [
            "MODIFIER_STATE_ROOTED"
        ],
        "prefix": "MODIFIER_STATE_ROOTED",
        "description": "(0) "
    },
    "CDOTA_BaseNPC_Hero:IncrementLastHitStreak": {
        "body": [
            "IncrementLastHitStreak(  )",
            "-- Value is stored in PlayerResource."
        ],
        "prefix": "IncrementLastHitStreak",
        "description": "Value is stored in PlayerResource."
    },
    "CEntityInstance:Destroy": {
        "body": [
            "Destroy(  )",
            "-- "
        ],
        "prefix": "Destroy",
        "description": ""
    },
    "ACT_DOTA_JAKIRO_LIQUIDFIRE_LOOP": {
        "body": [
            "ACT_DOTA_JAKIRO_LIQUIDFIRE_LOOP"
        ],
        "prefix": "ACT_DOTA_JAKIRO_LIQUIDFIRE_LOOP",
        "description": "(1575) "
    },
    "MODIFIER_ATTRIBUTE_NONE": {
        "body": [
            "MODIFIER_ATTRIBUTE_NONE"
        ],
        "prefix": "MODIFIER_ATTRIBUTE_NONE",
        "description": "(0) "
    },
    "CSceneEntity:RemoveBroadcastTeamTarget": {
        "body": [
            "RemoveBroadcastTeamTarget( ${int_1} )",
            "-- Removes a team (by index) from the broadcast list"
        ],
        "prefix": "RemoveBroadcastTeamTarget",
        "description": "Removes a team (by index) from the broadcast list"
    },
    "PrecacheResource": {
        "body": [
            "PrecacheResource( ${string_1}, ${string_2}, ${handle_3} )",
            "-- Manually precache a single resource"
        ],
        "prefix": "PrecacheResource",
        "description": "Manually precache a single resource"
    },
    "CDebugOverlayScriptHelper:BoxAngles": {
        "body": [
            "BoxAngles( ${Vector_1}, ${Vector_2}, ${Vector_3}, ${Quaternion_4}, ${int_5}, ${int_6}, ${int_7}, ${int_8}, ${bool_9}, ${float_10} )",
            "-- Draws an oriented box at the origin. Specify bounds in local space."
        ],
        "prefix": "BoxAngles",
        "description": "Draws an oriented box at the origin. Specify bounds in local space."
    },
    "CDOTA_BaseNPC:GetCurrentVisionRange": {
        "body": [
            "GetCurrentVisionRange(  )",
            "-- Gets the current vision range."
        ],
        "prefix": "GetCurrentVisionRange",
        "description": "Gets the current vision range."
    },
    "CDOTA_BaseNPC:GetDayTimeVisionRange": {
        "body": [
            "GetDayTimeVisionRange(  )",
            "-- Returns the vision range after modifiers."
        ],
        "prefix": "GetDayTimeVisionRange",
        "description": "Returns the vision range after modifiers."
    },
    "MODIFIER_STATE_FLYING_FOR_PATHING_PURPOSES_ONLY": {
        "body": [
            "MODIFIER_STATE_FLYING_FOR_PATHING_PURPOSES_ONLY"
        ],
        "prefix": "MODIFIER_STATE_FLYING_FOR_PATHING_PURPOSES_ONLY",
        "description": "(32) "
    },
    "ACT_DOTA_TAUNT": {
        "body": [
            "ACT_DOTA_TAUNT"
        ],
        "prefix": "ACT_DOTA_TAUNT",
        "description": "(1536) "
    },
    "MODIFIER_PROPERTY_TEMPEST_DOUBLE": {
        "body": [
            "MODIFIER_PROPERTY_TEMPEST_DOUBLE"
        ],
        "prefix": "MODIFIER_PROPERTY_TEMPEST_DOUBLE",
        "description": "(147)  GetModifierTempestDouble"
    },
    "CDOTA_BaseNPC:GetAbilityByIndex": {
        "body": [
            "GetAbilityByIndex( ${iIndex} )",
            "-- Retrieve an ability by index from the unit."
        ],
        "prefix": "GetAbilityByIndex",
        "description": "Retrieve an ability by index from the unit."
    },
    "CDOTA_BaseNPC:StartGesture": {
        "body": [
            "StartGesture( ${nActivity} )",
            "-- Add the given gesture activity."
        ],
        "prefix": "StartGesture",
        "description": "Add the given gesture activity."
    },
    "DOTA_DAMAGE_FLAG_HPLOSS": {
        "body": [
            "DOTA_DAMAGE_FLAG_HPLOSS"
        ],
        "prefix": "DOTA_DAMAGE_FLAG_HPLOSS",
        "description": "(32) "
    },
    "MODIFIER_EVENT_ON_BREAK_INVISIBILITY": {
        "body": [
            "MODIFIER_EVENT_ON_BREAK_INVISIBILITY"
        ],
        "prefix": "MODIFIER_EVENT_ON_BREAK_INVISIBILITY",
        "description": "(111)  OnBreakInvisibility"
    },
    "PATTACH_OVERHEAD_FOLLOW": {
        "body": [
            "PATTACH_OVERHEAD_FOLLOW"
        ],
        "prefix": "PATTACH_OVERHEAD_FOLLOW",
        "description": "(7) "
    },
    "DOTA_LOADOUT_TYPE_WEATHER": {
        "body": [
            "DOTA_LOADOUT_TYPE_WEATHER"
        ],
        "prefix": "DOTA_LOADOUT_TYPE_WEATHER",
        "description": "(36) "
    },
    "CDOTA_Item:IsStackable": {
        "body": [
            "IsStackable(  )",
            "-- "
        ],
        "prefix": "IsStackable",
        "description": ""
    },
    "DOTA_LOADOUT_TYPE_ARMOR": {
        "body": [
            "DOTA_LOADOUT_TYPE_ARMOR"
        ],
        "prefix": "DOTA_LOADOUT_TYPE_ARMOR",
        "description": "(7) "
    },
    "CSceneEntity:LoadSceneFromString": {
        "body": [
            "LoadSceneFromString( ${string_1}, ${string_2} )",
            "-- given a dummy scene name and a vcd string, load the scene"
        ],
        "prefix": "LoadSceneFromString",
        "description": "given a dummy scene name and a vcd string, load the scene"
    },
    "ReloadMOTD": {
        "body": [
            "ReloadMOTD(  )",
            "-- Reloads the MotD file"
        ],
        "prefix": "ReloadMOTD",
        "description": "Reloads the MotD file"
    },
    "CDOTA_PlayerResource:IncrementLastHitMultikill": {
        "body": [
            "IncrementLastHitMultikill( ${iPlayerID} )",
            "-- "
        ],
        "prefix": "IncrementLastHitMultikill",
        "description": ""
    },
    "CDOTA_Item_Lua:CastFilterResult": {
        "body": [
            "CastFilterResult(  )",
            "-- Determine whether an issued command with no target is valid."
        ],
        "prefix": "CastFilterResult",
        "description": "Determine whether an issued command with no target is valid."
    },
    "CDOTA_BaseNPC_Creature:SetChampion": {
        "body": [
            "SetChampion( ${bIsChampion} )",
            "-- Flag this unit as a champion creature."
        ],
        "prefix": "SetChampion",
        "description": "Flag this unit as a champion creature."
    },
    "DOTA_ITEM_SLOT_1": {
        "body": [
            "DOTA_ITEM_SLOT_1"
        ],
        "prefix": "DOTA_ITEM_SLOT_1",
        "description": "(0) "
    },
    "MODIFIER_PROPERTY_PHYSICAL_ARMOR_BONUS_UNIQUE": {
        "body": [
            "MODIFIER_PROPERTY_PHYSICAL_ARMOR_BONUS_UNIQUE"
        ],
        "prefix": "MODIFIER_PROPERTY_PHYSICAL_ARMOR_BONUS_UNIQUE",
        "description": "(39)  GetModifierPhysicalArmorBonusUnique"
    },
    "CDOTA_PlayerResource:GetEventRankGranted": {
        "body": [
            "GetEventRankGranted( ${iPlayerID} )",
            "-- "
        ],
        "prefix": "GetEventRankGranted",
        "description": ""
    },
    "MODIFIER_STATE_INVULNERABLE": {
        "body": [
            "MODIFIER_STATE_INVULNERABLE"
        ],
        "prefix": "MODIFIER_STATE_INVULNERABLE",
        "description": "(8) "
    },
    "CreateTrigger": {
        "body": [
            "CreateTrigger( ${Vector_1}, ${Vector_2}, ${Vector_3} )",
            "-- CreateTrigger( vecMin, vecMax ) : Creates and returns an AABB trigger"
        ],
        "prefix": "CreateTrigger",
        "description": "CreateTrigger( vecMin, vecMax ) : Creates and returns an AABB trigger"
    },
    "CBaseEntity:SetTeam": {
        "body": [
            "SetTeam( ${iTeamNum} )",
            "-- "
        ],
        "prefix": "SetTeam",
        "description": ""
    },
    "PrecacheEntityListFromTable": {
        "body": [
            "PrecacheEntityListFromTable( ${handle_1}, ${handle_2} )",
            "-- Precache a list of entity KeyValues tables"
        ],
        "prefix": "PrecacheEntityListFromTable",
        "description": "Precache a list of entity KeyValues tables"
    },
    "CDOTABaseAbility:GetCooldownTimeRemaining": {
        "body": [
            "GetCooldownTimeRemaining(  )",
            "-- "
        ],
        "prefix": "GetCooldownTimeRemaining",
        "description": ""
    },
    "CDOTA_PlayerResource:IncrementMisses": {
        "body": [
            "IncrementMisses( ${iPlayerID} )",
            "-- "
        ],
        "prefix": "IncrementMisses",
        "description": ""
    },
    "CDOTA_BaseNPC:IsInvulnerable": {
        "body": [
            "IsInvulnerable(  )",
            "-- "
        ],
        "prefix": "IsInvulnerable",
        "description": ""
    },
    "CDOTA_PlayerResource:GetRespawnSeconds": {
        "body": [
            "GetRespawnSeconds( ${iPlayerID} )",
            "-- "
        ],
        "prefix": "GetRespawnSeconds",
        "description": ""
    },
    "CBaseEntity:GetOrigin": {
        "body": [
            "GetOrigin(  )",
            "-- "
        ],
        "prefix": "GetOrigin",
        "description": ""
    },
    "CreateTempTree": {
        "body": [
            "CreateTempTree( ${Vector_1}, ${float_2} )",
            "-- Create a temporary tree. (vLocation, flDuration)."
        ],
        "prefix": "CreateTempTree",
        "description": "Create a temporary tree. (vLocation, flDuration)."
    },
    "DOTA_HEROPICK_STATE_CM_INTRO": {
        "body": [
            "DOTA_HEROPICK_STATE_CM_INTRO"
        ],
        "prefix": "DOTA_HEROPICK_STATE_CM_INTRO",
        "description": "(5) "
    },
    "CDOTA_BaseNPC:IsAncient": {
        "body": [
            "IsAncient(  )",
            "-- Is this unit an Ancient?"
        ],
        "prefix": "IsAncient",
        "description": "Is this unit an Ancient?"
    },
    "DOTA_GAMERULES_STATE_CUSTOM_GAME_SETUP": {
        "body": [
            "DOTA_GAMERULES_STATE_CUSTOM_GAME_SETUP"
        ],
        "prefix": "DOTA_GAMERULES_STATE_CUSTOM_GAME_SETUP",
        "description": "(2) "
    },
    "DOTA_TEAM_COUNT": {
        "body": [
            "DOTA_TEAM_COUNT"
        ],
        "prefix": "DOTA_TEAM_COUNT",
        "description": "(14) "
    },
    "Convars:GetStr": {
        "body": [
            "GetStr( ${string_1} )",
            "-- GetStr(name) : returns the convar as a string. May return null if no such convar."
        ],
        "prefix": "GetStr",
        "description": "GetStr(name) : returns the convar as a string. May return null if no such convar."
    },
    "CDOTA_PlayerResource:ResetBuybackCostTime": {
        "body": [
            "ResetBuybackCostTime( ${nPlayerID} )",
            "-- "
        ],
        "prefix": "ResetBuybackCostTime",
        "description": ""
    },
    "UF_FAIL_IN_FOW": {
        "body": [
            "UF_FAIL_IN_FOW"
        ],
        "prefix": "UF_FAIL_IN_FOW",
        "description": "(20) "
    },
    "MODIFIER_PROPERTY_MANA_BONUS": {
        "body": [
            "MODIFIER_PROPERTY_MANA_BONUS"
        ],
        "prefix": "MODIFIER_PROPERTY_MANA_BONUS",
        "description": "(52)  GetModifierManaBonus"
    },
    "CDOTA_BaseNPC:SetInitialGoalEntity": {
        "body": [
            "SetInitialGoalEntity( ${hGoal} )",
            "-- Sets the initial waypoint goal for this NPC."
        ],
        "prefix": "SetInitialGoalEntity",
        "description": "Sets the initial waypoint goal for this NPC."
    },
    "DOTA_ABILITY_BEHAVIOR_IGNORE_PSEUDO_QUEUE": {
        "body": [
            "DOTA_ABILITY_BEHAVIOR_IGNORE_PSEUDO_QUEUE"
        ],
        "prefix": "DOTA_ABILITY_BEHAVIOR_IGNORE_PSEUDO_QUEUE",
        "description": "(2097152) "
    },
    "GridNav:WorldToGridPosY": {
        "body": [
            "WorldToGridPosY( ${float_1} )",
            "-- Get the Y index of a given world Y position"
        ],
        "prefix": "WorldToGridPosY",
        "description": "Get the Y index of a given world Y position"
    },
    "ACT_DOTA_ITEM_DROP": {
        "body": [
            "ACT_DOTA_ITEM_DROP"
        ],
        "prefix": "ACT_DOTA_ITEM_DROP",
        "description": "(1697) "
    },
    "CDOTA_Ability_Lua:IsStealable": {
        "body": [
            "IsStealable(  )",
            "-- Returns true if this ability can be stolen by Spell Steal."
        ],
        "prefix": "IsStealable",
        "description": "Returns true if this ability can be stolen by Spell Steal."
    },
    "CDOTABaseAbility:GetStolenActivityModifier": {
        "body": [
            "GetStolenActivityModifier(  )",
            "-- "
        ],
        "prefix": "GetStolenActivityModifier",
        "description": ""
    },
    "DoEntFire": {
        "body": [
            "DoEntFire( ${string_1}, ${string_2}, ${string_3}, ${float_4}, ${handle_5}, ${handle_6} )",
            "-- #EntFire:Generate and entity i/o event"
        ],
        "prefix": "DoEntFire",
        "description": "#EntFire:Generate and entity i/o event"
    },
    "DOTA_LOADOUT_TYPE_BELT": {
        "body": [
            "DOTA_LOADOUT_TYPE_BELT"
        ],
        "prefix": "DOTA_LOADOUT_TYPE_BELT",
        "description": "(8) "
    },
    "PATTACH_MAIN_VIEW": {
        "body": [
            "PATTACH_MAIN_VIEW"
        ],
        "prefix": "PATTACH_MAIN_VIEW",
        "description": "(11) "
    },
    "CDOTA_PlayerResource:GetRawPlayerDamage": {
        "body": [
            "GetRawPlayerDamage( ${iPlayerID} )",
            "-- "
        ],
        "prefix": "GetRawPlayerDamage",
        "description": ""
    },
    "CDOTABaseAbility:GetAbilityType": {
        "body": [
            "GetAbilityType(  )",
            "-- "
        ],
        "prefix": "GetAbilityType",
        "description": ""
    },
    "CDOTA_PlayerResource:GetPlayer": {
        "body": [
            "GetPlayer( ${iPlayerID} )",
            "-- "
        ],
        "prefix": "GetPlayer",
        "description": ""
    },
    "CDOTA_BaseNPC:RemoveGesture": {
        "body": [
            "RemoveGesture( ${nActivity} )",
            "-- Remove the given gesture activity."
        ],
        "prefix": "RemoveGesture",
        "description": "Remove the given gesture activity."
    },
    "CDOTABaseGameMode:GetGoldSoundDisabled": {
        "body": [
            "GetGoldSoundDisabled(  )",
            "-- Turn the sound when gold is acquired off/on."
        ],
        "prefix": "GetGoldSoundDisabled",
        "description": "Turn the sound when gold is acquired off/on."
    },
    "DOTA_UNIT_TARGET_TEAM_CUSTOM": {
        "body": [
            "DOTA_UNIT_TARGET_TEAM_CUSTOM"
        ],
        "prefix": "DOTA_UNIT_TARGET_TEAM_CUSTOM",
        "description": "(4) "
    },
    "DOTA_HEROPICK_STATE_CM_SELECT10": {
        "body": [
            "DOTA_HEROPICK_STATE_CM_SELECT10"
        ],
        "prefix": "DOTA_HEROPICK_STATE_CM_SELECT10",
        "description": "(26) "
    },
    "CScriptPrecacheContext:AddResource": {
        "body": [
            "AddResource( ${string_1} )",
            "-- Precaches a specific resource"
        ],
        "prefix": "AddResource",
        "description": "Precaches a specific resource"
    },
    "DOTA_UNIT_TARGET_BUILDING": {
        "body": [
            "DOTA_UNIT_TARGET_BUILDING"
        ],
        "prefix": "DOTA_UNIT_TARGET_BUILDING",
        "description": "(4) "
    },
    "CDOTABaseAbility:IsActivated": {
        "body": [
            "IsActivated(  )",
            "-- "
        ],
        "prefix": "IsActivated",
        "description": ""
    },
    "CDOTA_BaseNPC:CastAbilityToggle": {
        "body": [
            "CastAbilityToggle( ${hAbility}, ${iPlayerIndex} )",
            "-- Toggle an ability."
        ],
        "prefix": "CastAbilityToggle",
        "description": "Toggle an ability."
    },
    "CDOTA_PlayerResource:GetRoshanKills": {
        "body": [
            "GetRoshanKills( ${iPlayerID} )",
            "-- "
        ],
        "prefix": "GetRoshanKills",
        "description": ""
    },
    "ACT_DOTA_RUN": {
        "body": [
            "ACT_DOTA_RUN"
        ],
        "prefix": "ACT_DOTA_RUN",
        "description": "(1502) "
    },
    "CDOTA_PlayerResource:UpdateTeamSlot": {
        "body": [
            "UpdateTeamSlot( ${iPlayerID}, ${iTeamNumber}, ${desiredSlot} )",
            "-- "
        ],
        "prefix": "UpdateTeamSlot",
        "description": ""
    },
    "CDOTABaseGameMode:SetCameraDistanceOverride": {
        "body": [
            "SetCameraDistanceOverride( ${flCameraDistanceOverride} )",
            "-- Set a different camera distance; dota default is 1134."
        ],
        "prefix": "SetCameraDistanceOverride",
        "description": "Set a different camera distance; dota default is 1134."
    },
    "DOTA_SPEECH_RECIPIENT_TYPE_MAX": {
        "body": [
            "DOTA_SPEECH_RECIPIENT_TYPE_MAX"
        ],
        "prefix": "DOTA_SPEECH_RECIPIENT_TYPE_MAX",
        "description": "(9) "
    },
    "CDOTA_Ability_Lua:GetChannelTime": {
        "body": [
            "GetChannelTime(  )",
            "-- Return the channel time of this ability."
        ],
        "prefix": "GetChannelTime",
        "description": "Return the channel time of this ability."
    },
    "CDOTA_BaseNPC_Creature:SetDisableResistanceGain": {
        "body": [
            "SetDisableResistanceGain( ${flDisableResistanceGain} )",
            "-- Set the disable resistance gained per level on this creature."
        ],
        "prefix": "SetDisableResistanceGain",
        "description": "Set the disable resistance gained per level on this creature."
    },
    "DOTA_HEROPICK_STATE_CM_BAN8": {
        "body": [
            "DOTA_HEROPICK_STATE_CM_BAN8"
        ],
        "prefix": "DOTA_HEROPICK_STATE_CM_BAN8",
        "description": "(14) "
    },
    "DOTA_ModifyGold_PurchaseItem": {
        "body": [
            "DOTA_ModifyGold_PurchaseItem"
        ],
        "prefix": "DOTA_ModifyGold_PurchaseItem",
        "description": "(4) "
    },
    "CEnvEntityMaker:SpawnEntity": {
        "body": [
            "SpawnEntity(  )",
            "-- Create an entity at the location of the maker"
        ],
        "prefix": "SpawnEntity",
        "description": "Create an entity at the location of the maker"
    },
    "MODIFIER_PROPERTY_TOTAL_CONSTANT_BLOCK": {
        "body": [
            "MODIFIER_PROPERTY_TOTAL_CONSTANT_BLOCK"
        ],
        "prefix": "MODIFIER_PROPERTY_TOTAL_CONSTANT_BLOCK",
        "description": "(73)  GetModifierTotal_ConstantBlock"
    },
    "CDOTA_Item:IsPermanent": {
        "body": [
            "IsPermanent(  )",
            "-- "
        ],
        "prefix": "IsPermanent",
        "description": ""
    },
    "DOTA_HEROPICK_STATE_CM_SELECT4": {
        "body": [
            "DOTA_HEROPICK_STATE_CM_SELECT4"
        ],
        "prefix": "DOTA_HEROPICK_STATE_CM_SELECT4",
        "description": "(20) "
    },
    "CScriptParticleManager:CreateParticleForPlayer": {
        "body": [
            "CreateParticleForPlayer( ${string_1}, ${int_2}, ${handle_3}, ${handle_4} )",
            "-- Creates a new particle effect that only plays for the specified player"
        ],
        "prefix": "CreateParticleForPlayer",
        "description": "Creates a new particle effect that only plays for the specified player"
    },
    "MODIFIER_STATE_STUNNED": {
        "body": [
            "MODIFIER_STATE_STUNNED"
        ],
        "prefix": "MODIFIER_STATE_STUNNED",
        "description": "(5) "
    },
    "CDOTA_BaseNPC_Hero:GetTimeUntilRespawn": {
        "body": [
            "GetTimeUntilRespawn(  )",
            "-- "
        ],
        "prefix": "GetTimeUntilRespawn",
        "description": ""
    },
    "DOTA_DAMAGE_FLAG_NO_DAMAGE_MULTIPLIERS": {
        "body": [
            "DOTA_DAMAGE_FLAG_NO_DAMAGE_MULTIPLIERS"
        ],
        "prefix": "DOTA_DAMAGE_FLAG_NO_DAMAGE_MULTIPLIERS",
        "description": "(512) "
    },
    "CDOTA_BaseNPC:HasAbility": {
        "body": [
            "HasAbility( ${pszAbilityName} )",
            "-- See whether this unit has an ability by name."
        ],
        "prefix": "HasAbility",
        "description": "See whether this unit has an ability by name."
    },
    "CDOTA_BaseNPC:IsFort": {
        "body": [
            "IsFort(  )",
            "-- Is this unit an Ancient?"
        ],
        "prefix": "IsFort",
        "description": "Is this unit an Ancient?"
    },
    "CDOTA_BaseNPC:IsBlockDisabled": {
        "body": [
            "IsBlockDisabled(  )",
            "-- "
        ],
        "prefix": "IsBlockDisabled",
        "description": ""
    },
    "CDOTA_BaseNPC:EjectItemFromStash": {
        "body": [
            "EjectItemFromStash( ${hItem} )",
            "-- Drops the selected item out of this unit's stash."
        ],
        "prefix": "EjectItemFromStash",
        "description": "Drops the selected item out of this unit's stash."
    },
    "CDOTA_BaseNPC:RemoveNoDraw": {
        "body": [
            "RemoveNoDraw(  )",
            "-- Remove the no draw flag."
        ],
        "prefix": "RemoveNoDraw",
        "description": "Remove the no draw flag."
    },
    "CDOTA_BaseNPC_Hero:Buyback": {
        "body": [
            "Buyback(  )",
            "-- Spend the gold and buyback with this hero."
        ],
        "prefix": "Buyback",
        "description": "Spend the gold and buyback with this hero."
    },
    "DOTA_HEROPICK_STATE_CD_SELECT7": {
        "body": [
            "DOTA_HEROPICK_STATE_CD_SELECT7"
        ],
        "prefix": "DOTA_HEROPICK_STATE_CD_SELECT7",
        "description": "(45) "
    },
    "CDOTA_BaseNPC_Hero:IncrementAssists": {
        "body": [
            "IncrementAssists( ${iKillerID} )",
            "-- Value is stored in PlayerResource."
        ],
        "prefix": "IncrementAssists",
        "description": "Value is stored in PlayerResource."
    },
    "ACT_DOTA_LOOK_AROUND": {
        "body": [
            "ACT_DOTA_LOOK_AROUND"
        ],
        "prefix": "ACT_DOTA_LOOK_AROUND",
        "description": "(1643) "
    },
    "CDebugOverlayScriptHelper:Circle": {
        "body": [
            "Circle( ${Vector_1}, ${Quaternion_2}, ${float_3}, ${int_4}, ${int_5}, ${int_6}, ${int_7}, ${bool_8}, ${float_9} )",
            "-- Draws a circle. Specify center in world space."
        ],
        "prefix": "Circle",
        "description": "Draws a circle. Specify center in world space."
    },
    "Convars:SetBool": {
        "body": [
            "SetBool( ${string_1}, ${bool_2} )",
            "-- SetBool(name, val) : sets the value of the convar to the bool."
        ],
        "prefix": "SetBool",
        "description": "SetBool(name, val) : sets the value of the convar to the bool."
    },
    "ClearTeamCustomHealthbarColor": {
        "body": [
            "ClearTeamCustomHealthbarColor( ${int_1} )",
            "-- ( teamNumber )"
        ],
        "prefix": "ClearTeamCustomHealthbarColor",
        "description": "( teamNumber )"
    },
    "GetWorldMaxY": {
        "body": [
            "GetWorldMaxY(  )",
            "-- Gets the world's maximum Y position."
        ],
        "prefix": "GetWorldMaxY",
        "description": "Gets the world's maximum Y position."
    },
    "ACT_DOTA_AW_MAGNETIC_FIELD": {
        "body": [
            "ACT_DOTA_AW_MAGNETIC_FIELD"
        ],
        "prefix": "ACT_DOTA_AW_MAGNETIC_FIELD",
        "description": "(1707) "
    },
    "UF_FAIL_CONSIDERED_HERO": {
        "body": [
            "UF_FAIL_CONSIDERED_HERO"
        ],
        "prefix": "UF_FAIL_CONSIDERED_HERO",
        "description": "(4) "
    },
    "CDOTABaseAbility:GetModifierValueBonus": {
        "body": [
            "GetModifierValueBonus(  )",
            "-- "
        ],
        "prefix": "GetModifierValueBonus",
        "description": ""
    },
    "DOTA_ABILITY_BEHAVIOR_NORMAL_WHEN_STOLEN": {
        "body": [
            "DOTA_ABILITY_BEHAVIOR_NORMAL_WHEN_STOLEN"
        ],
        "prefix": "DOTA_ABILITY_BEHAVIOR_NORMAL_WHEN_STOLEN",
        "description": "(67108864) "
    },
    "CBaseEntity:SetAngles": {
        "body": [
            "SetAngles( ${fPitch}, ${fYaw}, ${fRoll} )",
            "-- Set entity pitch, yaw, roll."
        ],
        "prefix": "SetAngles",
        "description": "Set entity pitch, yaw, roll."
    },
    "MODIFIER_PROPERTY_TURN_RATE_PERCENTAGE": {
        "body": [
            "MODIFIER_PROPERTY_TURN_RATE_PERCENTAGE"
        ],
        "prefix": "MODIFIER_PROPERTY_TURN_RATE_PERCENTAGE",
        "description": "(93)  GetModifierTurnRate_Percentage"
    },
    "FireEntityIOInputString": {
        "body": [
            "FireEntityIOInputString( ${ehandle_1}, ${string_2}, ${string_3} )",
            "-- Fire Entity's Action Input with passed String - you own the memory"
        ],
        "prefix": "FireEntityIOInputString",
        "description": "Fire Entity's Action Input with passed String - you own the memory"
    },
    "ACT_DOTA_CAST_ABILITY_2_ES_ROLL_START": {
        "body": [
            "ACT_DOTA_CAST_ABILITY_2_ES_ROLL_START"
        ],
        "prefix": "ACT_DOTA_CAST_ABILITY_2_ES_ROLL_START",
        "description": "(1652) "
    },
    "CBaseEntity:SetParent": {
        "body": [
            "SetParent( ${hParent}, ${pAttachmentname} )",
            "-- Set the parent for this entity."
        ],
        "prefix": "SetParent",
        "description": "Set the parent for this entity."
    },
    "DOTA_UNIT_TARGET_CUSTOM": {
        "body": [
            "DOTA_UNIT_TARGET_CUSTOM"
        ],
        "prefix": "DOTA_UNIT_TARGET_CUSTOM",
        "description": "(128) "
    },
    "CBaseAnimating:GetAttachmentOrigin": {
        "body": [
            "GetAttachmentOrigin( ${iAttachment} )",
            "-- Get the attachement id's origin vector."
        ],
        "prefix": "GetAttachmentOrigin",
        "description": "Get the attachement id's origin vector."
    },
    "CDOTA_BaseNPC:GetCollisionPadding": {
        "body": [
            "GetCollisionPadding(  )",
            "-- Returns the size of the collision padding around the hull."
        ],
        "prefix": "GetCollisionPadding",
        "description": "Returns the size of the collision padding around the hull."
    },
    "CDOTABaseAbility:GetCooldownTime": {
        "body": [
            "GetCooldownTime(  )",
            "-- "
        ],
        "prefix": "GetCooldownTime",
        "description": ""
    },
    "CDOTA_PlayerResource:GetNearbyCreepDeaths": {
        "body": [
            "GetNearbyCreepDeaths( ${iPlayerID} )",
            "-- "
        ],
        "prefix": "GetNearbyCreepDeaths",
        "description": ""
    },
    "CDotaSubquestBase:CompleteSubquest": {
        "body": [
            "CompleteSubquest(  )",
            "-- Mark this subquest complete"
        ],
        "prefix": "CompleteSubquest",
        "description": "Mark this subquest complete"
    },
    "CBasePlayer:Quit": {
        "body": [
            "Quit(  )",
            "-- Quit the game from script."
        ],
        "prefix": "Quit",
        "description": "Quit the game from script."
    },
    "MODIFIER_STATE_UNSELECTABLE": {
        "body": [
            "MODIFIER_STATE_UNSELECTABLE"
        ],
        "prefix": "MODIFIER_STATE_UNSELECTABLE",
        "description": "(14) "
    },
    "CDOTA_PlayerResource:GetPlayerName": {
        "body": [
            "GetPlayerName( ${iPlayerID} )",
            "-- "
        ],
        "prefix": "GetPlayerName",
        "description": ""
    },
    "GridNav:CanFindPath": {
        "body": [
            "CanFindPath( ${Vector_1}, ${Vector_2} )",
            "-- Determine if it is possible to reach the specified end point from the specified start point. bool (vStart, vEnd)"
        ],
        "prefix": "CanFindPath",
        "description": "Determine if it is possible to reach the specified end point from the specified start point. bool (vStart, vEnd)"
    },
    "DOTA_LOADOUT_TYPE_BLINK_EFFECT": {
        "body": [
            "DOTA_LOADOUT_TYPE_BLINK_EFFECT"
        ],
        "prefix": "DOTA_LOADOUT_TYPE_BLINK_EFFECT",
        "description": "(41) "
    },
    "CDOTA_Item_Lua:OnAbilityPhaseInterrupted": {
        "body": [
            "OnAbilityPhaseInterrupted(  )",
            "-- Cast time did not complete successfully."
        ],
        "prefix": "OnAbilityPhaseInterrupted",
        "description": "Cast time did not complete successfully."
    },
    "CDOTA_Item_Lua:OnToggle": {
        "body": [
            "OnToggle(  )",
            "-- Ability is toggled on/off."
        ],
        "prefix": "OnToggle",
        "description": "Ability is toggled on/off."
    },
    "CDOTA_BaseNPC:FindModifierByName": {
        "body": [
            "FindModifierByName( ${pszScriptName} )",
            "-- Return a handle to the modifier of the given name if found, else nil (string Name )"
        ],
        "prefix": "FindModifierByName",
        "description": "Return a handle to the modifier of the given name if found, else nil (string Name )"
    },
    "ACT_DOTA_TELEPORT_REACT": {
        "body": [
            "ACT_DOTA_TELEPORT_REACT"
        ],
        "prefix": "ACT_DOTA_TELEPORT_REACT",
        "description": "(1631) "
    },
    "CDOTA_BaseNPC:SetBaseMaxHealth": {
        "body": [
            "SetBaseMaxHealth( ${flBaseMaxHealth} )",
            "-- Set a new base max health value."
        ],
        "prefix": "SetBaseMaxHealth",
        "description": "Set a new base max health value."
    },
    "CDOTA_BaseNPC:AddNewModifier": {
        "body": [
            "AddNewModifier( ${hCaster}, ${hAbility}, ${pszScriptName}, ${hModifierTable} )",
            "-- Add a modifier to this unit."
        ],
        "prefix": "AddNewModifier",
        "description": "Add a modifier to this unit."
    },
    "MODIFIER_STATE_CANNOT_MISS": {
        "body": [
            "MODIFIER_STATE_CANNOT_MISS"
        ],
        "prefix": "MODIFIER_STATE_CANNOT_MISS",
        "description": "(15) "
    },
    "CSceneEntity:Cancel": {
        "body": [
            "Cancel(  )",
            "-- Cancel scene playback"
        ],
        "prefix": "Cancel",
        "description": "Cancel scene playback"
    },
    "CDOTA_BaseNPC:GetCastPoint": {
        "body": [
            "GetCastPoint( ${bAttack} )",
            "-- "
        ],
        "prefix": "GetCastPoint",
        "description": ""
    },
    "CDOTA_BaseNPC_Creature:CreatureLevelUp": {
        "body": [
            "CreatureLevelUp( ${iLevels} )",
            "-- Level the creature up by the specified number of levels"
        ],
        "prefix": "CreatureLevelUp",
        "description": "Level the creature up by the specified number of levels"
    },
    "CDOTA_Ability_DataDriven:ApplyDataDrivenModifier": {
        "body": [
            "ApplyDataDrivenModifier( ${hCaster}, ${hTarget}, ${pszModifierName}, ${hModifierTable} )",
            "-- Applies a data driven modifier to the target"
        ],
        "prefix": "ApplyDataDrivenModifier",
        "description": "Applies a data driven modifier to the target"
    },
    "CDOTABaseAbility:SetHidden": {
        "body": [
            "SetHidden( ${bHidden} )",
            "-- "
        ],
        "prefix": "SetHidden",
        "description": ""
    },
    "CDOTABaseGameMode:GetRecommendedItemsDisabled": {
        "body": [
            "GetRecommendedItemsDisabled(  )",
            "-- Turn the panel for showing recommended items at the shop off/on."
        ],
        "prefix": "GetRecommendedItemsDisabled",
        "description": "Turn the panel for showing recommended items at the shop off/on."
    },
    "UF_FAIL_MAGIC_IMMUNE_ALLY": {
        "body": [
            "UF_FAIL_MAGIC_IMMUNE_ALLY"
        ],
        "prefix": "UF_FAIL_MAGIC_IMMUNE_ALLY",
        "description": "(17) "
    },
    "CDOTA_PlayerResource:GetDamageDoneToHero": {
        "body": [
            "GetDamageDoneToHero( ${iPlayerID}, ${iVictimID} )",
            "-- "
        ],
        "prefix": "GetDamageDoneToHero",
        "description": ""
    },
    "CDOTABaseAbility:PayManaCost": {
        "body": [
            "PayManaCost(  )",
            "-- "
        ],
        "prefix": "PayManaCost",
        "description": ""
    },
    "ACT_DOTA_NIAN_PIN_LOOP": {
        "body": [
            "ACT_DOTA_NIAN_PIN_LOOP"
        ],
        "prefix": "ACT_DOTA_NIAN_PIN_LOOP",
        "description": "(1656) "
    },
    "DoUniqueString": {
        "body": [
            "DoUniqueString( ${string_1} )",
            "-- #UniqueString:Generate a string guaranteed to be unique across the life of the script VM, with an optional root string. Useful for adding data to tables when not sure what keys are already in use in that table."
        ],
        "prefix": "DoUniqueString",
        "description": "#UniqueString:Generate a string guaranteed to be unique across the life of the script VM, with an optional root string. Useful for adding data to tables when not sure what keys are already in use in that table."
    },
    "ACT_DOTA_CAPTURE_RARE": {
        "body": [
            "ACT_DOTA_CAPTURE_RARE"
        ],
        "prefix": "ACT_DOTA_CAPTURE_RARE",
        "description": "(1706) "
    },
    "CDOTA_Ability_Lua:IsRefreshable": {
        "body": [
            "IsRefreshable(  )",
            "-- Returns true if this ability is refreshed by Refresher Orb."
        ],
        "prefix": "IsRefreshable",
        "description": "Returns true if this ability is refreshed by Refresher Orb."
    },
    "CEntityInstance:GetEntityIndex": {
        "body": [
            "GetEntityIndex(  )",
            "-- "
        ],
        "prefix": "GetEntityIndex",
        "description": ""
    },
    "CDOTA_BaseNPC_Hero:SetPrimaryAttribute": {
        "body": [
            "SetPrimaryAttribute( ${nPrimaryAttribute} )",
            "-- Set this hero's primary attribute value."
        ],
        "prefix": "SetPrimaryAttribute",
        "description": "Set this hero's primary attribute value."
    },
    "CDOTA_BaseNPC_Hero:CanEarnGold": {
        "body": [
            "CanEarnGold(  )",
            "-- Returns boolean value result of buyback gold limit time less than game time."
        ],
        "prefix": "CanEarnGold",
        "description": "Returns boolean value result of buyback gold limit time less than game time."
    },
    "CDOTA_BaseNPC_Hero:GetMostRecentDamageTime": {
        "body": [
            "GetMostRecentDamageTime(  )",
            "-- "
        ],
        "prefix": "GetMostRecentDamageTime",
        "description": ""
    },
    "DOTA_ModifyGold_SelectionPenalty": {
        "body": [
            "DOTA_ModifyGold_SelectionPenalty"
        ],
        "prefix": "DOTA_ModifyGold_SelectionPenalty",
        "description": "(9) "
    },
    "ACT_DOTA_UNDYING_TOMBSTONE": {
        "body": [
            "ACT_DOTA_UNDYING_TOMBSTONE"
        ],
        "prefix": "ACT_DOTA_UNDYING_TOMBSTONE",
        "description": "(1668) "
    },
    "CDOTA_BaseNPC:SetUnitName": {
        "body": [
            "SetUnitName( ${pName} )",
            "-- "
        ],
        "prefix": "SetUnitName",
        "description": ""
    },
    "DOTA_UNIT_TARGET_FLAG_MANA_ONLY": {
        "body": [
            "DOTA_UNIT_TARGET_FLAG_MANA_ONLY"
        ],
        "prefix": "DOTA_UNIT_TARGET_FLAG_MANA_ONLY",
        "description": "(32768) "
    },
    "CDOTABaseGameMode:SetBotThinkingEnabled": {
        "body": [
            "SetBotThinkingEnabled( ${bEnabled} )",
            "-- Enables/Disables bots in custom games. Note: this will only work with default heroes in the dota map."
        ],
        "prefix": "SetBotThinkingEnabled",
        "description": "Enables/Disables bots in custom games. Note: this will only work with default heroes in the dota map."
    },
    "ACT_DOTA_CHANNEL_END_ABILITY_6": {
        "body": [
            "ACT_DOTA_CHANNEL_END_ABILITY_6"
        ],
        "prefix": "ACT_DOTA_CHANNEL_END_ABILITY_6",
        "description": "(1531) "
    },
    "CDOTA_PlayerResource:GetHeroDamageTaken": {
        "body": [
            "GetHeroDamageTaken( ${iPlayerID}, ${bTotal} )",
            "-- "
        ],
        "prefix": "GetHeroDamageTaken",
        "description": ""
    },
    "CDebugOverlayScriptHelper:Text": {
        "body": [
            "Text( ${Vector_1}, ${int_2}, ${string_3}, ${float_4}, ${int_5}, ${int_6}, ${int_7}, ${int_8}, ${float_9} )",
            "-- Draws 2D text. Specify origin in world space."
        ],
        "prefix": "Text",
        "description": "Draws 2D text. Specify origin in world space."
    },
    "CDOTABaseAbility:ToggleAbility": {
        "body": [
            "ToggleAbility(  )",
            "-- "
        ],
        "prefix": "ToggleAbility",
        "description": ""
    },
    "FireEntityIOInputVec": {
        "body": [
            "FireEntityIOInputVec( ${ehandle_1}, ${string_2}, ${Vector_3} )",
            "-- Fire Entity's Action Input with passed Vector - you own the memory"
        ],
        "prefix": "FireEntityIOInputVec",
        "description": "Fire Entity's Action Input with passed Vector - you own the memory"
    },
    "DOTA_MINIMAP_EVENT_BASE_GLYPHED": {
        "body": [
            "DOTA_MINIMAP_EVENT_BASE_GLYPHED"
        ],
        "prefix": "DOTA_MINIMAP_EVENT_BASE_GLYPHED",
        "description": "(8) "
    },
    "CDOTA_PlayerResource:IncrementDenies": {
        "body": [
            "IncrementDenies( ${iPlayerID} )",
            "-- "
        ],
        "prefix": "IncrementDenies",
        "description": ""
    },
    "CDebugOverlayScriptHelper:Axis": {
        "body": [
            "Axis( ${Vector_1}, ${Quaternion_2}, ${float_3}, ${bool_4}, ${float_5} )",
            "-- Draws an axis. Specify origin + orientation in world space."
        ],
        "prefix": "Axis",
        "description": "Draws an axis. Specify origin + orientation in world space."
    },
    "MODIFIER_PROPERTY_ATTACKSPEED_BONUS_CONSTANT_SECONDARY": {
        "body": [
            "MODIFIER_PROPERTY_ATTACKSPEED_BONUS_CONSTANT_SECONDARY"
        ],
        "prefix": "MODIFIER_PROPERTY_ATTACKSPEED_BONUS_CONSTANT_SECONDARY",
        "description": "(21)  GetModifierAttackSpeedBonus_Constant_Secondary"
    },
    "MODIFIER_PROPERTY_PREATTACK_BONUS_DAMAGE": {
        "body": [
            "MODIFIER_PROPERTY_PREATTACK_BONUS_DAMAGE"
        ],
        "prefix": "MODIFIER_PROPERTY_PREATTACK_BONUS_DAMAGE",
        "description": "(0)  GetModifierPreAttack_BonusDamage"
    },
    "CDOTA_Item_Lua:OnChannelFinish": {
        "body": [
            "OnChannelFinish( ${bInterrupted} )",
            "-- (bool bInterrupted) Channel finished."
        ],
        "prefix": "OnChannelFinish",
        "description": "(bool bInterrupted) Channel finished."
    },
    "CDOTA_Item:IsMuted": {
        "body": [
            "IsMuted(  )",
            "-- "
        ],
        "prefix": "IsMuted",
        "description": ""
    },
    "CDOTABaseAbility:MarkAbilityButtonDirty": {
        "body": [
            "MarkAbilityButtonDirty(  )",
            "-- Mark the ability button for this ability as needing a refresh."
        ],
        "prefix": "MarkAbilityButtonDirty",
        "description": "Mark the ability button for this ability as needing a refresh."
    },
    "Time": {
        "body": [
            "Time(  )",
            "-- Get the current server time"
        ],
        "prefix": "Time",
        "description": "Get the current server time"
    },
    "CEnvProjectedTexture:SetVolumetrics": {
        "body": [
            "SetVolumetrics( ${bOn}, ${flIntensity}, ${flNoise}, ${nPlanes}, ${flPlaneOffset} )",
            "-- Turn on/off light volumetrics: bool bOn, float flIntensity, float flNoise, int nPlanes, float flPlaneOffset"
        ],
        "prefix": "SetVolumetrics",
        "description": "Turn on/off light volumetrics: bool bOn, float flIntensity, float flNoise, int nPlanes, float flPlaneOffset"
    },
    "CEntityInstance:GetPrivateScriptScope": {
        "body": [
            "GetPrivateScriptScope(  )",
            "-- Retrieve the private per-instance script-side data associated with an entity"
        ],
        "prefix": "GetPrivateScriptScope",
        "description": "Retrieve the private per-instance script-side data associated with an entity"
    },
    "FindClearSpaceForUnit": {
        "body": [
            "FindClearSpaceForUnit( ${handle_1}, ${Vector_2}, ${bool_3} )",
            "-- Place a unit somewhere not already occupied."
        ],
        "prefix": "FindClearSpaceForUnit",
        "description": "Place a unit somewhere not already occupied."
    },
    "DAMAGE_TYPE_HP_REMOVAL": {
        "body": [
            "DAMAGE_TYPE_HP_REMOVAL"
        ],
        "prefix": "DAMAGE_TYPE_HP_REMOVAL",
        "description": "(8) "
    },
    "CDOTA_BaseNPC_Creature:SetHPRegenGain": {
        "body": [
            "SetHPRegenGain( ${flHPRegenGain} )",
            "-- Set the hit points regen gained per level on this creature."
        ],
        "prefix": "SetHPRegenGain",
        "description": "Set the hit points regen gained per level on this creature."
    },
    "ACT_DOTA_IDLE_SLEEPING_END": {
        "body": [
            "ACT_DOTA_IDLE_SLEEPING_END"
        ],
        "prefix": "ACT_DOTA_IDLE_SLEEPING_END",
        "description": "(1639) "
    },
    "CDOTA_BaseNPC:MakeVisibleDueToAttack": {
        "body": [
            "MakeVisibleDueToAttack( ${iTeam} )",
            "-- "
        ],
        "prefix": "MakeVisibleDueToAttack",
        "description": ""
    },
    "DOTA_ModifyXP_RoshanKill": {
        "body": [
            "DOTA_ModifyXP_RoshanKill"
        ],
        "prefix": "DOTA_ModifyXP_RoshanKill",
        "description": "(3) "
    },
    "ACT_DOTA_SWIM_IDLE": {
        "body": [
            "ACT_DOTA_SWIM_IDLE"
        ],
        "prefix": "ACT_DOTA_SWIM_IDLE",
        "description": "(1688) "
    },
    "cvar_getf": {
        "body": [
            "cvar_getf( ${string_1} )",
            "-- Gets the value of the given cvar, as a float."
        ],
        "prefix": "cvar_getf",
        "description": "Gets the value of the given cvar, as a float."
    },
    "CDOTA_BaseNPC:CastAbilityImmediately": {
        "body": [
            "CastAbilityImmediately( ${hAbility}, ${iPlayerIndex} )",
            "-- Cast an ability immediately."
        ],
        "prefix": "CastAbilityImmediately",
        "description": "Cast an ability immediately."
    },
    "ACT_DOTA_CAST_LIFE_BREAK_START": {
        "body": [
            "ACT_DOTA_CAST_LIFE_BREAK_START"
        ],
        "prefix": "ACT_DOTA_CAST_LIFE_BREAK_START",
        "description": "(1563) "
    },
    "CDOTA_Item:GetPurchaser": {
        "body": [
            "GetPurchaser(  )",
            "-- Get the purchaser for this item."
        ],
        "prefix": "GetPurchaser",
        "description": "Get the purchaser for this item."
    },
    "DAMAGE_TYPE_PURE": {
        "body": [
            "DAMAGE_TYPE_PURE"
        ],
        "prefix": "DAMAGE_TYPE_PURE",
        "description": "(4) "
    },
    "MODIFIER_PROPERTY_UNIT_STATS_NEEDS_REFRESH": {
        "body": [
            "MODIFIER_PROPERTY_UNIT_STATS_NEEDS_REFRESH"
        ],
        "prefix": "MODIFIER_PROPERTY_UNIT_STATS_NEEDS_REFRESH",
        "description": "(96)  GetModifierUnitStatsNeedsRefresh"
    },
    "CInfoData:QueryInt": {
        "body": [
            "QueryInt( ${tok}, ${nDefault} )",
            "-- Query int data for this key"
        ],
        "prefix": "QueryInt",
        "description": "Query int data for this key"
    },
    "CDebugOverlayScriptHelper:Triangle": {
        "body": [
            "Triangle( ${Vector_1}, ${Vector_2}, ${Vector_3}, ${int_4}, ${int_5}, ${int_6}, ${int_7}, ${bool_8}, ${float_9} )",
            "-- Draws a filled triangle. Specify vertices in world space."
        ],
        "prefix": "Triangle",
        "description": "Draws a filled triangle. Specify vertices in world space."
    },
    "CDOTA_BaseNPC_Hero:GetBuybackCooldownTime": {
        "body": [
            "GetBuybackCooldownTime(  )",
            "-- Return float value for the amount of time left on cooldown for this hero's buyback."
        ],
        "prefix": "GetBuybackCooldownTime",
        "description": "Return float value for the amount of time left on cooldown for this hero's buyback."
    },
    "MODIFIER_PROPERTY_REFLECT_SPELL": {
        "body": [
            "MODIFIER_PROPERTY_REFLECT_SPELL"
        ],
        "prefix": "MODIFIER_PROPERTY_REFLECT_SPELL",
        "description": "(78)  GetReflectSpell"
    },
    "DOTA_ModifyXP_CreepKill": {
        "body": [
            "DOTA_ModifyXP_CreepKill"
        ],
        "prefix": "DOTA_ModifyXP_CreepKill",
        "description": "(2) "
    },
    "ACT_DOTA_CAST_GHOST_SHIP": {
        "body": [
            "ACT_DOTA_CAST_GHOST_SHIP"
        ],
        "prefix": "ACT_DOTA_CAST_GHOST_SHIP",
        "description": "(1708) "
    },
    "MODIFIER_STATE_OUT_OF_GAME": {
        "body": [
            "MODIFIER_STATE_OUT_OF_GAME"
        ],
        "prefix": "MODIFIER_STATE_OUT_OF_GAME",
        "description": "(30) "
    },
    "CBaseEntity:GetMoveParent": {
        "body": [
            "GetMoveParent(  )",
            "-- If in hierarchy, retrieves the entity's parent."
        ],
        "prefix": "GetMoveParent",
        "description": "If in hierarchy, retrieves the entity's parent."
    },
    "ACT_DOTA_CHANNEL_END_ABILITY_2": {
        "body": [
            "ACT_DOTA_CHANNEL_END_ABILITY_2"
        ],
        "prefix": "ACT_DOTA_CHANNEL_END_ABILITY_2",
        "description": "(1527) "
    },
    "MODIFIER_PROPERTY_MAGICAL_RESISTANCE_ITEM_UNIQUE": {
        "body": [
            "MODIFIER_PROPERTY_MAGICAL_RESISTANCE_ITEM_UNIQUE"
        ],
        "prefix": "MODIFIER_PROPERTY_MAGICAL_RESISTANCE_ITEM_UNIQUE",
        "description": "(42)  GetModifierMagicalResistanceItemUnique"
    },
    "CDOTA_BaseNPC:SetBaseMagicalResistanceValue": {
        "body": [
            "SetBaseMagicalResistanceValue( ${flMagicalResistanceValue} )",
            "-- Sets base magical armor value."
        ],
        "prefix": "SetBaseMagicalResistanceValue",
        "description": "Sets base magical armor value."
    },
    "CDOTA_BaseNPC:GetHullRadius": {
        "body": [
            "GetHullRadius(  )",
            "-- Get the collision hull radius of this NPC."
        ],
        "prefix": "GetHullRadius",
        "description": "Get the collision hull radius of this NPC."
    },
    "CDOTA_BaseNPC:GetMainControllingPlayer": {
        "body": [
            "GetMainControllingPlayer(  )",
            "-- Returns the player ID of the controlling player."
        ],
        "prefix": "GetMainControllingPlayer",
        "description": "Returns the player ID of the controlling player."
    },
    "CDOTA_Item_Lua:OnStolen": {
        "body": [
            "OnStolen( ${hSourceAbility} )",
            "-- ( HSCRIPT hAbility ) Special behavior when stolen by Spell Steal."
        ],
        "prefix": "OnStolen",
        "description": "( HSCRIPT hAbility ) Special behavior when stolen by Spell Steal."
    },
    "ACT_DOTA_FRUSTRATION": {
        "body": [
            "ACT_DOTA_FRUSTRATION"
        ],
        "prefix": "ACT_DOTA_FRUSTRATION",
        "description": "(1630) "
    },
    "CDOTA_BaseNPC:HasScepter": {
        "body": [
            "HasScepter(  )",
            "-- "
        ],
        "prefix": "HasScepter",
        "description": ""
    },
    "CDOTA_PlayerResource:SetHasRepicked": {
        "body": [
            "SetHasRepicked( ${iPlayerID} )",
            "-- "
        ],
        "prefix": "SetHasRepicked",
        "description": ""
    },
    "CDOTA_BaseNPC:MoveToNPC": {
        "body": [
            "MoveToNPC( ${hNPC} )",
            "-- Move to follow a unit."
        ],
        "prefix": "MoveToNPC",
        "description": "Move to follow a unit."
    },
    "CPhysicsProp:EnableMotion": {
        "body": [
            "EnableMotion(  )",
            "-- Enable motion for the prop"
        ],
        "prefix": "EnableMotion",
        "description": "Enable motion for the prop"
    },
    "DoCleaveAttack": {
        "body": [
            "DoCleaveAttack( ${handle_1}, ${handle_2}, ${handle_3}, ${float_4}, ${float_5}, ${string_6} )",
            "-- (hAttacker, hTarget, hAbility, fDamage, fRadius, effectName)"
        ],
        "prefix": "DoCleaveAttack",
        "description": "(hAttacker, hTarget, hAbility, fDamage, fRadius, effectName)"
    },
    "CBaseEntity:Attribute_GetIntValue": {
        "body": [
            "Attribute_GetIntValue( ${pName}, ${nDefault} )",
            "-- Get int value for an entity attribute."
        ],
        "prefix": "Attribute_GetIntValue",
        "description": "Get int value for an entity attribute."
    },
    "DOTA_HEROPICK_STATE_RD_SELECT": {
        "body": [
            "DOTA_HEROPICK_STATE_RD_SELECT"
        ],
        "prefix": "DOTA_HEROPICK_STATE_RD_SELECT",
        "description": "(4) "
    },
    "LimitPathingSearchDepth": {
        "body": [
            "LimitPathingSearchDepth( ${float_1} )",
            "-- Set the limit on the pathfinding search space."
        ],
        "prefix": "LimitPathingSearchDepth",
        "description": "Set the limit on the pathfinding search space."
    },
    "MODIFIER_EVENT_ON_ABILITY_START": {
        "body": [
            "MODIFIER_EVENT_ON_ABILITY_START"
        ],
        "prefix": "MODIFIER_EVENT_ON_ABILITY_START",
        "description": "(108)  OnAbilityStart"
    },
    "MODIFIER_EVENT_ON_TELEPORTING": {
        "body": [
            "MODIFIER_EVENT_ON_TELEPORTING"
        ],
        "prefix": "MODIFIER_EVENT_ON_TELEPORTING",
        "description": "(122)  OnTeleporting"
    },
    "CDOTA_BaseNPC_Hero:GetManaRegen": {
        "body": [
            "GetManaRegen(  )",
            "-- Hero mana regen is affected by attributes."
        ],
        "prefix": "GetManaRegen",
        "description": "Hero mana regen is affected by attributes."
    },
    "CDOTA_BaseNPC:SetAggroTarget": {
        "body": [
            "SetAggroTarget( ${hAggroTarget} )",
            "-- Set this unit's aggro target to a specified unit."
        ],
        "prefix": "SetAggroTarget",
        "description": "Set this unit's aggro target to a specified unit."
    },
    "DOTA_LOADOUT_TYPE_HEAD": {
        "body": [
            "DOTA_LOADOUT_TYPE_HEAD"
        ],
        "prefix": "DOTA_LOADOUT_TYPE_HEAD",
        "description": "(4) "
    },
    "ACT_DOTA_TELEPORT_END_REACT": {
        "body": [
            "ACT_DOTA_TELEPORT_END_REACT"
        ],
        "prefix": "ACT_DOTA_TELEPORT_END_REACT",
        "description": "(1632) "
    },
    "CEntities:First": {
        "body": [
            "First(  )",
            "-- Begin an iteration over the list of entities"
        ],
        "prefix": "First",
        "description": "Begin an iteration over the list of entities"
    },
    "CBaseEntity:StopSound": {
        "body": [
            "StopSound( ${soundname} )",
            "-- Stops a named sound playing from this entity."
        ],
        "prefix": "StopSound",
        "description": "Stops a named sound playing from this entity."
    },
    "CDOTA_PlayerResource:GetLastHitMultikill": {
        "body": [
            "GetLastHitMultikill( ${iPlayerID} )",
            "-- "
        ],
        "prefix": "GetLastHitMultikill",
        "description": ""
    },
    "CDOTA_BaseNPC_Hero:WillReincarnate": {
        "body": [
            "WillReincarnate(  )",
            "-- "
        ],
        "prefix": "WillReincarnate",
        "description": ""
    },
    "CBaseEntity:RemoveEffects": {
        "body": [
            "RemoveEffects( ${nFlags} )",
            "-- RemoveEffects( int ): Removes the render effect flag."
        ],
        "prefix": "RemoveEffects",
        "description": "RemoveEffects( int ): Removes the render effect flag."
    },
    "DOTA_TEAM_FIRST": {
        "body": [
            "DOTA_TEAM_FIRST"
        ],
        "prefix": "DOTA_TEAM_FIRST",
        "description": "(2) "
    },
    "CDOTABaseGameMode:SetUseCustomHeroLevels": {
        "body": [
            "SetUseCustomHeroLevels( ${bEnabled} )",
            "-- Turn on custom-defined XP values for hero level ups.  The table should be defined before switching this on."
        ],
        "prefix": "SetUseCustomHeroLevels",
        "description": "Turn on custom-defined XP values for hero level ups.  The table should be defined before switching this on."
    },
    "CDOTA_CustomUIManager:DynamicHud_Destroy": {
        "body": [
            "DynamicHud_Destroy( ${int_1}, ${string_2} )",
            "-- Destroy a custom hud element ( int PlayerID /*-1 means everyone*/, string ElementID )"
        ],
        "prefix": "DynamicHud_Destroy",
        "description": "Destroy a custom hud element ( int PlayerID /*-1 means everyone*/, string ElementID )"
    },
    "CDebugOverlayScriptHelper:Cone": {
        "body": [
            "Cone( ${Vector_1}, ${Vector_2}, ${float_3}, ${float_4}, ${int_5}, ${int_6}, ${int_7}, ${int_8}, ${bool_9}, ${float_10} )",
            "-- Draws a wireframe cone. Specify endpoint and direction in world space."
        ],
        "prefix": "Cone",
        "description": "Draws a wireframe cone. Specify endpoint and direction in world space."
    },
    "SetRenderingEnabled": {
        "body": [
            "SetRenderingEnabled( ${ehandle_1}, ${bool_2} )",
            "-- Set rendering on/off for an ehandle"
        ],
        "prefix": "SetRenderingEnabled",
        "description": "Set rendering on/off for an ehandle"
    },
    "CDOTA_PlayerResource:IsBroadcaster": {
        "body": [
            "IsBroadcaster( ${iPlayerID} )",
            "-- "
        ],
        "prefix": "IsBroadcaster",
        "description": ""
    },
    "CDOTA_BaseNPC:AddSpeechBubble": {
        "body": [
            "AddSpeechBubble( ${iBubble}, ${pszSpeech}, ${flDuration}, ${unOffsetX}, ${unOffsetY} )",
            "-- Add a speech bubble(1-4 live at a time) to this NPC."
        ],
        "prefix": "AddSpeechBubble",
        "description": "Add a speech bubble(1-4 live at a time) to this NPC."
    },
    "DOTA_LOADOUT_TYPE_GLOVES": {
        "body": [
            "DOTA_LOADOUT_TYPE_GLOVES"
        ],
        "prefix": "DOTA_LOADOUT_TYPE_GLOVES",
        "description": "(12) "
    },
    "CDOTABaseGameMode:SetUnseenFogOfWarEnabled": {
        "body": [
            "SetUnseenFogOfWarEnabled( ${bEnabled} )",
            "-- Enable or disable unseen fog of war. When enabled parts of the map the player has never seen will be completely hidden by fog of war."
        ],
        "prefix": "SetUnseenFogOfWarEnabled",
        "description": "Enable or disable unseen fog of war. When enabled parts of the map the player has never seen will be completely hidden by fog of war."
    },
    "CBaseEntity:OverrideFriction": {
        "body": [
            "OverrideFriction( ${duration}, ${friction} )",
            "-- Takes duration, value for a temporary override."
        ],
        "prefix": "OverrideFriction",
        "description": "Takes duration, value for a temporary override."
    },
    "CDOTABaseAbility:GetCastPoint": {
        "body": [
            "GetCastPoint(  )",
            "-- "
        ],
        "prefix": "GetCastPoint",
        "description": ""
    },
    "CBodyComponent:SequenceDuration": {
        "body": [
            "SequenceDuration( ${string_1} )",
            "-- Returns the duration in seconds of the specified sequence"
        ],
        "prefix": "SequenceDuration",
        "description": "Returns the duration in seconds of the specified sequence"
    },
    "CDOTA_BaseNPC:RemoveModifierByName": {
        "body": [
            "RemoveModifierByName( ${pszScriptName} )",
            "-- Removes a modifier."
        ],
        "prefix": "RemoveModifierByName",
        "description": "Removes a modifier."
    },
    "UF_FAIL_CUSTOM": {
        "body": [
            "UF_FAIL_CUSTOM"
        ],
        "prefix": "UF_FAIL_CUSTOM",
        "description": "(24) "
    },
    "CDOTA_BaseNPC:ManageModelChanges": {
        "body": [
            "ManageModelChanges(  )",
            "-- "
        ],
        "prefix": "ManageModelChanges",
        "description": ""
    },
    "UF_FAIL_DISABLE_HELP": {
        "body": [
            "UF_FAIL_DISABLE_HELP"
        ],
        "prefix": "UF_FAIL_DISABLE_HELP",
        "description": "(26) "
    },
    "CDOTA_BaseNPC:IsUnableToMiss": {
        "body": [
            "IsUnableToMiss(  )",
            "-- "
        ],
        "prefix": "IsUnableToMiss",
        "description": ""
    },
    "CBaseFlex:GetSceneByIndex": {
        "body": [
            "GetSceneByIndex( ${index} )",
            "-- Returns the instance of the scene entity at the specified index."
        ],
        "prefix": "GetSceneByIndex",
        "description": "Returns the instance of the scene entity at the specified index."
    },
    "CDOTA_BaseNPC:GetCurrentActiveAbility": {
        "body": [
            "GetCurrentActiveAbility(  )",
            "-- Get the ability this unit is currently casting."
        ],
        "prefix": "GetCurrentActiveAbility",
        "description": "Get the ability this unit is currently casting."
    },
    "CDOTA_BaseNPC:SetBaseDamageMax": {
        "body": [
            "SetBaseDamageMax( ${nMax} )",
            "-- Sets the maximum base damage."
        ],
        "prefix": "SetBaseDamageMax",
        "description": "Sets the maximum base damage."
    },
    "CDOTA_BaseNPC_Hero:SetGold": {
        "body": [
            "SetGold( ${iGold}, ${bReliable} )",
            "-- Sets the gold amount for the player owning this hero"
        ],
        "prefix": "SetGold",
        "description": "Sets the gold amount for the player owning this hero"
    },
    "DOTA_UNIT_TARGET_FLAG_FOW_VISIBLE": {
        "body": [
            "DOTA_UNIT_TARGET_FLAG_FOW_VISIBLE"
        ],
        "prefix": "DOTA_UNIT_TARGET_FLAG_FOW_VISIBLE",
        "description": "(128) "
    },
    "CBaseEntity:GetBounds": {
        "body": [
            "GetBounds(  )",
            "-- Get a table containing the 'Mins' & 'Maxs' vector bounds, centered on object."
        ],
        "prefix": "GetBounds",
        "description": "Get a table containing the 'Mins' & 'Maxs' vector bounds, centered on object."
    },
    "CDOTA_Ability_Lua:OnAbilityPhaseStart": {
        "body": [
            "OnAbilityPhaseStart(  )",
            "-- Cast time begins (return true for successful cast)."
        ],
        "prefix": "OnAbilityPhaseStart",
        "description": "Cast time begins (return true for successful cast)."
    },
    "DOTA_DEFAULT_MAX_TEAM": {
        "body": [
            "DOTA_DEFAULT_MAX_TEAM"
        ],
        "prefix": "DOTA_DEFAULT_MAX_TEAM",
        "description": "(5)  Default number of players per team."
    },
    "ACT_DOTA_COLD_FEET": {
        "body": [
            "ACT_DOTA_COLD_FEET"
        ],
        "prefix": "ACT_DOTA_COLD_FEET",
        "description": "(1671) "
    },
    "DOTA_MAX_TEAM_PLAYERS": {
        "body": [
            "DOTA_MAX_TEAM_PLAYERS"
        ],
        "prefix": "DOTA_MAX_TEAM_PLAYERS",
        "description": "(24)  Max number of non-spectator players supported."
    },
    "CDOTA_Ability_Lua:GetCustomCastError": {
        "body": [
            "GetCustomCastError(  )",
            "-- Return the error string of a failed command with no target."
        ],
        "prefix": "GetCustomCastError",
        "description": "Return the error string of a failed command with no target."
    },
    "MODIFIER_PROPERTY_DEATHGOLDCOST": {
        "body": [
            "MODIFIER_PROPERTY_DEATHGOLDCOST"
        ],
        "prefix": "MODIFIER_PROPERTY_DEATHGOLDCOST",
        "description": "(69)  GetModifierConstantDeathGoldCost"
    },
    "CEnvEntityMaker:SpawnEntityAtLocation": {
        "body": [
            "SpawnEntityAtLocation( ${vecAlternateOrigin}, ${vecAlternateAngles} )",
            "-- Create an entity at a specified location and orientaton, orientation is Euler angle in degrees (pitch, yaw, roll)"
        ],
        "prefix": "SpawnEntityAtLocation",
        "description": "Create an entity at a specified location and orientaton, orientation is Euler angle in degrees (pitch, yaw, roll)"
    },
    "CDOTA_Buff:SetDuration": {
        "body": [
            "SetDuration( ${flDuration}, ${bInformClient} )",
            "-- (flTime, bInformClients)"
        ],
        "prefix": "SetDuration",
        "description": "(flTime, bInformClients)"
    },
    "CDOTA_Ability_Lua:OnHeroCalculateStatBonus": {
        "body": [
            "OnHeroCalculateStatBonus(  )",
            "-- Caster (hero only) gained a level, skilled an ability, or received a new stat bonus."
        ],
        "prefix": "OnHeroCalculateStatBonus",
        "description": "Caster (hero only) gained a level, skilled an ability, or received a new stat bonus."
    },
    "MODIFIER_EVENT_ON_DEATH": {
        "body": [
            "MODIFIER_EVENT_ON_DEATH"
        ],
        "prefix": "MODIFIER_EVENT_ON_DEATH",
        "description": "(119)  OnDeath"
    },
    "CDOTA_BaseNPC:MakePhantomBlocker": {
        "body": [
            "MakePhantomBlocker(  )",
            "-- "
        ],
        "prefix": "MakePhantomBlocker",
        "description": ""
    },
    "DOTA_MUSIC_STATUS_DEAD": {
        "body": [
            "DOTA_MUSIC_STATUS_DEAD"
        ],
        "prefix": "DOTA_MUSIC_STATUS_DEAD",
        "description": "(4) "
    },
    "CDOTA_BaseNPC:MakeVisibleToTeam": {
        "body": [
            "MakeVisibleToTeam( ${iTeam}, ${flDuration} )",
            "-- "
        ],
        "prefix": "MakeVisibleToTeam",
        "description": ""
    },
    "IsServer": {
        "body": [
            "IsServer(  )",
            "-- Returns true if this is lua running from the server.dll."
        ],
        "prefix": "IsServer",
        "description": "Returns true if this is lua running from the server.dll."
    },
    "DOTA_ABILITY_BEHAVIOR_OPTIONAL_UNIT_TARGET": {
        "body": [
            "DOTA_ABILITY_BEHAVIOR_OPTIONAL_UNIT_TARGET"
        ],
        "prefix": "DOTA_ABILITY_BEHAVIOR_OPTIONAL_UNIT_TARGET",
        "description": "(8192) "
    },
    "CDOTA_PlayerResource:GetTotalEarnedXP": {
        "body": [
            "GetTotalEarnedXP( ${iPlayerID} )",
            "-- "
        ],
        "prefix": "GetTotalEarnedXP",
        "description": ""
    },
    "CDOTA_Modifier_Lua_Motion_Both:UpdateVerticalMotion": {
        "body": [
            "UpdateVerticalMotion( ${me}, ${dt} )",
            "-- Perform any motion from the given interval on the NPC."
        ],
        "prefix": "UpdateVerticalMotion",
        "description": "Perform any motion from the given interval on the NPC."
    },
    "DOTA_TEAM_CUSTOM_7": {
        "body": [
            "DOTA_TEAM_CUSTOM_7"
        ],
        "prefix": "DOTA_TEAM_CUSTOM_7",
        "description": "(12) "
    },
    "SplineQuaternions": {
        "body": [
            "SplineQuaternions( ${Quaternion_1}, ${Quaternion_2}, ${float_3} )",
            "-- (quaternion,quaternion,float) very basic interpolation of v0 to v1 over t on [0,1]"
        ],
        "prefix": "SplineQuaternions",
        "description": "(quaternion,quaternion,float) very basic interpolation of v0 to v1 over t on [0,1]"
    },
    "CBaseAnimating:GetModelScale": {
        "body": [
            "GetModelScale(  )",
            "-- Get scale of entity's model."
        ],
        "prefix": "GetModelScale",
        "description": "Get scale of entity's model."
    },
    "CDOTABaseAbility:CreateVisibilityNode": {
        "body": [
            "CreateVisibilityNode( ${vLocation}, ${fRadius}, ${fDuration} )",
            "-- "
        ],
        "prefix": "CreateVisibilityNode",
        "description": ""
    },
    "DOTA_MUSIC_STATUS_LAST": {
        "body": [
            "DOTA_MUSIC_STATUS_LAST"
        ],
        "prefix": "DOTA_MUSIC_STATUS_LAST",
        "description": "(5) "
    },
    "CDOTA_PlayerResource:SetCameraTarget": {
        "body": [
            "SetCameraTarget( ${nPlayerID}, ${hTarget} )",
            "-- (playerID, entity) - force the given player's camera to follow the given entity"
        ],
        "prefix": "SetCameraTarget",
        "description": "(playerID, entity) - force the given player's camera to follow the given entity"
    },
    "MODIFIER_EVENT_ON_DOMINATED": {
        "body": [
            "MODIFIER_EVENT_ON_DOMINATED"
        ],
        "prefix": "MODIFIER_EVENT_ON_DOMINATED",
        "description": "(146)  OnDominated"
    },
    "CDOTA_BaseNPC:GetTotalPurchasedUpgradeGoldCost": {
        "body": [
            "GetTotalPurchasedUpgradeGoldCost(  )",
            "-- Get how much gold has been spent on ability upgrades."
        ],
        "prefix": "GetTotalPurchasedUpgradeGoldCost",
        "description": "Get how much gold has been spent on ability upgrades."
    },
    "ListenToGameEvent": {
        "body": [
            "ListenToGameEvent( ${sEventName}, ${hCallback}, ${hSelf} )",
            "-- Register as a listener for a game event from script."
        ],
        "prefix": "ListenToGameEvent",
        "description": "Register as a listener for a game event from script."
    },
    "ACT_DOTA_LIFESTEALER_OPEN_WOUNDS": {
        "body": [
            "ACT_DOTA_LIFESTEALER_OPEN_WOUNDS"
        ],
        "prefix": "ACT_DOTA_LIFESTEALER_OPEN_WOUNDS",
        "description": "(1567) "
    },
    "ACT_DOTA_CAST_WILD_AXES_END": {
        "body": [
            "ACT_DOTA_CAST_WILD_AXES_END"
        ],
        "prefix": "ACT_DOTA_CAST_WILD_AXES_END",
        "description": "(1562) "
    },
    "CDOTA_PlayerResource:GetTimeOfLastConsumablePurchase": {
        "body": [
            "GetTimeOfLastConsumablePurchase( ${iPlayerID} )",
            "-- "
        ],
        "prefix": "GetTimeOfLastConsumablePurchase",
        "description": ""
    },
    "MODIFIER_PROPERTY_BONUS_DAY_VISION": {
        "body": [
            "MODIFIER_PROPERTY_BONUS_DAY_VISION"
        ],
        "prefix": "MODIFIER_PROPERTY_BONUS_DAY_VISION",
        "description": "(80)  GetBonusDayVision"
    },
    "CDOTA_BaseNPC:SetMinimumGoldBounty": {
        "body": [
            "SetMinimumGoldBounty( ${iGoldBountyMin} )",
            "-- Set the minimum gold bounty for this unit."
        ],
        "prefix": "SetMinimumGoldBounty",
        "description": "Set the minimum gold bounty for this unit."
    },
    "CDOTA_BaseNPC:SetOriginalModel": {
        "body": [
            "SetOriginalModel( ${pszModelName} )",
            "-- Sets the original model of this entity, which it will tend to fall back to anytime its state changes."
        ],
        "prefix": "SetOriginalModel",
        "description": "Sets the original model of this entity, which it will tend to fall back to anytime its state changes."
    },
    "CDOTA_Buff:IncrementStackCount": {
        "body": [
            "IncrementStackCount(  )",
            "-- Increase this modifier's stack count by 1."
        ],
        "prefix": "IncrementStackCount",
        "description": "Increase this modifier's stack count by 1."
    },
    "DOTA_ModifyXP_HeroKill": {
        "body": [
            "DOTA_ModifyXP_HeroKill"
        ],
        "prefix": "DOTA_ModifyXP_HeroKill",
        "description": "(1) "
    },
    "CDebugOverlayScriptHelper:Texture": {
        "body": [
            "Texture( ${string_1}, ${Vector2D_2}, ${Vector2D_3}, ${int_4}, ${int_5}, ${int_6}, ${int_7}, ${Vector2D_8}, ${Vector2D_9}, ${float_10} )",
            "-- Draws a screen-space texture. Coordinates are in pixels."
        ],
        "prefix": "Texture",
        "description": "Draws a screen-space texture. Coordinates are in pixels."
    },
    "CDOTA_MapTree:GrowBack": {
        "body": [
            "GrowBack(  )",
            "-- Grows back the tree if it was cut down."
        ],
        "prefix": "GrowBack",
        "description": "Grows back the tree if it was cut down."
    },
    "CDOTABaseAbility:IsHiddenWhenStolen": {
        "body": [
            "IsHiddenWhenStolen(  )",
            "-- "
        ],
        "prefix": "IsHiddenWhenStolen",
        "description": ""
    },
    "CDOTA_BaseNPC:GetAttackTarget": {
        "body": [
            "GetAttackTarget(  )",
            "-- "
        ],
        "prefix": "GetAttackTarget",
        "description": ""
    },
    "ACT_DOTA_LIFESTEALER_INFEST": {
        "body": [
            "ACT_DOTA_LIFESTEALER_INFEST"
        ],
        "prefix": "ACT_DOTA_LIFESTEALER_INFEST",
        "description": "(1576) "
    },
    "Convars:RegisterCommand": {
        "body": [
            "RegisterCommand( ${string_1}, ${handle_2}, ${string_3}, ${int_4} )",
            "-- RegisterCommand(name, fn, helpString, flags) : register a console command."
        ],
        "prefix": "RegisterCommand",
        "description": "RegisterCommand(name, fn, helpString, flags) : register a console command."
    },
    "CDOTABaseGameMode:ClearExecuteOrderFilter": {
        "body": [
            "ClearExecuteOrderFilter(  )",
            "-- Clear the script filter that controls when a unit picks up an item."
        ],
        "prefix": "ClearExecuteOrderFilter",
        "description": "Clear the script filter that controls when a unit picks up an item."
    },
    "DOTA_GAMERULES_STATE_STRATEGY_TIME": {
        "body": [
            "DOTA_GAMERULES_STATE_STRATEGY_TIME"
        ],
        "prefix": "DOTA_GAMERULES_STATE_STRATEGY_TIME",
        "description": "(4) "
    },
    "CDotaQuest:GetSubquestByName": {
        "body": [
            "GetSubquestByName( ${pszName} )",
            "-- Finds a subquest from this quest by name"
        ],
        "prefix": "GetSubquestByName",
        "description": "Finds a subquest from this quest by name"
    },
    "ACT_DOTA_CHANNEL_ABILITY_7": {
        "body": [
            "ACT_DOTA_CHANNEL_ABILITY_7"
        ],
        "prefix": "ACT_DOTA_CHANNEL_ABILITY_7",
        "description": "(1600) "
    },
    "ACT_DOTA_CAST_ABILITY_ROT": {
        "body": [
            "ACT_DOTA_CAST_ABILITY_ROT"
        ],
        "prefix": "ACT_DOTA_CAST_ABILITY_ROT",
        "description": "(1547) "
    },
    "CDOTABaseAbility:GetCursorTargetingNothing": {
        "body": [
            "GetCursorTargetingNothing(  )",
            "-- "
        ],
        "prefix": "GetCursorTargetingNothing",
        "description": ""
    },
    "ACT_DOTA_MIDNIGHT_PULSE": {
        "body": [
            "ACT_DOTA_MIDNIGHT_PULSE"
        ],
        "prefix": "ACT_DOTA_MIDNIGHT_PULSE",
        "description": "(1676) "
    },
    "MODIFIER_PROPERTY_DISABLE_TURNING": {
        "body": [
            "MODIFIER_PROPERTY_DISABLE_TURNING"
        ],
        "prefix": "MODIFIER_PROPERTY_DISABLE_TURNING",
        "description": "(142)  GetModifierDisableTurning"
    },
    "CDOTA_Item:SetPurchaser": {
        "body": [
            "SetPurchaser( ${hPurchaser} )",
            "-- Set the purchaser of record for this item."
        ],
        "prefix": "SetPurchaser",
        "description": "Set the purchaser of record for this item."
    },
    "CDOTA_Buff:StartIntervalThink": {
        "body": [
            "StartIntervalThink( ${flInterval} )",
            "-- Start this modifier's think function (OnIntervalThink) with the given interval (float).  To stop, call with -1."
        ],
        "prefix": "StartIntervalThink",
        "description": "Start this modifier's think function (OnIntervalThink) with the given interval (float).  To stop, call with -1."
    },
    "ACT_DOTA_CAST_ABILITY_2": {
        "body": [
            "ACT_DOTA_CAST_ABILITY_2"
        ],
        "prefix": "ACT_DOTA_CAST_ABILITY_2",
        "description": "(1511) "
    },
    "CDOTA_Buff:GetElapsedTime": {
        "body": [
            "GetElapsedTime(  )",
            "-- "
        ],
        "prefix": "GetElapsedTime",
        "description": ""
    },
    "DOTA_TEAM_CUSTOM_COUNT": {
        "body": [
            "DOTA_TEAM_CUSTOM_COUNT"
        ],
        "prefix": "DOTA_TEAM_CUSTOM_COUNT",
        "description": "(8) "
    },
    "CDOTABaseAbility:IsStealable": {
        "body": [
            "IsStealable(  )",
            "-- "
        ],
        "prefix": "IsStealable",
        "description": ""
    },
    "ACT_DOTA_EARTHSHAKER_TOTEM_ATTACK": {
        "body": [
            "ACT_DOTA_EARTHSHAKER_TOTEM_ATTACK"
        ],
        "prefix": "ACT_DOTA_EARTHSHAKER_TOTEM_ATTACK",
        "description": "(1570) "
    },
    "DOTA_TEAM_CUSTOM_MIN": {
        "body": [
            "DOTA_TEAM_CUSTOM_MIN"
        ],
        "prefix": "DOTA_TEAM_CUSTOM_MIN",
        "description": "(6) "
    },
    "MODIFIER_PROPERTY_PHYSICAL_ARMOR_BONUS_UNIQUE_ACTIVE": {
        "body": [
            "MODIFIER_PROPERTY_PHYSICAL_ARMOR_BONUS_UNIQUE_ACTIVE"
        ],
        "prefix": "MODIFIER_PROPERTY_PHYSICAL_ARMOR_BONUS_UNIQUE_ACTIVE",
        "description": "(40)  GetModifierPhysicalArmorBonusUniqueActive"
    },
    "ACT_DOTA_IDLE_RARE": {
        "body": [
            "ACT_DOTA_IDLE_RARE"
        ],
        "prefix": "ACT_DOTA_IDLE_RARE",
        "description": "(1501) "
    },
    "MODIFIER_PROPERTY_OVERRIDE_ANIMATION_WEIGHT": {
        "body": [
            "MODIFIER_PROPERTY_OVERRIDE_ANIMATION_WEIGHT"
        ],
        "prefix": "MODIFIER_PROPERTY_OVERRIDE_ANIMATION_WEIGHT",
        "description": "(75)  GetOverrideAnimationWeight"
    },
    "ACT_WAVEFORM_END": {
        "body": [
            "ACT_WAVEFORM_END"
        ],
        "prefix": "ACT_WAVEFORM_END",
        "description": "(1546) "
    },
    "CDOTA_Item:IsKillable": {
        "body": [
            "IsKillable(  )",
            "-- "
        ],
        "prefix": "IsKillable",
        "description": ""
    },
    "MODIFIER_PROPERTY_HEALTH_BONUS": {
        "body": [
            "MODIFIER_PROPERTY_HEALTH_BONUS"
        ],
        "prefix": "MODIFIER_PROPERTY_HEALTH_BONUS",
        "description": "(51)  GetModifierHealthBonus"
    },
    "CDOTA_Buff:GetCaster": {
        "body": [
            "GetCaster(  )",
            "-- Get the owner of the ability responsible for the modifier."
        ],
        "prefix": "GetCaster",
        "description": "Get the owner of the ability responsible for the modifier."
    },
    "GetTreeIdForEntityIndex": {
        "body": [
            "GetTreeIdForEntityIndex( ${int_1} )",
            "-- Given and entity index of a tree, get the tree id for use for use with with unit orders."
        ],
        "prefix": "GetTreeIdForEntityIndex",
        "description": "Given and entity index of a tree, get the tree id for use for use with with unit orders."
    },
    "CDOTA_BaseNPC_Hero:CalculateStatBonus": {
        "body": [
            "CalculateStatBonus(  )",
            "-- Recalculate all stats after the hero gains stats."
        ],
        "prefix": "CalculateStatBonus",
        "description": "Recalculate all stats after the hero gains stats."
    },
    "RandomInt": {
        "body": [
            "RandomInt( ${int_1}, ${int_2} )",
            "-- Get a random int within a range"
        ],
        "prefix": "RandomInt",
        "description": "Get a random int within a range"
    },
    "ACT_DOTA_CAST_ABILITY_2_ES_ROLL_END": {
        "body": [
            "ACT_DOTA_CAST_ABILITY_2_ES_ROLL_END"
        ],
        "prefix": "ACT_DOTA_CAST_ABILITY_2_ES_ROLL_END",
        "description": "(1654) "
    },
    "CDOTA_BaseNPC:SetNeverMoveToClearSpace": {
        "body": [
            "SetNeverMoveToClearSpace( ${neverMoveToClearSpace} )",
            "-- If set to true, we will never attempt to move this unit to clear space, even when it unphases."
        ],
        "prefix": "SetNeverMoveToClearSpace",
        "description": "If set to true, we will never attempt to move this unit to clear space, even when it unphases."
    },
    "LUA_MODIFIER_MOTION_BOTH": {
        "body": [
            "LUA_MODIFIER_MOTION_BOTH"
        ],
        "prefix": "LUA_MODIFIER_MOTION_BOTH",
        "description": "(3) "
    },
    "ACT_DOTA_AREA_DENY": {
        "body": [
            "ACT_DOTA_AREA_DENY"
        ],
        "prefix": "ACT_DOTA_AREA_DENY",
        "description": "(1661) "
    },
    "CSceneEntity:IsPlayingBack": {
        "body": [
            "IsPlayingBack(  )",
            "-- If this scene is currently playing."
        ],
        "prefix": "IsPlayingBack",
        "description": "If this scene is currently playing."
    },
    "CDOTA_BaseNPC_Hero:GetNumItemsInStash": {
        "body": [
            "GetNumItemsInStash(  )",
            "-- "
        ],
        "prefix": "GetNumItemsInStash",
        "description": ""
    },
    "CDOTA_Buff:GetName": {
        "body": [
            "GetName(  )",
            "-- "
        ],
        "prefix": "GetName",
        "description": ""
    },
    "CDOTA_PlayerResource:IncrementLastHitStreak": {
        "body": [
            "IncrementLastHitStreak( ${iPlayerID} )",
            "-- "
        ],
        "prefix": "IncrementLastHitStreak",
        "description": ""
    },
    "CDOTA_PlayerResource:GetNthPlayerIDOnTeam": {
        "body": [
            "GetNthPlayerIDOnTeam( ${iTeamNumber}, ${iNthPlayer} )",
            "-- "
        ],
        "prefix": "GetNthPlayerIDOnTeam",
        "description": ""
    },
    "CBaseEntity:EyePosition": {
        "body": [
            "EyePosition(  )",
            "-- Get vector to eye position - absolute coords."
        ],
        "prefix": "EyePosition",
        "description": "Get vector to eye position - absolute coords."
    },
    "MODIFIER_PROPERTY_STATS_AGILITY_BONUS": {
        "body": [
            "MODIFIER_PROPERTY_STATS_AGILITY_BONUS"
        ],
        "prefix": "MODIFIER_PROPERTY_STATS_AGILITY_BONUS",
        "description": "(58)  GetModifierBonusStats_Agility"
    },
    "CDOTA_BaseNPC_Creature:SetBountyGain": {
        "body": [
            "SetBountyGain( ${nBountyGain} )",
            "-- Set the bounty gold gained per level on this creature."
        ],
        "prefix": "SetBountyGain",
        "description": "Set the bounty gold gained per level on this creature."
    },
    "DOTA_ATTRIBUTE_INTELLECT": {
        "body": [
            "DOTA_ATTRIBUTE_INTELLECT"
        ],
        "prefix": "DOTA_ATTRIBUTE_INTELLECT",
        "description": "(2) "
    },
    "CBaseEntity:SetHealth": {
        "body": [
            "SetHealth( ${nHealth} )",
            "-- Set the health of this entity."
        ],
        "prefix": "SetHealth",
        "description": "Set the health of this entity."
    },
    "CDOTA_Modifier_Lua:GetModifierAura": {
        "body": [
            "GetModifierAura(  )",
            "-- The name of the secondary modifier that will be applied by this modifier (if it is an aura)."
        ],
        "prefix": "GetModifierAura",
        "description": "The name of the secondary modifier that will be applied by this modifier (if it is an aura)."
    },
    "CPhysicsComponent:ExpensiveInstantRayCast": {
        "body": [
            "ExpensiveInstantRayCast( ${Vector_1}, ${Vector_2}, ${handle_3} )",
            "-- Do an instant (i.e. blocking) Ray Cast. Will do a handle/queue version later. Dont plan to use this for real!"
        ],
        "prefix": "ExpensiveInstantRayCast",
        "description": "Do an instant (i.e. blocking) Ray Cast. Will do a handle/queue version later. Dont plan to use this for real!"
    },
    "CDOTA_BaseNPC:FindAllModifiers": {
        "body": [
            "FindAllModifiers(  )",
            "-- Returns a table of all of the modifiers on the NPC."
        ],
        "prefix": "FindAllModifiers",
        "description": "Returns a table of all of the modifiers on the NPC."
    },
    "DOTA_HEROPICK_STATE_CM_SELECT8": {
        "body": [
            "DOTA_HEROPICK_STATE_CM_SELECT8"
        ],
        "prefix": "DOTA_HEROPICK_STATE_CM_SELECT8",
        "description": "(24) "
    },
    "DOTA_UNIT_CAP_MOVE_FLY": {
        "body": [
            "DOTA_UNIT_CAP_MOVE_FLY"
        ],
        "prefix": "DOTA_UNIT_CAP_MOVE_FLY",
        "description": "(2) "
    },
    "CDOTA_BaseNPC:IsBarracks": {
        "body": [
            "IsBarracks(  )",
            "-- Is this unit a Barracks?"
        ],
        "prefix": "IsBarracks",
        "description": "Is this unit a Barracks?"
    },
    "CDotaSubquestBase:SetTextReplaceString": {
        "body": [
            "SetTextReplaceString( ${pszString} )",
            "-- Set the text replace string for this subquest"
        ],
        "prefix": "SetTextReplaceString",
        "description": "Set the text replace string for this subquest"
    },
    "CDOTA_BaseNPC_Hero:GetAssists": {
        "body": [
            "GetAssists(  )",
            "-- Value is stored in PlayerResource."
        ],
        "prefix": "GetAssists",
        "description": "Value is stored in PlayerResource."
    },
    "ACT_DOTA_CONSTANT_LAYER": {
        "body": [
            "ACT_DOTA_CONSTANT_LAYER"
        ],
        "prefix": "ACT_DOTA_CONSTANT_LAYER",
        "description": "(1532) "
    },
    "CDOTA_Item_Lua:IsStealable": {
        "body": [
            "IsStealable(  )",
            "-- Returns true if this ability can be stolen by Spell Steal."
        ],
        "prefix": "IsStealable",
        "description": "Returns true if this ability can be stolen by Spell Steal."
    },
    "PrecacheUnitByNameAsync": {
        "body": [
            "PrecacheUnitByNameAsync( ${string_1}, ${handle_2}, ${int_3} )",
            "-- Asynchronously precaches a DOTA unit by its dota_npc_units.txt name, provides a callback when it's finished."
        ],
        "prefix": "PrecacheUnitByNameAsync",
        "description": "Asynchronously precaches a DOTA unit by its dota_npc_units.txt name, provides a callback when it's finished."
    },
    "ACT_DOTA_NIAN_INTRO_LEAP": {
        "body": [
            "ACT_DOTA_NIAN_INTRO_LEAP"
        ],
        "prefix": "ACT_DOTA_NIAN_INTRO_LEAP",
        "description": "(1660) "
    },
    "CDOTA_BaseNPC:SetMoveCapability": {
        "body": [
            "SetMoveCapability( ${iMoveCapabilities} )",
            "-- "
        ],
        "prefix": "SetMoveCapability",
        "description": ""
    },
    "DOTA_RUNE_REGENERATION": {
        "body": [
            "DOTA_RUNE_REGENERATION"
        ],
        "prefix": "DOTA_RUNE_REGENERATION",
        "description": "(4) "
    },
    "MODIFIER_STATE_SPECIALLY_DENIABLE": {
        "body": [
            "MODIFIER_STATE_SPECIALLY_DENIABLE"
        ],
        "prefix": "MODIFIER_STATE_SPECIALLY_DENIABLE",
        "description": "(16) "
    },
    "CDOTA_PlayerResource:GetNumCouriersForTeam": {
        "body": [
            "GetNumCouriersForTeam( ${nTeamNumber} )",
            "-- "
        ],
        "prefix": "GetNumCouriersForTeam",
        "description": ""
    },
    "DOTA_INVENTORY_ALLOW_STASH": {
        "body": [
            "DOTA_INVENTORY_ALLOW_STASH"
        ],
        "prefix": "DOTA_INVENTORY_ALLOW_STASH",
        "description": "(2) "
    },
    "CDOTA_BaseNPC:AddAbility": {
        "body": [
            "AddAbility( ${pszAbilityName} )",
            "-- Add an ability to this unit by name."
        ],
        "prefix": "AddAbility",
        "description": "Add an ability to this unit by name."
    },
    "ACT_DOTA_CAST_ABILITY_3": {
        "body": [
            "ACT_DOTA_CAST_ABILITY_3"
        ],
        "prefix": "ACT_DOTA_CAST_ABILITY_3",
        "description": "(1512) "
    },
    "CDOTA_BaseNPC:GetMustReachEachGoalEntity": {
        "body": [
            "GetMustReachEachGoalEntity(  )",
            "-- Set whether this NPC is required to reach each goal entity, rather than being allowed to unkink their path."
        ],
        "prefix": "GetMustReachEachGoalEntity",
        "description": "Set whether this NPC is required to reach each goal entity, rather than being allowed to unkink their path."
    },
    "CDOTABaseGameMode:SetBotsAlwaysPushWithHuman": {
        "body": [
            "SetBotsAlwaysPushWithHuman( ${bAlwaysPush} )",
            "-- Set if the bots should try their best to push with a human player."
        ],
        "prefix": "SetBotsAlwaysPushWithHuman",
        "description": "Set if the bots should try their best to push with a human player."
    },
    "GetPhysAngularVelocity": {
        "body": [
            "GetPhysAngularVelocity( ${handle_1} )",
            "-- Get Angular Velocity for VPHYS or normal object"
        ],
        "prefix": "GetPhysAngularVelocity",
        "description": "Get Angular Velocity for VPHYS or normal object"
    },
    "CDOTA_BaseNPC_Hero:GetPlayerID": {
        "body": [
            "GetPlayerID(  )",
            "-- Returns player ID of the player owning this hero"
        ],
        "prefix": "GetPlayerID",
        "description": "Returns player ID of the player owning this hero"
    },
    "CDOTA_BaseNPC:SetControllableByPlayer": {
        "body": [
            "SetControllableByPlayer( ${iIndex}, ${bSkipAdjustingPosition} )",
            "-- Set this unit controllable by the player with the passed ID."
        ],
        "prefix": "SetControllableByPlayer",
        "description": "Set this unit controllable by the player with the passed ID."
    },
    "CScriptParticleManager:SetParticleAlwaysSimulate": {
        "body": [
            "SetParticleAlwaysSimulate( ${int_1} )",
            "-- "
        ],
        "prefix": "SetParticleAlwaysSimulate",
        "description": ""
    },
    "PATTACH_POINT": {
        "body": [
            "PATTACH_POINT"
        ],
        "prefix": "PATTACH_POINT",
        "description": "(4) "
    },
    "ACT_DOTA_TELEPORT_END": {
        "body": [
            "ACT_DOTA_TELEPORT_END"
        ],
        "prefix": "ACT_DOTA_TELEPORT_END",
        "description": "(1596) "
    },
    "IsDedicatedServer": {
        "body": [
            "IsDedicatedServer(  )",
            "-- Returns true if this server is a dedicated server."
        ],
        "prefix": "IsDedicatedServer",
        "description": "Returns true if this server is a dedicated server."
    },
    "CDOTA_BaseNPC_Hero:GetIncreasedAttackSpeed": {
        "body": [
            "GetIncreasedAttackSpeed(  )",
            "-- Hero attack speed is also affected by agility."
        ],
        "prefix": "GetIncreasedAttackSpeed",
        "description": "Hero attack speed is also affected by agility."
    },
    "CDOTABaseAbility:GetAbilityName": {
        "body": [
            "GetAbilityName(  )",
            "-- Returns the name of this ability."
        ],
        "prefix": "GetAbilityName",
        "description": "Returns the name of this ability."
    },
    "CDOTA_BaseNPC_Hero:UpgradeAbility": {
        "body": [
            "UpgradeAbility( ${hAbility} )",
            "-- This upgrades the passed ability if it exists and the hero has enough ability points."
        ],
        "prefix": "UpgradeAbility",
        "description": "This upgrades the passed ability if it exists and the hero has enough ability points."
    },
    "CDOTAVoteSystem:StartVote": {
        "body": [
            "StartVote( ${handle_1} )",
            "-- Starts a vote, based upon a table of parameters"
        ],
        "prefix": "StartVote",
        "description": "Starts a vote, based upon a table of parameters"
    },
    "CDOTA_PlayerResource:GetGold": {
        "body": [
            "GetGold( ${iPlayerID} )",
            "-- "
        ],
        "prefix": "GetGold",
        "description": ""
    },
    "ACT_DOTA_CHANNEL_END_ABILITY_4": {
        "body": [
            "ACT_DOTA_CHANNEL_END_ABILITY_4"
        ],
        "prefix": "ACT_DOTA_CHANNEL_END_ABILITY_4",
        "description": "(1529) "
    },
    "CDOTA_Ability_Lua:OnAbilityPhaseInterrupted": {
        "body": [
            "OnAbilityPhaseInterrupted(  )",
            "-- Cast time did not complete successfully."
        ],
        "prefix": "OnAbilityPhaseInterrupted",
        "description": "Cast time did not complete successfully."
    },
    "CDOTA_BaseNPC:GetModifierNameByIndex": {
        "body": [
            "GetModifierNameByIndex( ${nIndex} )",
            "-- Get a modifier name by index."
        ],
        "prefix": "GetModifierNameByIndex",
        "description": "Get a modifier name by index."
    },
    "DOTA_SPEECH_USER_NEARBY": {
        "body": [
            "DOTA_SPEECH_USER_NEARBY"
        ],
        "prefix": "DOTA_SPEECH_USER_NEARBY",
        "description": "(4) "
    },
    "CScriptParticleManager:SetParticleControlOrientation": {
        "body": [
            "SetParticleControlOrientation( ${int_1}, ${int_2}, ${Vector_3}, ${Vector_4}, ${Vector_5} )",
            "-- (int nFXIndex, int nPoint, vForward, vRight, vUp)"
        ],
        "prefix": "SetParticleControlOrientation",
        "description": "(int nFXIndex, int nPoint, vForward, vRight, vUp)"
    },
    "CDOTA_Ability_Lua:GetCooldown": {
        "body": [
            "GetCooldown( ${iLevel} )",
            "-- Return cooldown of this ability."
        ],
        "prefix": "GetCooldown",
        "description": "Return cooldown of this ability."
    },
    "DOTA_SPEECH_USER_SINGLE": {
        "body": [
            "DOTA_SPEECH_USER_SINGLE"
        ],
        "prefix": "DOTA_SPEECH_USER_SINGLE",
        "description": "(1) "
    },
    "CDOTA_BaseNPC:GetOpposingTeamNumber": {
        "body": [
            "GetOpposingTeamNumber(  )",
            "-- "
        ],
        "prefix": "GetOpposingTeamNumber",
        "description": ""
    },
    "CDOTA_BaseNPC:IsOwnedByAnyPlayer": {
        "body": [
            "IsOwnedByAnyPlayer(  )",
            "-- Is this unit owned by any non-bot player?"
        ],
        "prefix": "IsOwnedByAnyPlayer",
        "description": "Is this unit owned by any non-bot player?"
    },
    "CreateHeroForPlayer": {
        "body": [
            "CreateHeroForPlayer( ${string_1}, ${handle_2} )",
            "-- Creates a DOTA hero by its dota_npc_units.txt name and sets it as the given player's controlled hero"
        ],
        "prefix": "CreateHeroForPlayer",
        "description": "Creates a DOTA hero by its dota_npc_units.txt name and sets it as the given player's controlled hero"
    },
    "Convars:SetFloat": {
        "body": [
            "SetFloat( ${string_1}, ${float_2} )",
            "-- SetFloat(name, val) : sets the value of the convar to the float."
        ],
        "prefix": "SetFloat",
        "description": "SetFloat(name, val) : sets the value of the convar to the float."
    },
    "CDOTA_BaseNPC:GetAttackDamage": {
        "body": [
            "GetAttackDamage(  )",
            "-- Returns a random integer between the minimum and maximum base damage of the unit."
        ],
        "prefix": "GetAttackDamage",
        "description": "Returns a random integer between the minimum and maximum base damage of the unit."
    },
    "DOTA_HEROPICK_STATE_CM_BAN7": {
        "body": [
            "DOTA_HEROPICK_STATE_CM_BAN7"
        ],
        "prefix": "DOTA_HEROPICK_STATE_CM_BAN7",
        "description": "(13) "
    },
    "ACT_DOTA_STARTLE": {
        "body": [
            "ACT_DOTA_STARTLE"
        ],
        "prefix": "ACT_DOTA_STARTLE",
        "description": "(1629) "
    },
    "CDOTABaseAbility:GetCaster": {
        "body": [
            "GetCaster(  )",
            "-- "
        ],
        "prefix": "GetCaster",
        "description": ""
    },
    "MODIFIER_PROPERTY_ILLUSION_LABEL": {
        "body": [
            "MODIFIER_PROPERTY_ILLUSION_LABEL"
        ],
        "prefix": "MODIFIER_PROPERTY_ILLUSION_LABEL",
        "description": "(91)  GetModifierIllusionLabel"
    },
    "CDOTA_BaseNPC:GetCursorCastTarget": {
        "body": [
            "GetCursorCastTarget(  )",
            "-- "
        ],
        "prefix": "GetCursorCastTarget",
        "description": ""
    },
    "CDOTA_PlayerResource:GetLevel": {
        "body": [
            "GetLevel( ${iPlayerID} )",
            "-- "
        ],
        "prefix": "GetLevel",
        "description": ""
    },
    "CDOTA_BaseNPC:SetAcquisitionRange": {
        "body": [
            "SetAcquisitionRange( ${nRange} )",
            "-- "
        ],
        "prefix": "SetAcquisitionRange",
        "description": ""
    },
    "MODIFIER_PROPERTY_MOVESPEED_MAX": {
        "body": [
            "MODIFIER_PROPERTY_MOVESPEED_MAX"
        ],
        "prefix": "MODIFIER_PROPERTY_MOVESPEED_MAX",
        "description": "(18)  GetModifierMoveSpeed_Max"
    },
    "DebugDrawLine": {
        "body": [
            "DebugDrawLine( ${vOrigin}, ${vTarget}, ${iRed}, ${iGreen}, ${iBlue}, ${iZtest}, ${fDuration} )",
            "-- Draw a debug overlay line"
        ],
        "prefix": "DebugDrawLine",
        "description": "Draw a debug overlay line (origin, target, r, g, b, ztest, duration)"
    },
    "CDOTA_Item_Lua:OnUnStolen": {
        "body": [
            "OnUnStolen(  )",
            "-- Special behavior when lost by Spell Steal."
        ],
        "prefix": "OnUnStolen",
        "description": "Special behavior when lost by Spell Steal."
    },
    "CDOTA_BaseNPC:GetMaxMana": {
        "body": [
            "GetMaxMana(  )",
            "-- Get the maximum mana of this unit."
        ],
        "prefix": "GetMaxMana",
        "description": "Get the maximum mana of this unit."
    },
    "CDOTABaseGameMode:SetBotsMaxPushTier": {
        "body": [
            "SetBotsMaxPushTier( ${nMaxTier} )",
            "-- Set the max tier of tower that bots want to push. (-1 to disable)"
        ],
        "prefix": "SetBotsMaxPushTier",
        "description": "Set the max tier of tower that bots want to push. (-1 to disable)"
    },
    "DOTA_STASH_SLOT_3": {
        "body": [
            "DOTA_STASH_SLOT_3"
        ],
        "prefix": "DOTA_STASH_SLOT_3",
        "description": "(8) "
    },
    "MODIFIER_PROPERTY_HEALTH_REGEN_CONSTANT": {
        "body": [
            "MODIFIER_PROPERTY_HEALTH_REGEN_CONSTANT"
        ],
        "prefix": "MODIFIER_PROPERTY_HEALTH_REGEN_CONSTANT",
        "description": "(49)  GetModifierConstantHealthRegen"
    },
    "CDOTA_BaseNPC:SetIdleAcquire": {
        "body": [
            "SetIdleAcquire( ${bIdleAcquire} )",
            "-- "
        ],
        "prefix": "SetIdleAcquire",
        "description": ""
    },
    "MODIFIER_STATE_DISARMED": {
        "body": [
            "MODIFIER_STATE_DISARMED"
        ],
        "prefix": "MODIFIER_STATE_DISARMED",
        "description": "(1) "
    },
    "UF_FAIL_DEAD": {
        "body": [
            "UF_FAIL_DEAD"
        ],
        "prefix": "UF_FAIL_DEAD",
        "description": "(16) "
    },
    "MODIFIER_STATE_HEXED": {
        "body": [
            "MODIFIER_STATE_HEXED"
        ],
        "prefix": "MODIFIER_STATE_HEXED",
        "description": "(6) "
    },
    "CDOTABaseAbility:EndCooldown": {
        "body": [
            "EndCooldown(  )",
            "-- Clear the cooldown remaining on this ability."
        ],
        "prefix": "EndCooldown",
        "description": "Clear the cooldown remaining on this ability."
    },
    "CDOTA_BaseNPC:ShouldIdleAcquire": {
        "body": [
            "ShouldIdleAcquire(  )",
            "-- "
        ],
        "prefix": "ShouldIdleAcquire",
        "description": ""
    },
    "CDOTA_PlayerResource:GetHealing": {
        "body": [
            "GetHealing( ${iPlayerID} )",
            "-- "
        ],
        "prefix": "GetHealing",
        "description": ""
    },
    "CDOTABaseGameMode:SetAnnouncerDisabled": {
        "body": [
            "SetAnnouncerDisabled( ${bDisabled} )",
            "-- Mutes the in-game announcer."
        ],
        "prefix": "SetAnnouncerDisabled",
        "description": "Mutes the in-game announcer."
    },
    "CDOTA_BaseNPC_Hero:SetRespawnsDisabled": {
        "body": [
            "SetRespawnsDisabled( ${bDisableRespawns} )",
            "-- Prevent this hero from respawning."
        ],
        "prefix": "SetRespawnsDisabled",
        "description": "Prevent this hero from respawning."
    },
    "MODIFIER_PROPERTY_MOVESPEED_ABSOLUTE": {
        "body": [
            "MODIFIER_PROPERTY_MOVESPEED_ABSOLUTE"
        ],
        "prefix": "MODIFIER_PROPERTY_MOVESPEED_ABSOLUTE",
        "description": "(15)  GetModifierMoveSpeed_Absolute"
    },
    "CDOTA_BaseNPC:GetBaseMagicalResistanceValue": {
        "body": [
            "GetBaseMagicalResistanceValue(  )",
            "-- Returns base magical armor value."
        ],
        "prefix": "GetBaseMagicalResistanceValue",
        "description": "Returns base magical armor value."
    },
    "DOTA_LOADOUT_TYPE_OFFHAND_WEAPON": {
        "body": [
            "DOTA_LOADOUT_TYPE_OFFHAND_WEAPON"
        ],
        "prefix": "DOTA_LOADOUT_TYPE_OFFHAND_WEAPON",
        "description": "(1) "
    },
    "ACT_DOTA_RAZE_3": {
        "body": [
            "ACT_DOTA_RAZE_3"
        ],
        "prefix": "ACT_DOTA_RAZE_3",
        "description": "(1665) "
    },
    "UF_FAIL_RANGED": {
        "body": [
            "UF_FAIL_RANGED"
        ],
        "prefix": "UF_FAIL_RANGED",
        "description": "(15) "
    },
    "ACT_DOTA_CAST_TORNADO": {
        "body": [
            "ACT_DOTA_CAST_TORNADO"
        ],
        "prefix": "ACT_DOTA_CAST_TORNADO",
        "description": "(1583) "
    },
    "MODIFIER_EVENT_ON_RESPAWN": {
        "body": [
            "MODIFIER_EVENT_ON_RESPAWN"
        ],
        "prefix": "MODIFIER_EVENT_ON_RESPAWN",
        "description": "(120)  OnRespawn"
    },
    "CDOTABaseAbility:IsStolen": {
        "body": [
            "IsStolen(  )",
            "-- "
        ],
        "prefix": "IsStolen",
        "description": ""
    },
    "AxisAngleToQuaternion": {
        "body": [
            "AxisAngleToQuaternion( ${Vector_1}, ${float_2} )",
            "-- (vector,float) constructs a quaternion representing a rotation by angle around the specified vector axis"
        ],
        "prefix": "AxisAngleToQuaternion",
        "description": "(vector,float) constructs a quaternion representing a rotation by angle around the specified vector axis"
    },
    "CInfoData:QueryColor": {
        "body": [
            "QueryColor( ${tok}, ${vDefault} )",
            "-- Query color data for this key"
        ],
        "prefix": "QueryColor",
        "description": "Query color data for this key"
    },
    "CDOTA_BaseNPC:IsHero": {
        "body": [
            "IsHero(  )",
            "-- Is this a hero or hero illusion?"
        ],
        "prefix": "IsHero",
        "description": "Is this a hero or hero illusion?"
    },
    "CDOTA_BaseNPC:SetPhysicalArmorBaseValue": {
        "body": [
            "SetPhysicalArmorBaseValue( ${flPhysicalArmorValue} )",
            "-- Sets base physical armor value."
        ],
        "prefix": "SetPhysicalArmorBaseValue",
        "description": "Sets base physical armor value."
    },
    "CDOTA_BaseNPC:HasAnyActiveAbilities": {
        "body": [
            "HasAnyActiveAbilities(  )",
            "-- "
        ],
        "prefix": "HasAnyActiveAbilities",
        "description": ""
    },
    "CDOTA_Ability_Lua:OnStolen": {
        "body": [
            "OnStolen( ${hSourceAbility} )",
            "-- ( HSCRIPT hAbility ) Special behavior when stolen by Spell Steal."
        ],
        "prefix": "OnStolen",
        "description": "( HSCRIPT hAbility ) Special behavior when stolen by Spell Steal."
    },
    "CDOTABaseAbility:GetAnimationIgnoresModelScale": {
        "body": [
            "GetAnimationIgnoresModelScale(  )",
            "-- "
        ],
        "prefix": "GetAnimationIgnoresModelScale",
        "description": ""
    },
    "CDOTA_BaseNPC_Hero:SpendGold": {
        "body": [
            "SpendGold( ${iCost}, ${iReason} )",
            "-- Args: int nGold, int nReason"
        ],
        "prefix": "SpendGold",
        "description": "Args: int nGold, int nReason"
    },
    "PrecacheUnitByNameSync": {
        "body": [
            "PrecacheUnitByNameSync( ${string_1}, ${handle_2}, ${int_3} )",
            "-- Precaches a DOTA unit by its dota_npc_units.txt name"
        ],
        "prefix": "PrecacheUnitByNameSync",
        "description": "Precaches a DOTA unit by its dota_npc_units.txt name"
    },
    "CDOTA_PlayerResource:HasRandomed": {
        "body": [
            "HasRandomed( ${iPlayerID} )",
            "-- "
        ],
        "prefix": "HasRandomed",
        "description": ""
    },
    "DOTA_ABILITY_SPEAK_CAST": {
        "body": [
            "DOTA_ABILITY_SPEAK_CAST"
        ],
        "prefix": "DOTA_ABILITY_SPEAK_CAST",
        "description": "(1) "
    },
    "DOTA_MOTION_CONTROLLER_PRIORITY_HIGHEST": {
        "body": [
            "DOTA_MOTION_CONTROLLER_PRIORITY_HIGHEST"
        ],
        "prefix": "DOTA_MOTION_CONTROLLER_PRIORITY_HIGHEST",
        "description": "(4) "
    },
    "MODIFIER_PROPERTY_INCOMING_DAMAGE_PERCENTAGE": {
        "body": [
            "MODIFIER_PROPERTY_INCOMING_DAMAGE_PERCENTAGE"
        ],
        "prefix": "MODIFIER_PROPERTY_INCOMING_DAMAGE_PERCENTAGE",
        "description": "(30)  GetModifierIncomingDamage_Percentage"
    },
    "CDOTABaseAbility:GetPlaybackRateOverride": {
        "body": [
            "GetPlaybackRateOverride(  )",
            "-- "
        ],
        "prefix": "GetPlaybackRateOverride",
        "description": ""
    },
    "GridNav:IsTraversable": {
        "body": [
            "IsTraversable( ${Vector_1} )",
            "-- Checks whether the given position is traversable"
        ],
        "prefix": "IsTraversable",
        "description": "Checks whether the given position is traversable"
    },
    "CDOTA_Modifier_Lua_Vertical_Motion:ApplyVerticalMotionController": {
        "body": [
            "ApplyVerticalMotionController(  )",
            "-- Starts the vertical motion controller effects for this buff.  Returns true if successful."
        ],
        "prefix": "ApplyVerticalMotionController",
        "description": "Starts the vertical motion controller effects for this buff.  Returns true if successful."
    },
    "CDOTA_PlayerResource:ClearStreak": {
        "body": [
            "ClearStreak( ${iPlayerID} )",
            "-- "
        ],
        "prefix": "ClearStreak",
        "description": ""
    },
    "CDOTA_BaseNPC:GetAverageTrueAttackDamage": {
        "body": [
            "GetAverageTrueAttackDamage(  )",
            "-- Returns the average value of the minimum and maximum damage values."
        ],
        "prefix": "GetAverageTrueAttackDamage",
        "description": "Returns the average value of the minimum and maximum damage values."
    },
    "ACT_DOTA_SHAKE": {
        "body": [
            "ACT_DOTA_SHAKE"
        ],
        "prefix": "ACT_DOTA_SHAKE",
        "description": "(1687) "
    },
    "MODIFIER_PROPERTY_BOUNTY_OTHER_MULTIPLIER": {
        "body": [
            "MODIFIER_PROPERTY_BOUNTY_OTHER_MULTIPLIER"
        ],
        "prefix": "MODIFIER_PROPERTY_BOUNTY_OTHER_MULTIPLIER",
        "description": "(98)  GetModifierBountyOtherMultiplier"
    },
    "ACT_DOTA_ALCHEMIST_CONCOCTION_THROW": {
        "body": [
            "ACT_DOTA_ALCHEMIST_CONCOCTION_THROW"
        ],
        "prefix": "ACT_DOTA_ALCHEMIST_CONCOCTION_THROW",
        "description": "(1579) "
    },
    "CDOTABaseAbility:ShouldUseResources": {
        "body": [
            "ShouldUseResources(  )",
            "-- "
        ],
        "prefix": "ShouldUseResources",
        "description": ""
    },
    "DOTA_HEROPICK_STATE_BD_SELECT": {
        "body": [
            "DOTA_HEROPICK_STATE_BD_SELECT"
        ],
        "prefix": "DOTA_HEROPICK_STATE_BD_SELECT",
        "description": "(50) "
    },
    "DOTA_ITEM_SLOT_4": {
        "body": [
            "DOTA_ITEM_SLOT_4"
        ],
        "prefix": "DOTA_ITEM_SLOT_4",
        "description": "(3) "
    },
    "CBaseEntity:GetBoundingMaxs": {
        "body": [
            "GetBoundingMaxs(  )",
            "-- Get a vector containing max bounds, centered on object."
        ],
        "prefix": "GetBoundingMaxs",
        "description": "Get a vector containing max bounds, centered on object."
    },
    "ACT_TINY_TOSS": {
        "body": [
            "ACT_TINY_TOSS"
        ],
        "prefix": "ACT_TINY_TOSS",
        "description": "(1559) "
    },
    "CDOTABaseGameMode:SetTowerBackdoorProtectionEnabled": {
        "body": [
            "SetTowerBackdoorProtectionEnabled( ${bEnabled} )",
            "-- Enables/Disables tower backdoor protection."
        ],
        "prefix": "SetTowerBackdoorProtectionEnabled",
        "description": "Enables/Disables tower backdoor protection."
    },
    "CDOTA_PlayerResource:SetBuybackCooldownTime": {
        "body": [
            "SetBuybackCooldownTime( ${nPlayerID}, ${flBuybackCooldown} )",
            "-- "
        ],
        "prefix": "SetBuybackCooldownTime",
        "description": ""
    },
    "GetTeamHeroKills": {
        "body": [
            "GetTeamHeroKills( ${int_1} )",
            "-- ( int teamID )"
        ],
        "prefix": "GetTeamHeroKills",
        "description": "( int teamID )"
    },
    "CDOTA_BaseNPC:DisassembleItem": {
        "body": [
            "DisassembleItem( ${hItem} )",
            "-- Disassemble the passed item in this unit's inventory."
        ],
        "prefix": "DisassembleItem",
        "description": "Disassemble the passed item in this unit's inventory."
    },
    "DOTA_LOADOUT_TYPE_BODY_HEAD": {
        "body": [
            "DOTA_LOADOUT_TYPE_BODY_HEAD"
        ],
        "prefix": "DOTA_LOADOUT_TYPE_BODY_HEAD",
        "description": "(15) "
    },
    "RotatePosition": {
        "body": [
            "RotatePosition( ${Vector_1}, ${QAngle_2}, ${Vector_3} )",
            "-- Rotate a Vector around a point."
        ],
        "prefix": "RotatePosition",
        "description": "Rotate a Vector around a point."
    },
    "PrecacheItemByNameAsync": {
        "body": [
            "PrecacheItemByNameAsync( ${string_1}, ${handle_2} )",
            "-- Asynchronously precaches a DOTA item by its dota_npc_items.txt name, provides a callback when it's finished."
        ],
        "prefix": "PrecacheItemByNameAsync",
        "description": "Asynchronously precaches a DOTA item by its dota_npc_items.txt name, provides a callback when it's finished."
    },
    "DOTA_UNIT_TARGET_FLAG_OUT_OF_WORLD": {
        "body": [
            "DOTA_UNIT_TARGET_FLAG_OUT_OF_WORLD"
        ],
        "prefix": "DOTA_UNIT_TARGET_FLAG_OUT_OF_WORLD",
        "description": "(262144) "
    },
    "PATTACH_INVALID": {
        "body": [
            "PATTACH_INVALID"
        ],
        "prefix": "PATTACH_INVALID",
        "description": "(-1) "
    },
    "RotateQuaternionByAxisAngle": {
        "body": [
            "RotateQuaternionByAxisAngle( ${Quaternion_1}, ${Vector_2}, ${float_3} )",
            "-- (quaternion,vector,float) rotates a quaternion by the specified angle around the specified vector axis"
        ],
        "prefix": "RotateQuaternionByAxisAngle",
        "description": "(quaternion,vector,float) rotates a quaternion by the specified angle around the specified vector axis"
    },
    "DOTA_ModifyGold_HeroKill": {
        "body": [
            "DOTA_ModifyGold_HeroKill"
        ],
        "prefix": "DOTA_ModifyGold_HeroKill",
        "description": "(12) "
    },
    "CDOTA_BaseNPC:SetMaximumGoldBounty": {
        "body": [
            "SetMaximumGoldBounty( ${iGoldBountyMax} )",
            "-- Set the maximum gold bounty for this unit."
        ],
        "prefix": "SetMaximumGoldBounty",
        "description": "Set the maximum gold bounty for this unit."
    },
    "MODIFIER_EVENT_ON_ATTACK_LANDED": {
        "body": [
            "MODIFIER_EVENT_ON_ATTACK_LANDED"
        ],
        "prefix": "MODIFIER_EVENT_ON_ATTACK_LANDED",
        "description": "(102)  OnAttackLanded"
    },
    "CBasePlayer:IsUsePressed": {
        "body": [
            "IsUsePressed(  )",
            "-- Returns true if the use key is pressed."
        ],
        "prefix": "IsUsePressed",
        "description": "Returns true if the use key is pressed."
    },
    "MODIFIER_STATE_TRUESIGHT_IMMUNE": {
        "body": [
            "MODIFIER_STATE_TRUESIGHT_IMMUNE"
        ],
        "prefix": "MODIFIER_STATE_TRUESIGHT_IMMUNE",
        "description": "(33) "
    },
    "MODIFIER_PROPERTY_BONUS_NIGHT_VISION_UNIQUE": {
        "body": [
            "MODIFIER_PROPERTY_BONUS_NIGHT_VISION_UNIQUE"
        ],
        "prefix": "MODIFIER_PROPERTY_BONUS_NIGHT_VISION_UNIQUE",
        "description": "(82)  GetBonusNightVisionUnique"
    },
    "CEntityInstance:DisconnectOutput": {
        "body": [
            "DisconnectOutput( ${string_1}, ${string_2} )",
            "-- Removes a connected script function from an I/O event on this entity."
        ],
        "prefix": "DisconnectOutput",
        "description": "Removes a connected script function from an I/O event on this entity."
    },
    "CDebugOverlayScriptHelper:Line2D": {
        "body": [
            "Line2D( ${Vector2D_1}, ${Vector2D_2}, ${int_3}, ${int_4}, ${int_5}, ${int_6}, ${float_7} )",
            "-- Draws a line between two points in screenspace"
        ],
        "prefix": "Line2D",
        "description": "Draws a line between two points in screenspace"
    },
    "CDOTA_Buff:ForceRefresh": {
        "body": [
            "ForceRefresh(  )",
            "-- Run all associated refresh functions on this modifier as if it was re-applied."
        ],
        "prefix": "ForceRefresh",
        "description": "Run all associated refresh functions on this modifier as if it was re-applied."
    },
    "CDOTA_BaseNPC_Hero:GetPhysicalArmorValue": {
        "body": [
            "GetPhysicalArmorValue(  )",
            "-- Hero armor is affected by attributes."
        ],
        "prefix": "GetPhysicalArmorValue",
        "description": "Hero armor is affected by attributes."
    },
    "DOTA_HEROPICK_STATE_CM_BAN4": {
        "body": [
            "DOTA_HEROPICK_STATE_CM_BAN4"
        ],
        "prefix": "DOTA_HEROPICK_STATE_CM_BAN4",
        "description": "(10) "
    },
    "CDOTA_Item_Lua:GetCastRange": {
        "body": [
            "GetCastRange( ${vLocation}, ${hTarget} )",
            "-- Return cast range of this ability."
        ],
        "prefix": "GetCastRange",
        "description": "Return cast range of this ability."
    },
    "CDOTA_PlayerResource:AreUnitsSharedWithPlayerID": {
        "body": [
            "AreUnitsSharedWithPlayerID( ${nUnitOwnerPlayerID}, ${nOtherPlayerID} )",
            "-- "
        ],
        "prefix": "AreUnitsSharedWithPlayerID",
        "description": ""
    },
    "CDOTA_Modifier_Lua_Horizontal_Motion:ApplyHorizontalMotionController": {
        "body": [
            "ApplyHorizontalMotionController(  )",
            "-- Starts the horizontal motion controller effects for this buff.  Returns true if successful."
        ],
        "prefix": "ApplyHorizontalMotionController",
        "description": "Starts the horizontal motion controller effects for this buff.  Returns true if successful."
    },
    "CDOTA_Item_Lua:SpeakTrigger": {
        "body": [
            "SpeakTrigger(  )",
            "-- Return the type of speech used."
        ],
        "prefix": "SpeakTrigger",
        "description": "Return the type of speech used."
    },
    "CDOTA_Item:LaunchLootInitialHeight": {
        "body": [
            "LaunchLootInitialHeight( ${bAutoUse}, ${flInitialHeight}, ${flLaunchHeight}, ${flDuration}, ${vEndPoint} )",
            "-- "
        ],
        "prefix": "LaunchLootInitialHeight",
        "description": ""
    },
    "ACT_DOTA_LASSO_LOOP": {
        "body": [
            "ACT_DOTA_LASSO_LOOP"
        ],
        "prefix": "ACT_DOTA_LASSO_LOOP",
        "description": "(1578) "
    },
    "CDOTA_BaseNPC:GetBaseNightTimeVisionRange": {
        "body": [
            "GetBaseNightTimeVisionRange(  )",
            "-- Returns the vision range after modifiers."
        ],
        "prefix": "GetBaseNightTimeVisionRange",
        "description": "Returns the vision range after modifiers."
    },
    "CDOTA_PlayerResource:HaveAllPlayersJoined": {
        "body": [
            "HaveAllPlayersJoined(  )",
            "-- "
        ],
        "prefix": "HaveAllPlayersJoined",
        "description": ""
    },
    "CDOTABaseGameMode:SetExecuteOrderFilter": {
        "body": [
            "SetExecuteOrderFilter( ${hFunction}, ${hContext} )",
            "-- Set a filter function to control the behavior when a unit picks up an item. (Modify the table and Return true to use new values, return false to cancel the event)"
        ],
        "prefix": "SetExecuteOrderFilter",
        "description": "Set a filter function to control the behavior when a unit picks up an item. (Modify the table and Return true to use new values, return false to cancel the event)"
    },
    "ACT_DOTA_CAST_ABILITY_5": {
        "body": [
            "ACT_DOTA_CAST_ABILITY_5"
        ],
        "prefix": "ACT_DOTA_CAST_ABILITY_5",
        "description": "(1514) "
    },
    "DOTA_LOADOUT_TYPE_ABILITY_ULTIMATE": {
        "body": [
            "DOTA_LOADOUT_TYPE_ABILITY_ULTIMATE"
        ],
        "prefix": "DOTA_LOADOUT_TYPE_ABILITY_ULTIMATE",
        "description": "(26) "
    },
    "CDOTA_BaseNPC_Hero:GetIntellectGain": {
        "body": [
            "GetIntellectGain(  )",
            "-- "
        ],
        "prefix": "GetIntellectGain",
        "description": ""
    },
    "CDOTA_BaseNPC:IsMagicImmune": {
        "body": [
            "IsMagicImmune(  )",
            "-- "
        ],
        "prefix": "IsMagicImmune",
        "description": ""
    },
    "LUA_MODIFIER_MOTION_VERTICAL": {
        "body": [
            "LUA_MODIFIER_MOTION_VERTICAL"
        ],
        "prefix": "LUA_MODIFIER_MOTION_VERTICAL",
        "description": "(2) "
    },
    "CalcDistanceBetweenEntityOBB": {
        "body": [
            "CalcDistanceBetweenEntityOBB( ${handle_1}, ${handle_2} )",
            "-- Compute the distance between two entity OBB. A negative return value indicates an input error. A return value of zero indicates that the OBBs are overlapping."
        ],
        "prefix": "CalcDistanceBetweenEntityOBB",
        "description": "Compute the distance between two entity OBB. A negative return value indicates an input error. A return value of zero indicates that the OBBs are overlapping."
    },
    "ACT_DOTA_FLEE": {
        "body": [
            "ACT_DOTA_FLEE"
        ],
        "prefix": "ACT_DOTA_FLEE",
        "description": "(1685) "
    },
    "CDOTA_PlayerResource:IncrementKills": {
        "body": [
            "IncrementKills( ${iPlayerID}, ${iVictimID} )",
            "-- "
        ],
        "prefix": "IncrementKills",
        "description": ""
    },
    "CDOTA_Ability_Lua:OnProjectileThink_ExtraData": {
        "body": [
            "OnProjectileThink_ExtraData( ${vLocation}, ${table} )",
            "-- (Vector vLocation, table kv ) Projectile is actively moving."
        ],
        "prefix": "OnProjectileThink_ExtraData",
        "description": "(Vector vLocation, table kv ) Projectile is actively moving."
    },
    "Convars:RegisterConvar": {
        "body": [
            "RegisterConvar( ${string_1}, ${string_2}, ${string_3}, ${int_4} )",
            "-- RegisterConvar(name, defaultValue, helpString, flags): register a new console variable."
        ],
        "prefix": "RegisterConvar",
        "description": "RegisterConvar(name, defaultValue, helpString, flags): register a new console variable."
    },
    "CDOTA_PlayerResource:IncrementDeaths": {
        "body": [
            "IncrementDeaths( ${iPlayerID}, ${iKillerID} )",
            "-- "
        ],
        "prefix": "IncrementDeaths",
        "description": ""
    },
    "CDOTA_PlayerResource:GetGoldSpentOnItems": {
        "body": [
            "GetGoldSpentOnItems( ${iPlayerID} )",
            "-- "
        ],
        "prefix": "GetGoldSpentOnItems",
        "description": ""
    },
    "CDOTA_BaseNPC:GetStatsBasedManaRegen": {
        "body": [
            "GetStatsBasedManaRegen(  )",
            "-- Returns mana regen rate per intelligence."
        ],
        "prefix": "GetStatsBasedManaRegen",
        "description": "Returns mana regen rate per intelligence."
    },
    "GetGoldFrostyPointsForRound": {
        "body": [
            "GetGoldFrostyPointsForRound( ${int_1}, ${int_2}, ${int_3} )",
            "-- "
        ],
        "prefix": "GetGoldFrostyPointsForRound",
        "description": ""
    },
    "CreateItemOnPositionSync": {
        "body": [
            "CreateItemOnPositionSync( ${Vector_1}, ${handle_2} )",
            "-- Create a physical item at a given location"
        ],
        "prefix": "CreateItemOnPositionSync",
        "description": "Create a physical item at a given location"
    },
    "QUEST_NUM_TEXT_REPLACE_VALUES": {
        "body": [
            "QUEST_NUM_TEXT_REPLACE_VALUES"
        ],
        "prefix": "QUEST_NUM_TEXT_REPLACE_VALUES",
        "description": "(4) "
    },
    "RollPercentage": {
        "body": [
            "RollPercentage( ${int_1} )",
            "-- (int nPct)"
        ],
        "prefix": "RollPercentage",
        "description": "(int nPct)"
    },
    "CreateUnitByNameAsync": {
        "body": [
            "CreateUnitByNameAsync( ${string_1}, ${Vector_2}, ${bool_3}, ${handle_4}, ${handle_5}, ${int_6}, ${handle_7} )",
            "-- Creates a DOTA unit by its dota_npc_units.txt name"
        ],
        "prefix": "CreateUnitByNameAsync",
        "description": "Creates a DOTA unit by its dota_npc_units.txt name"
    },
    "DOTA_HEROPICK_STATE_CD_SELECT10": {
        "body": [
            "DOTA_HEROPICK_STATE_CD_SELECT10"
        ],
        "prefix": "DOTA_HEROPICK_STATE_CD_SELECT10",
        "description": "(48) "
    },
    "CDOTA_Modifier_Lua:GetAttributes": {
        "body": [
            "GetAttributes(  )",
            "-- Return the types of attributes applied to this modifier (enum value from DOTAModifierAttribute_t"
        ],
        "prefix": "GetAttributes",
        "description": "Return the types of attributes applied to this modifier (enum value from DOTAModifierAttribute_t"
    },
    "CDOTA_Item_Lua:GetChannelledManaCostPerSecond": {
        "body": [
            "GetChannelledManaCostPerSecond( ${iLevel} )",
            "-- Return mana cost at the given level per second while channeling (-1 is current)."
        ],
        "prefix": "GetChannelledManaCostPerSecond",
        "description": "Return mana cost at the given level per second while channeling (-1 is current)."
    },
    "CDOTABaseGameMode:SetCustomBuybackCostEnabled": {
        "body": [
            "SetCustomBuybackCostEnabled( ${bEnabled} )",
            "-- Turns on capability to define custom buyback costs."
        ],
        "prefix": "SetCustomBuybackCostEnabled",
        "description": "Turns on capability to define custom buyback costs."
    },
    "DOTA_LOADOUT_TYPE_TAIL": {
        "body": [
            "DOTA_LOADOUT_TYPE_TAIL"
        ],
        "prefix": "DOTA_LOADOUT_TYPE_TAIL",
        "description": "(13) "
    },
    "DOTA_MAX_TEAM": {
        "body": [
            "DOTA_MAX_TEAM"
        ],
        "prefix": "DOTA_MAX_TEAM",
        "description": "(24)  Max number of players per team."
    },
    "DOTA_RUNE_INVALID": {
        "body": [
            "DOTA_RUNE_INVALID"
        ],
        "prefix": "DOTA_RUNE_INVALID",
        "description": "(-1) "
    },
    "CDOTA_PlayerResource:IsValidTeamPlayer": {
        "body": [
            "IsValidTeamPlayer( ${iPlayerID} )",
            "-- "
        ],
        "prefix": "IsValidTeamPlayer",
        "description": ""
    },
    "TraceCollideable": {
        "body": [
            "TraceCollideable( ${handle_1} )",
            "-- Pass table - Inputs: start, end, ent, (optional mins, maxs) -- outputs: pos, fraction, hit, startsolid, normal"
        ],
        "prefix": "TraceCollideable",
        "description": "Pass table - Inputs: start, end, ent, (optional mins, maxs) -- outputs: pos, fraction, hit, startsolid, normal"
    },
    "MODIFIER_STATE_NOT_ON_MINIMAP_FOR_ENEMIES": {
        "body": [
            "MODIFIER_STATE_NOT_ON_MINIMAP_FOR_ENEMIES"
        ],
        "prefix": "MODIFIER_STATE_NOT_ON_MINIMAP_FOR_ENEMIES",
        "description": "(20) "
    },
    "DOTA_DAMAGE_FLAG_BYPASSES_BLOCK": {
        "body": [
            "DOTA_DAMAGE_FLAG_BYPASSES_BLOCK"
        ],
        "prefix": "DOTA_DAMAGE_FLAG_BYPASSES_BLOCK",
        "description": "(8) "
    },
    "DOTA_MUSIC_STATUS_BATTLE": {
        "body": [
            "DOTA_MUSIC_STATUS_BATTLE"
        ],
        "prefix": "DOTA_MUSIC_STATUS_BATTLE",
        "description": "(2) "
    },
    "DOTA_ModifyGold_AbandonedRedistribute": {
        "body": [
            "DOTA_ModifyGold_AbandonedRedistribute"
        ],
        "prefix": "DOTA_ModifyGold_AbandonedRedistribute",
        "description": "(5) "
    },
    "CDOTA_BaseNPC:HasModifier": {
        "body": [
            "HasModifier( ${pszScriptName} )",
            "-- Sees if this unit has a given modifier."
        ],
        "prefix": "HasModifier",
        "description": "Sees if this unit has a given modifier."
    },
    "CDOTA_BaseNPC:GetPlayerOwner": {
        "body": [
            "GetPlayerOwner(  )",
            "-- Returns the player that owns this unit."
        ],
        "prefix": "GetPlayerOwner",
        "description": "Returns the player that owns this unit."
    },
    "CDOTABaseAbility:IsCooldownReady": {
        "body": [
            "IsCooldownReady(  )",
            "-- "
        ],
        "prefix": "IsCooldownReady",
        "description": ""
    },
    "CBaseEntity:GetChildren": {
        "body": [
            "GetChildren(  )",
            "-- Get the entities parented to this entity."
        ],
        "prefix": "GetChildren",
        "description": "Get the entities parented to this entity."
    },
    "CDOTA_BaseNPC:RemoveModifierByNameAndCaster": {
        "body": [
            "RemoveModifierByNameAndCaster( ${pszScriptName}, ${hCaster} )",
            "-- Removes a modifier that was cast by the given caster."
        ],
        "prefix": "RemoveModifierByNameAndCaster",
        "description": "Removes a modifier that was cast by the given caster."
    },
    "DOTA_TEAM_CUSTOM_6": {
        "body": [
            "DOTA_TEAM_CUSTOM_6"
        ],
        "prefix": "DOTA_TEAM_CUSTOM_6",
        "description": "(11) "
    },
    "CDOTA_BaseNPC_Creature:SetXPGain": {
        "body": [
            "SetXPGain( ${nXPGain} )",
            "-- Set the xp reward gained per level on this creature."
        ],
        "prefix": "SetXPGain",
        "description": "Set the xp reward gained per level on this creature."
    },
    "CDOTA_BaseNPC:GetAbilityCount": {
        "body": [
            "GetAbilityCount(  )",
            "-- "
        ],
        "prefix": "GetAbilityCount",
        "description": ""
    },
    "DOTA_HEROPICK_STATE_CM_BAN5": {
        "body": [
            "DOTA_HEROPICK_STATE_CM_BAN5"
        ],
        "prefix": "DOTA_HEROPICK_STATE_CM_BAN5",
        "description": "(11) "
    },
    "CDOTA_Item_Lua:CastFilterResultTarget": {
        "body": [
            "CastFilterResultTarget( ${hTarget} )",
            "-- (HSCRIPT hTarget) Determine whether an issued command on a target is valid."
        ],
        "prefix": "CastFilterResultTarget",
        "description": "(HSCRIPT hTarget) Determine whether an issued command on a target is valid."
    },
    "CDOTABaseAbility:OnHeroLevelUp": {
        "body": [
            "OnHeroLevelUp(  )",
            "-- "
        ],
        "prefix": "OnHeroLevelUp",
        "description": ""
    },
    "CDOTA_Modifier_Lua_Motion_Both:GetPriority": {
        "body": [
            "GetPriority(  )",
            "-- Get the priority"
        ],
        "prefix": "GetPriority",
        "description": "Get the priority"
    },
    "CEntities:FindAllInSphere": {
        "body": [
            "FindAllInSphere( ${Vector_1}, ${float_2} )",
            "-- Find entities within a radius."
        ],
        "prefix": "FindAllInSphere",
        "description": "Find entities within a radius."
    },
    "CDOTABaseGameMode:SetTopBarTeamValue": {
        "body": [
            "SetTopBarTeamValue( ${iTeam}, ${nValue} )",
            "-- Set the team values on the top game bar."
        ],
        "prefix": "SetTopBarTeamValue",
        "description": "Set the team values on the top game bar."
    },
    "CDOTA_PlayerResource:IsValidPlayer": {
        "body": [
            "IsValidPlayer( ${iPlayerID} )",
            "-- "
        ],
        "prefix": "IsValidPlayer",
        "description": ""
    },
    "ACT_DOTA_ARCTIC_BURN_END": {
        "body": [
            "ACT_DOTA_ARCTIC_BURN_END"
        ],
        "prefix": "ACT_DOTA_ARCTIC_BURN_END",
        "description": "(1682) "
    },
    "CCustomGameEventManager:Send_ServerToAllClients": {
        "body": [
            "Send_ServerToAllClients( ${string_1}, ${handle_2} )",
            "-- ( string EventName, table EventData )"
        ],
        "prefix": "Send_ServerToAllClients",
        "description": "( string EventName, table EventData )"
    },
    "CDOTABaseAbility:IsPassive": {
        "body": [
            "IsPassive(  )",
            "-- "
        ],
        "prefix": "IsPassive",
        "description": ""
    },
    "DebugDrawBoxDirection": {
        "body": [
            "DebugDrawBoxDirection( ${vOrigin}, ${vMins}, ${vMaxs}, ${vForward}, ${vRGB}, ${fAlpha}, ${fDuration} )",
            "-- Draws a debug box. Mins and Maxs are vectors in any two opposite corners",
            "-- Forward defines a normal to one of the faces, only the X-Y plane is taken into account"
        ],
        "prefix": "DebugDrawBoxDirection",
        "description": "Draw a debug forward box (cent, min, max, forward, vRgb, a, duration)"
    },
    "CDOTA_Item_Lua:GetGoldCost": {
        "body": [
            "GetGoldCost( ${iLevel} )",
            "-- Return gold cost at the given level (-1 is current)."
        ],
        "prefix": "GetGoldCost",
        "description": "Return gold cost at the given level (-1 is current)."
    },
    "CDOTA_Item_Lua:OnProjectileHit": {
        "body": [
            "OnProjectileHit( ${hTarget}, ${vLocation} )",
            "-- (HSCRIPT hTarget, Vector vLocation) Projectile has collided with a given target or reached its destination (target is invalid)."
        ],
        "prefix": "OnProjectileHit",
        "description": "(HSCRIPT hTarget, Vector vLocation) Projectile has collided with a given target or reached its destination (target is invalid)."
    },
    "CEntityInstance:ConnectOutput": {
        "body": [
            "ConnectOutput( ${string_1}, ${string_2} )",
            "-- Adds an I/O connection that will call the named function on this entity when the specified output fires."
        ],
        "prefix": "ConnectOutput",
        "description": "Adds an I/O connection that will call the named function on this entity when the specified output fires."
    },
    "DOTA_UNIT_TARGET_BASIC": {
        "body": [
            "DOTA_UNIT_TARGET_BASIC"
        ],
        "prefix": "DOTA_UNIT_TARGET_BASIC",
        "description": "(18) "
    },
    "CDOTA_BaseNPC:IsCreature": {
        "body": [
            "IsCreature(  )",
            "-- Is this a Creature type NPC?"
        ],
        "prefix": "IsCreature",
        "description": "Is this a Creature type NPC?"
    },
    "CDOTA_Modifier_Lua:IsAura": {
        "body": [
            "IsAura(  )",
            "-- True/false if this modifier is an aura."
        ],
        "prefix": "IsAura",
        "description": "True/false if this modifier is an aura."
    },
    "CDOTA_Ability_Lua:OnProjectileThink": {
        "body": [
            "OnProjectileThink( ${vLocation} )",
            "-- (Vector vLocation) Projectile is actively moving."
        ],
        "prefix": "OnProjectileThink",
        "description": "(Vector vLocation) Projectile is actively moving."
    },
    "DOTA_UNIT_TARGET_FLAG_RANGED_ONLY": {
        "body": [
            "DOTA_UNIT_TARGET_FLAG_RANGED_ONLY"
        ],
        "prefix": "DOTA_UNIT_TARGET_FLAG_RANGED_ONLY",
        "description": "(2) "
    },
    "CDOTA_Item:GetInitialCharges": {
        "body": [
            "GetInitialCharges(  )",
            "-- Get the initial number of charges this item has."
        ],
        "prefix": "GetInitialCharges",
        "description": "Get the initial number of charges this item has."
    },
    "DOTA_HEROPICK_STATE_CD_BAN3": {
        "body": [
            "DOTA_HEROPICK_STATE_CD_BAN3"
        ],
        "prefix": "DOTA_HEROPICK_STATE_CD_BAN3",
        "description": "(35) "
    },
    "CDOTA_Ability_Lua:GetBehavior": {
        "body": [
            "GetBehavior(  )",
            "-- Return cast behavior type of this ability."
        ],
        "prefix": "GetBehavior",
        "description": "Return cast behavior type of this ability."
    },
    "DOTA_HEROPICK_STATE_CM_BAN2": {
        "body": [
            "DOTA_HEROPICK_STATE_CM_BAN2"
        ],
        "prefix": "DOTA_HEROPICK_STATE_CM_BAN2",
        "description": "(8) "
    },
    "rr_QueryBestResponse": {
        "body": [
            "rr_QueryBestResponse( ${handle_1}, ${handle_2}, ${handle_3} )",
            "-- Params: (entity, query) : tests 'query' against entity's response system and returns the best response found (or null if none found)."
        ],
        "prefix": "rr_QueryBestResponse",
        "description": "Params: (entity, query) : tests 'query' against entity's response system and returns the best response found (or null if none found)."
    },
    "ACT_DOTA_UNDYING_SOUL_RIP": {
        "body": [
            "ACT_DOTA_UNDYING_SOUL_RIP"
        ],
        "prefix": "ACT_DOTA_UNDYING_SOUL_RIP",
        "description": "(1667) "
    },
    "EmitSoundOnLocationWithCaster": {
        "body": [
            "EmitSoundOnLocationWithCaster( ${Vector_1}, ${string_2}, ${handle_3} )",
            "-- Emit a sound on a location from a unit. (vLocation, soundName, hCaster)."
        ],
        "prefix": "EmitSoundOnLocationWithCaster",
        "description": "Emit a sound on a location from a unit. (vLocation, soundName, hCaster)."
    },
    "MODIFIER_PROPERTY_MOVESPEED_BONUS_UNIQUE": {
        "body": [
            "MODIFIER_PROPERTY_MOVESPEED_BONUS_UNIQUE"
        ],
        "prefix": "MODIFIER_PROPERTY_MOVESPEED_BONUS_UNIQUE",
        "description": "(14)  GetModifierMoveSpeedBonus_Special_Boots"
    },
    "CEnvEntityMaker:SpawnEntityAtEntityOrigin": {
        "body": [
            "SpawnEntityAtEntityOrigin( ${hEntity} )",
            "-- Create an entity at the location of a specified entity instance"
        ],
        "prefix": "SpawnEntityAtEntityOrigin",
        "description": "Create an entity at the location of a specified entity instance"
    },
    "DOTA_ABILITY_SPEAK_START_ACTION_PHASE": {
        "body": [
            "DOTA_ABILITY_SPEAK_START_ACTION_PHASE"
        ],
        "prefix": "DOTA_ABILITY_SPEAK_START_ACTION_PHASE",
        "description": "(0) "
    },
    "ACT_DOTA_KINETIC_FIELD": {
        "body": [
            "ACT_DOTA_KINETIC_FIELD"
        ],
        "prefix": "ACT_DOTA_KINETIC_FIELD",
        "description": "(1679) "
    },
    "CEntities:FindByModel": {
        "body": [
            "FindByModel( ${handle_1}, ${string_2} )",
            "-- Find entities by model name. Pass 'null' to start an iteration, or reference to a previously found entity to continue a search"
        ],
        "prefix": "FindByModel",
        "description": "Find entities by model name. Pass 'null' to start an iteration, or reference to a previously found entity to continue a search"
    },
    "DOTA_GAMERULES_STATE_PRE_GAME": {
        "body": [
            "DOTA_GAMERULES_STATE_PRE_GAME"
        ],
        "prefix": "DOTA_GAMERULES_STATE_PRE_GAME",
        "description": "(6) "
    },
    "ProjectileManager:ProjectileDodge": {
        "body": [
            "ProjectileDodge( ${handle_1} )",
            "-- Makes the specified unit dodge projectiles"
        ],
        "prefix": "ProjectileDodge",
        "description": "Makes the specified unit dodge projectiles"
    },
    "CDOTA_Modifier_Lua_Horizontal_Motion:GetPriority": {
        "body": [
            "GetPriority(  )",
            "-- Get the priority"
        ],
        "prefix": "GetPriority",
        "description": "Get the priority"
    },
    "CBaseEntity:GetOwnerEntity": {
        "body": [
            "GetOwnerEntity(  )",
            "-- Get the owner entity, if there is one"
        ],
        "prefix": "GetOwnerEntity",
        "description": "Get the owner entity, if there is one"
    },
    "DOTA_HUD_VISIBILITY_INVENTORY_SHOP": {
        "body": [
            "DOTA_HUD_VISIBILITY_INVENTORY_SHOP"
        ],
        "prefix": "DOTA_HUD_VISIBILITY_INVENTORY_SHOP",
        "description": "(6) "
    },
    "CDOTABaseAbility:SetChanneling": {
        "body": [
            "SetChanneling( ${bChanneling} )",
            "-- "
        ],
        "prefix": "SetChanneling",
        "description": ""
    },
    "CDOTA_PlayerResource:ClearLastHitStreak": {
        "body": [
            "ClearLastHitStreak( ${iPlayerID} )",
            "-- "
        ],
        "prefix": "ClearLastHitStreak",
        "description": ""
    },
    "MODIFIER_PROPERTY_ATTACK_POINT_CONSTANT": {
        "body": [
            "MODIFIER_PROPERTY_ATTACK_POINT_CONSTANT"
        ],
        "prefix": "MODIFIER_PROPERTY_ATTACK_POINT_CONSTANT",
        "description": "(24)  GetModifierAttackPointConstant"
    },
    "CDOTA_PlayerResource:SetPlayerReservedState": {
        "body": [
            "SetPlayerReservedState( ${iPlayerID}, ${bReserved} )",
            "-- "
        ],
        "prefix": "SetPlayerReservedState",
        "description": ""
    },
    "CDOTA_PlayerResource:GetSelectedHeroName": {
        "body": [
            "GetSelectedHeroName( ${iPlayerID} )",
            "-- "
        ],
        "prefix": "GetSelectedHeroName",
        "description": ""
    },
    "ACT_DOTA_FORCESTAFF_END": {
        "body": [
            "ACT_DOTA_FORCESTAFF_END"
        ],
        "prefix": "ACT_DOTA_FORCESTAFF_END",
        "description": "(1602) "
    },
    "CDebugOverlayScriptHelper:EntityBounds": {
        "body": [
            "EntityBounds( ${ehandle_1}, ${int_2}, ${int_3}, ${int_4}, ${int_5}, ${bool_6}, ${float_7} )",
            "-- Draws bounds of an entity"
        ],
        "prefix": "EntityBounds",
        "description": "Draws bounds of an entity"
    },
    "DOTA_LOADOUT_TYPE_WEAPON2": {
        "body": [
            "DOTA_LOADOUT_TYPE_WEAPON2"
        ],
        "prefix": "DOTA_LOADOUT_TYPE_WEAPON2",
        "description": "(2) "
    },
    "CDOTABaseAbility:IsOwnersManaEnough": {
        "body": [
            "IsOwnersManaEnough(  )",
            "-- "
        ],
        "prefix": "IsOwnersManaEnough",
        "description": ""
    },
    "MODIFIER_EVENT_ON_ABILITY_FULLY_CAST": {
        "body": [
            "MODIFIER_EVENT_ON_ABILITY_FULLY_CAST"
        ],
        "prefix": "MODIFIER_EVENT_ON_ABILITY_FULLY_CAST",
        "description": "(110)  OnAbilityFullyCast"
    },
    "CDOTA_BaseNPC:GetHealthPercent": {
        "body": [
            "GetHealthPercent(  )",
            "-- Get the current health percent of the unit."
        ],
        "prefix": "GetHealthPercent",
        "description": "Get the current health percent of the unit."
    },
    "CDOTA_BaseNPC_Hero:GetAgility": {
        "body": [
            "GetAgility(  )",
            "-- "
        ],
        "prefix": "GetAgility",
        "description": ""
    },
    "CDOTA_BaseNPC:NoTeamSelect": {
        "body": [
            "NoTeamSelect(  )",
            "-- "
        ],
        "prefix": "NoTeamSelect",
        "description": ""
    },
    "MODIFIER_PROPERTY_PRESERVE_PARTICLES_ON_MODEL_CHANGE": {
        "body": [
            "MODIFIER_PROPERTY_PRESERVE_PARTICLES_ON_MODEL_CHANGE"
        ],
        "prefix": "MODIFIER_PROPERTY_PRESERVE_PARTICLES_ON_MODEL_CHANGE",
        "description": "(148)  PreserveParticlesOnModelChanged"
    },
    "CBaseFlex:GetCurrentScene": {
        "body": [
            "GetCurrentScene(  )",
            "-- Returns the instance of the oldest active scene entity (if any)."
        ],
        "prefix": "GetCurrentScene",
        "description": "Returns the instance of the oldest active scene entity (if any)."
    },
    "CDOTABaseGameMode:SetCustomGameForceHero": {
        "body": [
            "SetCustomGameForceHero( ${pHeroName} )",
            "-- Force all players to use the specified hero and disable the normal hero selection process. Must be used before hero selection."
        ],
        "prefix": "SetCustomGameForceHero",
        "description": "Force all players to use the specified hero and disable the normal hero selection process. Must be used before hero selection."
    },
    "MODIFIER_PROPERTY_MANACOST_PERCENTAGE": {
        "body": [
            "MODIFIER_PROPERTY_MANACOST_PERCENTAGE"
        ],
        "prefix": "MODIFIER_PROPERTY_MANACOST_PERCENTAGE",
        "description": "(68)  GetModifierPercentageManacost"
    },
    "UpdateEventPoints": {
        "body": [
            "UpdateEventPoints( ${handle_1} )",
            "-- "
        ],
        "prefix": "UpdateEventPoints",
        "description": ""
    },
    "CDOTA_BaseNPC_Hero:SetRespawnPosition": {
        "body": [
            "SetRespawnPosition( ${vOrigin} )",
            "-- "
        ],
        "prefix": "SetRespawnPosition",
        "description": ""
    },
    "DOTA_HEROPICK_STATE_CM_SELECT2": {
        "body": [
            "DOTA_HEROPICK_STATE_CM_SELECT2"
        ],
        "prefix": "DOTA_HEROPICK_STATE_CM_SELECT2",
        "description": "(18) "
    },
    "CDOTA_BaseNPC_Hero:UnitCanRespawn": {
        "body": [
            "UnitCanRespawn(  )",
            "-- "
        ],
        "prefix": "UnitCanRespawn",
        "description": ""
    },
    "CToneMapControllerComponent:SetMaxExposure": {
        "body": [
            "SetMaxExposure( ${float_1} )",
            "-- Sets max exposure for this tonemap controller"
        ],
        "prefix": "SetMaxExposure",
        "description": "Sets max exposure for this tonemap controller"
    },
    "MODIFIER_EVENT_ON_REFRESH": {
        "body": [
            "MODIFIER_EVENT_ON_REFRESH"
        ],
        "prefix": "MODIFIER_EVENT_ON_REFRESH",
        "description": "(114) "
    },
    "CDOTABaseAbility:GetToggleState": {
        "body": [
            "GetToggleState(  )",
            "-- "
        ],
        "prefix": "GetToggleState",
        "description": ""
    },
    "DebugDrawBox": {
        "body": [
            "DebugDrawBox( ${vOrigin}, ${vMins}, ${vMaxs}, ${iRed}, ${iGreen}, ${iBlue}, ${iAlpha}, ${fDuration} )",
            "-- Draws a debug box. Mins and Maxs are vectors in any two opposite corners"
        ],
        "prefix": "DebugDrawBox",
        "description": "Draw a debug overlay box (origin, mins, maxs, forward, r, g, b, a, duration )"
    },
    "DOTA_HERO_PICK_STATE_CUSTOMGAME_SELECT": {
        "body": [
            "DOTA_HERO_PICK_STATE_CUSTOMGAME_SELECT"
        ],
        "prefix": "DOTA_HERO_PICK_STATE_CUSTOMGAME_SELECT",
        "description": "(54) "
    },
    "DOTA_ITEM_SLOT_2": {
        "body": [
            "DOTA_ITEM_SLOT_2"
        ],
        "prefix": "DOTA_ITEM_SLOT_2",
        "description": "(1) "
    },
    "DOTA_TEAM_CUSTOM_4": {
        "body": [
            "DOTA_TEAM_CUSTOM_4"
        ],
        "prefix": "DOTA_TEAM_CUSTOM_4",
        "description": "(9) "
    },
    "CDOTABaseAbility:GetCloneSource": {
        "body": [
            "GetCloneSource(  )",
            "-- "
        ],
        "prefix": "GetCloneSource",
        "description": ""
    },
    "IsClient": {
        "body": [
            "IsClient(  )",
            "-- Returns true if this is lua running from the client.dll."
        ],
        "prefix": "IsClient",
        "description": "Returns true if this is lua running from the client.dll."
    },
    "ACT_DOTA_SHOPKEEPER_PET_INTERACT": {
        "body": [
            "ACT_DOTA_SHOPKEEPER_PET_INTERACT"
        ],
        "prefix": "ACT_DOTA_SHOPKEEPER_PET_INTERACT",
        "description": "(1695) "
    },
    "ITEM_FULLY_SHAREABLE": {
        "body": [
            "ITEM_FULLY_SHAREABLE"
        ],
        "prefix": "ITEM_FULLY_SHAREABLE",
        "description": "(0) "
    },
    "MODIFIER_PROPERTY_ATTACK_RANGE_BONUS": {
        "body": [
            "MODIFIER_PROPERTY_ATTACK_RANGE_BONUS"
        ],
        "prefix": "MODIFIER_PROPERTY_ATTACK_RANGE_BONUS",
        "description": "(60)  GetModifierAttackRangeBonus"
    },
    "CDOTA_BaseNPC:IsIllusion": {
        "body": [
            "IsIllusion(  )",
            "-- "
        ],
        "prefix": "IsIllusion",
        "description": ""
    },
    "CDOTA_Item_Lua:CastFilterResultLocation": {
        "body": [
            "CastFilterResultLocation( ${vLocation} )",
            "-- (Vector vLocation) Determine whether an issued command on a location is valid."
        ],
        "prefix": "CastFilterResultLocation",
        "description": "(Vector vLocation) Determine whether an issued command on a location is valid."
    },
    "PATTACH_EYES_FOLLOW": {
        "body": [
            "PATTACH_EYES_FOLLOW"
        ],
        "prefix": "PATTACH_EYES_FOLLOW",
        "description": "(6) "
    },
    "CDOTA_BaseNPC:GetBaseMoveSpeed": {
        "body": [
            "GetBaseMoveSpeed(  )",
            "-- "
        ],
        "prefix": "GetBaseMoveSpeed",
        "description": ""
    },
    "ACT_DOTA_OVERRIDE_ABILITY_4": {
        "body": [
            "ACT_DOTA_OVERRIDE_ABILITY_4"
        ],
        "prefix": "ACT_DOTA_OVERRIDE_ABILITY_4",
        "description": "(1519) "
    },
    "CDOTA_BaseNPC_Hero:GetCurrentXP": {
        "body": [
            "GetCurrentXP(  )",
            "-- Returns the amount of XP "
        ],
        "prefix": "GetCurrentXP",
        "description": "Returns the amount of XP "
    },
    "CDOTA_Item:SetPurchaseTime": {
        "body": [
            "SetPurchaseTime( ${flTime} )",
            "-- Set the purchase time of this item"
        ],
        "prefix": "SetPurchaseTime",
        "description": "Set the purchase time of this item"
    },
    "ACT_DOTA_RATTLETRAP_HOOKSHOT_END": {
        "body": [
            "ACT_DOTA_RATTLETRAP_HOOKSHOT_END"
        ],
        "prefix": "ACT_DOTA_RATTLETRAP_HOOKSHOT_END",
        "description": "(1553) "
    },
    "StartSoundEvent": {
        "body": [
            "StartSoundEvent( ${string_1}, ${handle_2} )",
            "-- Start a sound event"
        ],
        "prefix": "StartSoundEvent",
        "description": "Start a sound event"
    },
    "GetPhysVelocity": {
        "body": [
            "GetPhysVelocity( ${handle_1} )",
            "-- Get Velocity for VPHYS or normal object"
        ],
        "prefix": "GetPhysVelocity",
        "description": "Get Velocity for VPHYS or normal object"
    },
    "CPropVRHand:GetAttachment": {
        "body": [
            "GetAttachment(  )",
            "-- Get the attachment on this hand"
        ],
        "prefix": "GetAttachment",
        "description": "Get the attachment on this hand"
    },
    "ACT_DOTA_GREEVIL_CAST": {
        "body": [
            "ACT_DOTA_GREEVIL_CAST"
        ],
        "prefix": "ACT_DOTA_GREEVIL_CAST",
        "description": "(1617) "
    },
    "DOTA_MUSIC_STATUS_EXPLORATION": {
        "body": [
            "DOTA_MUSIC_STATUS_EXPLORATION"
        ],
        "prefix": "DOTA_MUSIC_STATUS_EXPLORATION",
        "description": "(1) "
    },
    "CDOTA_BaseNPC_Hero:SetBuybackGoldLimitTime": {
        "body": [
            "SetBuybackGoldLimitTime( ${flTime} )",
            "-- Set the amount of time gold gain is limited after buying back."
        ],
        "prefix": "SetBuybackGoldLimitTime",
        "description": "Set the amount of time gold gain is limited after buying back."
    },
    "FindUnitsInRadius": {
        "body": [
            "FindUnitsInRadius( ${int_1}, ${Vector_2}, ${handle_3}, ${float_4}, ${int_5}, ${int_6}, ${int_7}, ${int_8}, ${bool_9} )",
            "-- Finds the units in a given radius with the given flags."
        ],
        "prefix": "FindUnitsInRadius",
        "description": "Finds the units in a given radius with the given flags."
    },
    "DOTA_ITEM_SLOT_5": {
        "body": [
            "DOTA_ITEM_SLOT_5"
        ],
        "prefix": "DOTA_ITEM_SLOT_5",
        "description": "(4) "
    },
    "CBaseEntity:Kill": {
        "body": [
            "Kill(  )",
            "-- "
        ],
        "prefix": "Kill",
        "description": ""
    },
    "CDOTA_BaseNPC_Hero:GetAdditionalOwnedUnits": {
        "body": [
            "GetAdditionalOwnedUnits(  )",
            "-- "
        ],
        "prefix": "GetAdditionalOwnedUnits",
        "description": ""
    },
    "DOTA_LOADOUT_TYPE_TEAM_SHOWCASE": {
        "body": [
            "DOTA_LOADOUT_TYPE_TEAM_SHOWCASE"
        ],
        "prefix": "DOTA_LOADOUT_TYPE_TEAM_SHOWCASE",
        "description": "(42) "
    },
    "CDOTA_BaseNPC_Hero:GetBaseDamageMax": {
        "body": [
            "GetBaseDamageMax(  )",
            "-- Hero damage is also affected by attributes."
        ],
        "prefix": "GetBaseDamageMax",
        "description": "Hero damage is also affected by attributes."
    },
    "CDOTA_Ability_Lua:GetAssociatedPrimaryAbilities": {
        "body": [
            "GetAssociatedPrimaryAbilities(  )",
            "-- Returns abilities that are stolen simultaneously, or otherwise related in functionality."
        ],
        "prefix": "GetAssociatedPrimaryAbilities",
        "description": "Returns abilities that are stolen simultaneously, or otherwise related in functionality."
    },
    "CDOTA_PlayerResource:HasRepicked": {
        "body": [
            "HasRepicked( ${iPlayerID} )",
            "-- "
        ],
        "prefix": "HasRepicked",
        "description": ""
    },
    "CDOTA_PlayerResource:GetStreak": {
        "body": [
            "GetStreak( ${iPlayerID} )",
            "-- "
        ],
        "prefix": "GetStreak",
        "description": ""
    },
    "DoEntFireByInstanceHandle": {
        "body": [
            "DoEntFireByInstanceHandle( ${handle_1}, ${string_2}, ${string_3}, ${float_4}, ${handle_5}, ${handle_6} )",
            "-- #EntFireByHandle:Generate and entity i/o event"
        ],
        "prefix": "DoEntFireByInstanceHandle",
        "description": "#EntFireByHandle:Generate and entity i/o event"
    },
    "DOTA_HEROPICK_STATE_CD_SELECT4": {
        "body": [
            "DOTA_HEROPICK_STATE_CD_SELECT4"
        ],
        "prefix": "DOTA_HEROPICK_STATE_CD_SELECT4",
        "description": "(42) "
    },
    "DOTA_SPEECH_GOOD_TEAM": {
        "body": [
            "DOTA_SPEECH_GOOD_TEAM"
        ],
        "prefix": "DOTA_SPEECH_GOOD_TEAM",
        "description": "(6) "
    },
    "CDotaQuest:SetTextReplaceString": {
        "body": [
            "SetTextReplaceString( ${pszString} )",
            "-- Set the text replace string for this quest"
        ],
        "prefix": "SetTextReplaceString",
        "description": "Set the text replace string for this quest"
    },
    "DOTA_RUNE_INVISIBILITY": {
        "body": [
            "DOTA_RUNE_INVISIBILITY"
        ],
        "prefix": "DOTA_RUNE_INVISIBILITY",
        "description": "(3) "
    },
    "DOTA_ABILITY_BEHAVIOR_ROOT_DISABLES": {
        "body": [
            "DOTA_ABILITY_BEHAVIOR_ROOT_DISABLES"
        ],
        "prefix": "DOTA_ABILITY_BEHAVIOR_ROOT_DISABLES",
        "description": "(524288) "
    },
    "MODIFIER_STATE_LOW_ATTACK_PRIORITY": {
        "body": [
            "MODIFIER_STATE_LOW_ATTACK_PRIORITY"
        ],
        "prefix": "MODIFIER_STATE_LOW_ATTACK_PRIORITY",
        "description": "(21) "
    },
    "MODIFIER_PROPERTY_PROJECTILE_SPEED_BONUS": {
        "body": [
            "MODIFIER_PROPERTY_PROJECTILE_SPEED_BONUS"
        ],
        "prefix": "MODIFIER_PROPERTY_PROJECTILE_SPEED_BONUS",
        "description": "(61)  GetModifierProjectileSpeedBonus"
    },
    "CBaseEntity:GetTeamNumber": {
        "body": [
            "GetTeamNumber(  )",
            "-- Get the team number of this entity."
        ],
        "prefix": "GetTeamNumber",
        "description": "Get the team number of this entity."
    },
    "PATTACH_ABSORIGIN": {
        "body": [
            "PATTACH_ABSORIGIN"
        ],
        "prefix": "PATTACH_ABSORIGIN",
        "description": "(0) "
    },
    "CDOTA_BaseNPC_Creature:SetHPGain": {
        "body": [
            "SetHPGain( ${nHPGain} )",
            "-- Set the hit points gained per level on this creature."
        ],
        "prefix": "SetHPGain",
        "description": "Set the hit points gained per level on this creature."
    },
    "DOTA_HUD_VISIBILITY_INVENTORY_PROTECT": {
        "body": [
            "DOTA_HUD_VISIBILITY_INVENTORY_PROTECT"
        ],
        "prefix": "DOTA_HUD_VISIBILITY_INVENTORY_PROTECT",
        "description": "(10) "
    },
    "GetGroundHeight": {
        "body": [
            "GetGroundHeight( ${Vector_1}, ${handle_2} )",
            "-- "
        ],
        "prefix": "GetGroundHeight",
        "description": ""
    },
    "CDotaQuest:SetTextReplaceValue": {
        "body": [
            "SetTextReplaceValue( ${valueSlot}, ${value} )",
            "-- Set a quest value"
        ],
        "prefix": "SetTextReplaceValue",
        "description": "Set a quest value"
    },
    "CDOTA_Modifier_Lua:IsPurgable": {
        "body": [
            "IsPurgable(  )",
            "-- True/false if this modifier can be purged."
        ],
        "prefix": "IsPurgable",
        "description": "True/false if this modifier can be purged."
    },
    "CDOTA_Item_Lua:OnOwnerSpawned": {
        "body": [
            "OnOwnerSpawned(  )",
            "-- Caster respawned or spawned for the first time."
        ],
        "prefix": "OnOwnerSpawned",
        "description": "Caster respawned or spawned for the first time."
    },
    "DOTA_GAMERULES_STATE_GAME_IN_PROGRESS": {
        "body": [
            "DOTA_GAMERULES_STATE_GAME_IN_PROGRESS"
        ],
        "prefix": "DOTA_GAMERULES_STATE_GAME_IN_PROGRESS",
        "description": "(7) "
    },
    "MODIFIER_PROPERTY_BOUNTY_CREEP_MULTIPLIER": {
        "body": [
            "MODIFIER_PROPERTY_BOUNTY_CREEP_MULTIPLIER"
        ],
        "prefix": "MODIFIER_PROPERTY_BOUNTY_CREEP_MULTIPLIER",
        "description": "(97)  GetModifierBountyCreepMultiplier"
    },
    "CDOTA_Modifier_Lua:GetStatusEffectName": {
        "body": [
            "GetStatusEffectName(  )",
            "-- Return the name of the status effect particle system that is created while this modifier is active."
        ],
        "prefix": "GetStatusEffectName",
        "description": "Return the name of the status effect particle system that is created while this modifier is active."
    },
    "DOTA_LOADOUT_TYPE_WEAPON": {
        "body": [
            "DOTA_LOADOUT_TYPE_WEAPON"
        ],
        "prefix": "DOTA_LOADOUT_TYPE_WEAPON",
        "description": "(0) "
    },
    "CDOTA_BaseNPC_Hero:GetRespawnTime": {
        "body": [
            "GetRespawnTime(  )",
            "-- "
        ],
        "prefix": "GetRespawnTime",
        "description": ""
    },
    "CDOTA_BaseNPC_Creature:SetMoveSpeedGain": {
        "body": [
            "SetMoveSpeedGain( ${nMoveSpeedGain} )",
            "-- Set the move speed gained per level on this creature."
        ],
        "prefix": "SetMoveSpeedGain",
        "description": "Set the move speed gained per level on this creature."
    },
    "CDOTA_Item:IsCombinable": {
        "body": [
            "IsCombinable(  )",
            "-- "
        ],
        "prefix": "IsCombinable",
        "description": ""
    },
    "ACT_DOTA_FATAL_BONDS": {
        "body": [
            "ACT_DOTA_FATAL_BONDS"
        ],
        "prefix": "ACT_DOTA_FATAL_BONDS",
        "description": "(1675) "
    },
    "ACT_DOTA_BELLYACHE_START": {
        "body": [
            "ACT_DOTA_BELLYACHE_START"
        ],
        "prefix": "ACT_DOTA_BELLYACHE_START",
        "description": "(1612) "
    },
    "CDOTA_PlayerResource:GetConnectionState": {
        "body": [
            "GetConnectionState( ${iPlayerID} )",
            "-- "
        ],
        "prefix": "GetConnectionState",
        "description": ""
    },
    "CBaseEntity:GetAngles": {
        "body": [
            "GetAngles(  )",
            "-- "
        ],
        "prefix": "GetAngles",
        "description": ""
    },
    "DOTA_UNIT_CAP_MELEE_ATTACK": {
        "body": [
            "DOTA_UNIT_CAP_MELEE_ATTACK"
        ],
        "prefix": "DOTA_UNIT_CAP_MELEE_ATTACK",
        "description": "(1) "
    },
    "CDOTA_Modifier_Lua:RemoveOnDeath": {
        "body": [
            "RemoveOnDeath(  )",
            "-- True/false if this modifier is removed when the parent dies."
        ],
        "prefix": "RemoveOnDeath",
        "description": "True/false if this modifier is removed when the parent dies."
    },
    "CDOTABaseAbility:DecrementModifierRefCount": {
        "body": [
            "DecrementModifierRefCount(  )",
            "-- "
        ],
        "prefix": "DecrementModifierRefCount",
        "description": ""
    },
    "MODIFIER_EVENT_ON_ABILITY_EXECUTED": {
        "body": [
            "MODIFIER_EVENT_ON_ABILITY_EXECUTED"
        ],
        "prefix": "MODIFIER_EVENT_ON_ABILITY_EXECUTED",
        "description": "(109)  OnAbilityExecuted"
    },
    "FrameTime": {
        "body": [
            "FrameTime(  )",
            "-- Get the time spent on the server in the last frame"
        ],
        "prefix": "FrameTime",
        "description": "Get the time spent on the server in the last frame"
    },
    "CDOTA_Item_Physical:GetContainedItem": {
        "body": [
            "GetContainedItem(  )",
            "-- Returned the contained item."
        ],
        "prefix": "GetContainedItem",
        "description": "Returned the contained item."
    },
    "CDOTA_BaseNPC_Hero:AddExperience": {
        "body": [
            "AddExperience( ${flXP}, ${nReason}, ${bApplyBotDifficultyScaling}, ${bIncrementTotal} )",
            "-- Params: Float XP, Bool applyBotDifficultyScaling"
        ],
        "prefix": "AddExperience",
        "description": "Params: Float XP, Bool applyBotDifficultyScaling"
    },
    "CDOTABaseAbility:ResetToggleOnRespawn": {
        "body": [
            "ResetToggleOnRespawn(  )",
            "-- "
        ],
        "prefix": "ResetToggleOnRespawn",
        "description": ""
    },
    "CDOTA_BaseNPC:CastAbilityOnPosition": {
        "body": [
            "CastAbilityOnPosition( ${vPosition}, ${hAbility}, ${iPlayerIndex} )",
            "-- Cast an ability on a position."
        ],
        "prefix": "CastAbilityOnPosition",
        "description": "Cast an ability on a position."
    },
    "PrecacheEntityFromTable": {
        "body": [
            "PrecacheEntityFromTable( ${string_1}, ${handle_2}, ${handle_3} )",
            "-- Precache an entity from KeyValues in table"
        ],
        "prefix": "PrecacheEntityFromTable",
        "description": "Precache an entity from KeyValues in table"
    },
    "CDOTA_BaseNPC_Hero:HasFlyingVision": {
        "body": [
            "HasFlyingVision(  )",
            "-- "
        ],
        "prefix": "HasFlyingVision",
        "description": ""
    },
    "CDOTA_Ability_Nian_Dive:SetPlaybackRate": {
        "body": [
            "SetPlaybackRate( ${flRate} )",
            "-- Override playbackrate"
        ],
        "prefix": "SetPlaybackRate",
        "description": "Override playbackrate"
    },
    "CDOTA_BaseNPC_Hero:GetBuybackCost": {
        "body": [
            "GetBuybackCost(  )",
            "-- Return integer value for the gold cost of a buyback."
        ],
        "prefix": "GetBuybackCost",
        "description": "Return integer value for the gold cost of a buyback."
    },
    "CDOTA_BaseNPC:SetBaseManaRegen": {
        "body": [
            "SetBaseManaRegen( ${flManaRegen} )",
            "-- "
        ],
        "prefix": "SetBaseManaRegen",
        "description": ""
    },
    "CDOTABaseAbility:ContinueCasting": {
        "body": [
            "ContinueCasting(  )",
            "-- "
        ],
        "prefix": "ContinueCasting",
        "description": ""
    },
    "MODIFIER_EVENT_ON_ATTACK_START": {
        "body": [
            "MODIFIER_EVENT_ON_ATTACK_START"
        ],
        "prefix": "MODIFIER_EVENT_ON_ATTACK_START",
        "description": "(100)  OnAttackStart"
    },
    "MODIFIER_PROPERTY_BONUS_VISION_PERCENTAGE": {
        "body": [
            "MODIFIER_PROPERTY_BONUS_VISION_PERCENTAGE"
        ],
        "prefix": "MODIFIER_PROPERTY_BONUS_VISION_PERCENTAGE",
        "description": "(83)  GetBonusVisionPercentage"
    },
    "MODIFIER_PROPERTY_RESPAWNTIME_PERCENTAGE": {
        "body": [
            "MODIFIER_PROPERTY_RESPAWNTIME_PERCENTAGE"
        ],
        "prefix": "MODIFIER_PROPERTY_RESPAWNTIME_PERCENTAGE",
        "description": "(64)  GetModifierPercentageRespawnTime"
    },
    "CDOTA_Ability_Lua:SpeakTrigger": {
        "body": [
            "SpeakTrigger(  )",
            "-- Return the type of speech used."
        ],
        "prefix": "SpeakTrigger",
        "description": "Return the type of speech used."
    },
    "CDOTA_PlayerResource:GetTeamKills": {
        "body": [
            "GetTeamKills( ${iTeam} )",
            "-- "
        ],
        "prefix": "GetTeamKills",
        "description": ""
    },
    "ACT_DOTA_DISABLED": {
        "body": [
            "ACT_DOTA_DISABLED"
        ],
        "prefix": "ACT_DOTA_DISABLED",
        "description": "(1509) "
    },
    "CDOTABaseGameMode:GetFogOfWarDisabled": {
        "body": [
            "GetFogOfWarDisabled(  )",
            "-- Turn the fog of war on or off."
        ],
        "prefix": "GetFogOfWarDisabled",
        "description": "Turn the fog of war on or off."
    },
    "MODIFIER_EVENT_ON_TAKEDAMAGE": {
        "body": [
            "MODIFIER_EVENT_ON_TAKEDAMAGE"
        ],
        "prefix": "MODIFIER_EVENT_ON_TAKEDAMAGE",
        "description": "(115)  OnTakeDamage"
    },
    "DOTA_SPEECH_SPECTATOR": {
        "body": [
            "DOTA_SPEECH_SPECTATOR"
        ],
        "prefix": "DOTA_SPEECH_SPECTATOR",
        "description": "(8) "
    },
    "MODIFIER_EVENT_ON_PROJECTILE_DODGE": {
        "body": [
            "MODIFIER_EVENT_ON_PROJECTILE_DODGE"
        ],
        "prefix": "MODIFIER_EVENT_ON_PROJECTILE_DODGE",
        "description": "(105)  OnProjectileDodge"
    },
    "DOTA_MINIMAP_EVENT_BASE_UNDER_ATTACK": {
        "body": [
            "DOTA_MINIMAP_EVENT_BASE_UNDER_ATTACK"
        ],
        "prefix": "DOTA_MINIMAP_EVENT_BASE_UNDER_ATTACK",
        "description": "(4) "
    },
    "CBaseCombatCharacter:GetEquippedWeapons": {
        "body": [
            "GetEquippedWeapons(  )",
            "-- GetEquippedWeapons() : Returns an array of all the equipped weapons"
        ],
        "prefix": "GetEquippedWeapons",
        "description": "GetEquippedWeapons() : Returns an array of all the equipped weapons"
    },
    "CDOTA_BaseNPC:IsUnselectable": {
        "body": [
            "IsUnselectable(  )",
            "-- "
        ],
        "prefix": "IsUnselectable",
        "description": ""
    },
    "MODIFIER_PROPERTY_PREATTACK_BONUS_DAMAGE_POST_CRIT": {
        "body": [
            "MODIFIER_PROPERTY_PREATTACK_BONUS_DAMAGE_POST_CRIT"
        ],
        "prefix": "MODIFIER_PROPERTY_PREATTACK_BONUS_DAMAGE_POST_CRIT",
        "description": "(1)  GetModifierPreAttack_BonusDamagePostCrit"
    },
    "CDOTA_BaseNPC:AlertNearbyUnits": {
        "body": [
            "AlertNearbyUnits( ${hAttacker}, ${hAbility} )",
            "-- "
        ],
        "prefix": "AlertNearbyUnits",
        "description": ""
    },
    "CDOTA_MapTree:CutDown": {
        "body": [
            "CutDown( ${nTreeNumberKnownTo} )",
            "-- Cuts down this tree. Parameters: int nTeamNumberKnownTo (-1 = invalid team)"
        ],
        "prefix": "CutDown",
        "description": "Cuts down this tree. Parameters: int nTeamNumberKnownTo (-1 = invalid team)"
    },
    "MODIFIER_EVENT_ON_ATTACK_FAIL": {
        "body": [
            "MODIFIER_EVENT_ON_ATTACK_FAIL"
        ],
        "prefix": "MODIFIER_EVENT_ON_ATTACK_FAIL",
        "description": "(103)  OnAttackFail"
    },
    "VectorToAngles": {
        "body": [
            "VectorToAngles( ${Vector_1} )",
            "-- Get Qangles (with no roll) for a Vector."
        ],
        "prefix": "VectorToAngles",
        "description": "Get Qangles (with no roll) for a Vector."
    },
    "MODIFIER_PROPERTY_MODEL_CHANGE": {
        "body": [
            "MODIFIER_PROPERTY_MODEL_CHANGE"
        ],
        "prefix": "MODIFIER_PROPERTY_MODEL_CHANGE",
        "description": "(133)  GetModifierModelChange"
    },
    "MODIFIER_PROPERTY_INVISIBILITY_LEVEL": {
        "body": [
            "MODIFIER_PROPERTY_INVISIBILITY_LEVEL"
        ],
        "prefix": "MODIFIER_PROPERTY_INVISIBILITY_LEVEL",
        "description": "(8)  GetModifierInvisibilityLevel"
    },
    "CDOTA_BaseNPC_Hero:GetIntellect": {
        "body": [
            "GetIntellect(  )",
            "-- "
        ],
        "prefix": "GetIntellect",
        "description": ""
    },
    "CDOTA_BaseNPC_Hero:GetDeathGoldCost": {
        "body": [
            "GetDeathGoldCost(  )",
            "-- "
        ],
        "prefix": "GetDeathGoldCost",
        "description": ""
    },
    "ACT_DOTA_ATTACK2": {
        "body": [
            "ACT_DOTA_ATTACK2"
        ],
        "prefix": "ACT_DOTA_ATTACK2",
        "description": "(1504) "
    },
    "MODIFIER_PROPERTY_SUPER_ILLUSION": {
        "body": [
            "MODIFIER_PROPERTY_SUPER_ILLUSION"
        ],
        "prefix": "MODIFIER_PROPERTY_SUPER_ILLUSION",
        "description": "(92)  GetModifierSuperIllusion"
    },
    "DOTA_ABILITY_BEHAVIOR_AOE": {
        "body": [
            "DOTA_ABILITY_BEHAVIOR_AOE"
        ],
        "prefix": "DOTA_ABILITY_BEHAVIOR_AOE",
        "description": "(32) "
    },
    "MODIFIER_EVENT_ON_PROCESS_UPGRADE": {
        "body": [
            "MODIFIER_EVENT_ON_PROCESS_UPGRADE"
        ],
        "prefix": "MODIFIER_EVENT_ON_PROCESS_UPGRADE",
        "description": "(113) "
    },
    "CDOTA_Modifier_Lua_Horizontal_Motion:SetPriority": {
        "body": [
            "SetPriority( ${nMotionPriority} )",
            "-- Set the priority"
        ],
        "prefix": "SetPriority",
        "description": "Set the priority"
    },
    "MODIFIER_PROPERTY_PROCATTACK_BONUS_DAMAGE_PHYSICAL": {
        "body": [
            "MODIFIER_PROPERTY_PROCATTACK_BONUS_DAMAGE_PHYSICAL"
        ],
        "prefix": "MODIFIER_PROPERTY_PROCATTACK_BONUS_DAMAGE_PHYSICAL",
        "description": "(3)  GetModifierProcAttack_BonusDamage_Physical"
    },
    "CDOTA_BaseNPC_Hero:GetAbilityPoints": {
        "body": [
            "GetAbilityPoints(  )",
            "-- Gets the current unspent ability points."
        ],
        "prefix": "GetAbilityPoints",
        "description": "Gets the current unspent ability points."
    },
    "CreateUnitFromTable": {
        "body": [
            "CreateUnitFromTable( ${handle_1}, ${Vector_2} )",
            "-- Creates a DOTA unit by its dota_npc_units.txt name from a table of entity key values and a position to spawn at."
        ],
        "prefix": "CreateUnitFromTable",
        "description": "Creates a DOTA unit by its dota_npc_units.txt name from a table of entity key values and a position to spawn at."
    },
    "ACT_DOTA_SHARPEN_WEAPON_OUT": {
        "body": [
            "ACT_DOTA_SHARPEN_WEAPON_OUT"
        ],
        "prefix": "ACT_DOTA_SHARPEN_WEAPON_OUT",
        "description": "(1638) "
    },
    "CDOTA_PlayerResource:GetTimeOfLastDeath": {
        "body": [
            "GetTimeOfLastDeath( ${iPlayerID} )",
            "-- "
        ],
        "prefix": "GetTimeOfLastDeath",
        "description": ""
    },
    "CDOTA_BaseNPC:IsMuted": {
        "body": [
            "IsMuted(  )",
            "-- "
        ],
        "prefix": "IsMuted",
        "description": ""
    },
    "CDOTA_SimpleObstruction:IsEnabled": {
        "body": [
            "IsEnabled(  )",
            "-- Returns whether the obstruction is currently active"
        ],
        "prefix": "IsEnabled",
        "description": "Returns whether the obstruction is currently active"
    },
    "PrecacheItemByNameSync": {
        "body": [
            "PrecacheItemByNameSync( ${string_1}, ${handle_2} )",
            "-- Precaches a DOTA item by its dota_npc_items.txt name"
        ],
        "prefix": "PrecacheItemByNameSync",
        "description": "Precaches a DOTA item by its dota_npc_items.txt name"
    },
    "CDOTABaseGameMode:SetCustomHeroMaxLevel": {
        "body": [
            "SetCustomHeroMaxLevel( ${nLevel} )",
            "-- Allows definition of the max level heroes can achieve (default is 25)."
        ],
        "prefix": "SetCustomHeroMaxLevel",
        "description": "Allows definition of the max level heroes can achieve (default is 25)."
    },
    "DOTA_RUNE_ILLUSION": {
        "body": [
            "DOTA_RUNE_ILLUSION"
        ],
        "prefix": "DOTA_RUNE_ILLUSION",
        "description": "(2) "
    },
    "ACT_DOTA_RELAX_LOOP_END": {
        "body": [
            "ACT_DOTA_RELAX_LOOP_END"
        ],
        "prefix": "ACT_DOTA_RELAX_LOOP_END",
        "description": "(1634) "
    },
    "MODIFIER_STATE_LAST": {
        "body": [
            "MODIFIER_STATE_LAST"
        ],
        "prefix": "MODIFIER_STATE_LAST",
        "description": "(34) "
    },
    "DOTA_STASH_SLOT_5": {
        "body": [
            "DOTA_STASH_SLOT_5"
        ],
        "prefix": "DOTA_STASH_SLOT_5",
        "description": "(10) "
    },
    "ACT_DOTA_LOADOUT": {
        "body": [
            "ACT_DOTA_LOADOUT"
        ],
        "prefix": "ACT_DOTA_LOADOUT",
        "description": "(1601) "
    },
    "DOTA_HEROPICK_STATE_AR_SELECT": {
        "body": [
            "DOTA_HEROPICK_STATE_AR_SELECT"
        ],
        "prefix": "DOTA_HEROPICK_STATE_AR_SELECT",
        "description": "(28) "
    },
    "DOTA_UNIT_TARGET_FLAG_NOT_DOMINATED": {
        "body": [
            "DOTA_UNIT_TARGET_FLAG_NOT_DOMINATED"
        ],
        "prefix": "DOTA_UNIT_TARGET_FLAG_NOT_DOMINATED",
        "description": "(2048) "
    },
    "CDOTA_Ability_Lua:GetCustomCastErrorLocation": {
        "body": [
            "GetCustomCastErrorLocation( ${vLocation} )",
            "-- (Vector vLocation) Return the error string of a failed command on a location."
        ],
        "prefix": "GetCustomCastErrorLocation",
        "description": "(Vector vLocation) Return the error string of a failed command on a location."
    },
    "ACT_DOTA_INTRO": {
        "body": [
            "ACT_DOTA_INTRO"
        ],
        "prefix": "ACT_DOTA_INTRO",
        "description": "(1623) "
    },
    "CDOTA_BaseNPC:GetLevel": {
        "body": [
            "GetLevel(  )",
            "-- Returns the level of this unit."
        ],
        "prefix": "GetLevel",
        "description": "Returns the level of this unit."
    },
    "CDOTA_BaseNPC_Creature:SetArmorGain": {
        "body": [
            "SetArmorGain( ${flArmorGain} )",
            "-- Set the armor gained per level on this creature."
        ],
        "prefix": "SetArmorGain",
        "description": "Set the armor gained per level on this creature."
    },
    "CBodyComponent:LookupSequence": {
        "body": [
            "LookupSequence(  )",
            "-- Returns a sequence id given a n"
        ],
        "prefix": "LookupSequence",
        "description": "Returns a sequence id given a n"
    },
    "CDOTABaseAbility:SetActivated": {
        "body": [
            "SetActivated( ${bActivated} )",
            "-- "
        ],
        "prefix": "SetActivated",
        "description": ""
    },
    "CBaseEntity:SetAbsOrigin": {
        "body": [
            "SetAbsOrigin( ${origin} )",
            "-- "
        ],
        "prefix": "SetAbsOrigin",
        "description": ""
    },
    "CDOTABaseGameMode:SetFountainPercentageManaRegen": {
        "body": [
            "SetFountainPercentageManaRegen( ${flPercentageManaRegen} )",
            "-- Set the percentage rate that the fountain will regen mana. (-1 for default)"
        ],
        "prefix": "SetFountainPercentageManaRegen",
        "description": "Set the percentage rate that the fountain will regen mana. (-1 for default)"
    },
    "CDOTABaseGameMode:SetAbilityTuningValueFilter": {
        "body": [
            "SetAbilityTuningValueFilter( ${hFunction}, ${hContext} )",
            "-- Set a filter function to control the tuning values that abilities use. (Modify the table and Return true to use new values, return false to use the old values)"
        ],
        "prefix": "SetAbilityTuningValueFilter",
        "description": "Set a filter function to control the tuning values that abilities use. (Modify the table and Return true to use new values, return false to use the old values)"
    },
    "CDebugOverlayScriptHelper:Box": {
        "body": [
            "Box( ${Vector_1}, ${Vector_2}, ${int_3}, ${int_4}, ${int_5}, ${int_6}, ${bool_7}, ${float_8} )",
            "-- Draws a world-space axis-aligned box. Specify bounds in world space."
        ],
        "prefix": "Box",
        "description": "Draws a world-space axis-aligned box. Specify bounds in world space."
    },
    "DOTA_MAX_PLAYER_TEAMS": {
        "body": [
            "DOTA_MAX_PLAYER_TEAMS"
        ],
        "prefix": "DOTA_MAX_PLAYER_TEAMS",
        "description": "(10)  Max number of player teams supported."
    },
    "CDOTABaseAbility:ToggleAutoCast": {
        "body": [
            "ToggleAutoCast(  )",
            "-- "
        ],
        "prefix": "ToggleAutoCast",
        "description": ""
    },
    "CDOTA_BaseNPC:GetNightTimeVisionRange": {
        "body": [
            "GetNightTimeVisionRange(  )",
            "-- Returns the vision range after modifiers."
        ],
        "prefix": "GetNightTimeVisionRange",
        "description": "Returns the vision range after modifiers."
    },
    "CDOTA_BaseNPC:MoveToNPCToGiveItem": {
        "body": [
            "MoveToNPCToGiveItem( ${hNPC}, ${hItem} )",
            "-- Give an item to another unit."
        ],
        "prefix": "MoveToNPCToGiveItem",
        "description": "Give an item to another unit."
    },
    "CDOTA_BaseNPC:GetManaRegen": {
        "body": [
            "GetManaRegen(  )",
            "-- "
        ],
        "prefix": "GetManaRegen",
        "description": ""
    },
    "ProjectileManager:DestroyLinearProjectile": {
        "body": [
            "DestroyLinearProjectile( ${int_1} )",
            "-- Destroys the linear projectile matching the argument ID"
        ],
        "prefix": "DestroyLinearProjectile",
        "description": "Destroys the linear projectile matching the argument ID"
    },
    "ACT_DOTA_PET_LEVEL": {
        "body": [
            "ACT_DOTA_PET_LEVEL"
        ],
        "prefix": "ACT_DOTA_PET_LEVEL",
        "description": "(1701) "
    },
    "CDOTA_PlayerResource:GetDeaths": {
        "body": [
            "GetDeaths( ${iPlayerID} )",
            "-- "
        ],
        "prefix": "GetDeaths",
        "description": ""
    },
    "DOTA_GAMERULES_STATE_DISCONNECT": {
        "body": [
            "DOTA_GAMERULES_STATE_DISCONNECT"
        ],
        "prefix": "DOTA_GAMERULES_STATE_DISCONNECT",
        "description": "(9) "
    },
    "CDOTA_BaseNPC_Hero:IncrementStreak": {
        "body": [
            "IncrementStreak(  )",
            "-- Value is stored in PlayerResource."
        ],
        "prefix": "IncrementStreak",
        "description": "Value is stored in PlayerResource."
    },
    "CDOTA_PlayerResource:IsValidTeamPlayerID": {
        "body": [
            "IsValidTeamPlayerID( ${iPlayerID} )",
            "-- "
        ],
        "prefix": "IsValidTeamPlayerID",
        "description": ""
    },
    "CEntityInstance:GetIntAttr": {
        "body": [
            "GetIntAttr( ${sAttr} )",
            "-- Get Integer Attribute"
        ],
        "prefix": "GetIntAttr",
        "description": "Get Integer Attribute"
    },
    "CEntityInstance:entindex": {
        "body": [
            "entindex(  )",
            "-- "
        ],
        "prefix": "entindex",
        "description": ""
    },
    "CDOTA_BaseNPC:IsClone": {
        "body": [
            "IsClone(  )",
            "-- Is this unit a clone? (Meepo)"
        ],
        "prefix": "IsClone",
        "description": "Is this unit a clone? (Meepo)"
    },
    "ACT_DOTA_VICTORY": {
        "body": [
            "ACT_DOTA_VICTORY"
        ],
        "prefix": "ACT_DOTA_VICTORY",
        "description": "(1591) "
    },
    "CDOTA_BaseNPC:IsCommandRestricted": {
        "body": [
            "IsCommandRestricted(  )",
            "-- "
        ],
        "prefix": "IsCommandRestricted",
        "description": ""
    },
    "CDOTA_PlayerResource:GetSelectedHeroID": {
        "body": [
            "GetSelectedHeroID( ${iPlayerID} )",
            "-- "
        ],
        "prefix": "GetSelectedHeroID",
        "description": ""
    },
    "MODIFIER_PROPERTY_CHANGE_ABILITY_VALUE": {
        "body": [
            "MODIFIER_PROPERTY_CHANGE_ABILITY_VALUE"
        ],
        "prefix": "MODIFIER_PROPERTY_CHANGE_ABILITY_VALUE",
        "description": "(144)  GetModifierChangeAbilityValue"
    },
    "CDOTA_PlayerResource:GetNumItemsPurchased": {
        "body": [
            "GetNumItemsPurchased( ${iPlayerID} )",
            "-- "
        ],
        "prefix": "GetNumItemsPurchased",
        "description": ""
    },
    "CDOTA_BaseNPC_Hero:IsBuybackDisabledByReapersScythe": {
        "body": [
            "IsBuybackDisabledByReapersScythe(  )",
            "-- "
        ],
        "prefix": "IsBuybackDisabledByReapersScythe",
        "description": ""
    },
    "ACT_DOTA_ANCESTRAL_SPIRIT": {
        "body": [
            "ACT_DOTA_ANCESTRAL_SPIRIT"
        ],
        "prefix": "ACT_DOTA_ANCESTRAL_SPIRIT",
        "description": "(1677) "
    },
    "DOTA_TEAM_CUSTOM_3": {
        "body": [
            "DOTA_TEAM_CUSTOM_3"
        ],
        "prefix": "DOTA_TEAM_CUSTOM_3",
        "description": "(8) "
    },
    "MODIFIER_EVENT_ON_STATE_CHANGED": {
        "body": [
            "MODIFIER_EVENT_ON_STATE_CHANGED"
        ],
        "prefix": "MODIFIER_EVENT_ON_STATE_CHANGED",
        "description": "(116)  OnStateChanged"
    },
    "SpawnEntityFromTableSynchronous": {
        "body": [
            "SpawnEntityFromTableSynchronous( ${string_1}, ${handle_2} )",
            "-- Synchronously spawns a single entity from a table"
        ],
        "prefix": "SpawnEntityFromTableSynchronous",
        "description": "Synchronously spawns a single entity from a table"
    },
    "CDOTA_BaseNPC:GetBaseMaxHealth": {
        "body": [
            "GetBaseMaxHealth(  )",
            "-- Gets the base max health value."
        ],
        "prefix": "GetBaseMaxHealth",
        "description": "Gets the base max health value."
    },
    "CDOTABaseGameMode:GetMaximumAttackSpeed": {
        "body": [
            "GetMaximumAttackSpeed(  )",
            "-- Get the maximum attack speed for units."
        ],
        "prefix": "GetMaximumAttackSpeed",
        "description": "Get the maximum attack speed for units."
    },
    "DOTA_MINIMAP_EVENT_ENEMY_TELEPORTING": {
        "body": [
            "DOTA_MINIMAP_EVENT_ENEMY_TELEPORTING"
        ],
        "prefix": "DOTA_MINIMAP_EVENT_ENEMY_TELEPORTING",
        "description": "(1024) "
    },
    "ACT_DOTA_SPIRIT_BREAKER_CHARGE_POSE": {
        "body": [
            "ACT_DOTA_SPIRIT_BREAKER_CHARGE_POSE"
        ],
        "prefix": "ACT_DOTA_SPIRIT_BREAKER_CHARGE_POSE",
        "description": "(1593) "
    },
    "MODIFIER_PROPERTY_BASE_MANA_REGEN": {
        "body": [
            "MODIFIER_PROPERTY_BASE_MANA_REGEN"
        ],
        "prefix": "MODIFIER_PROPERTY_BASE_MANA_REGEN",
        "description": "(44)  GetModifierBaseRegen"
    },
    "DOTA_HEROPICK_STATE_CM_BAN10": {
        "body": [
            "DOTA_HEROPICK_STATE_CM_BAN10"
        ],
        "prefix": "DOTA_HEROPICK_STATE_CM_BAN10",
        "description": "(16) "
    },
    "CDOTA_BaseNPC:SetBaseHealthRegen": {
        "body": [
            "SetBaseHealthRegen( ${flHealthRegen} )",
            "-- "
        ],
        "prefix": "SetBaseHealthRegen",
        "description": ""
    },
    "CPhysicsProp:DisableMotion": {
        "body": [
            "DisableMotion(  )",
            "-- Enable motion for the prop"
        ],
        "prefix": "DisableMotion",
        "description": "Enable motion for the prop"
    },
    "CDOTA_PlayerResource:GetClaimedFarm": {
        "body": [
            "GetClaimedFarm( ${iPlayerID}, ${bOnlyEarned} )",
            "-- "
        ],
        "prefix": "GetClaimedFarm",
        "description": ""
    },
    "CDOTABaseAbility:GetBackswingTime": {
        "body": [
            "GetBackswingTime(  )",
            "-- "
        ],
        "prefix": "GetBackswingTime",
        "description": ""
    },
    "CDOTA_Modifier_Lua_Vertical_Motion:GetMotionPriority": {
        "body": [
            "GetMotionPriority(  )",
            "-- Get the priority"
        ],
        "prefix": "GetMotionPriority",
        "description": "Get the priority"
    },
    "DOTA_HEROPICK_STATE_CM_BAN9": {
        "body": [
            "DOTA_HEROPICK_STATE_CM_BAN9"
        ],
        "prefix": "DOTA_HEROPICK_STATE_CM_BAN9",
        "description": "(15) "
    },
    "CDOTA_PlayerResource:SetGold": {
        "body": [
            "SetGold( ${iPlayerID}, ${iGold}, ${bReliable} )",
            "-- "
        ],
        "prefix": "SetGold",
        "description": ""
    },
    "CDOTA_Item:IsDisassemblable": {
        "body": [
            "IsDisassemblable(  )",
            "-- "
        ],
        "prefix": "IsDisassemblable",
        "description": ""
    },
    "CDOTA_BaseNPC_Hero:HeroLevelUp": {
        "body": [
            "HeroLevelUp( ${bPlayEffects} )",
            "-- Levels up the hero, true or false to play effects."
        ],
        "prefix": "HeroLevelUp",
        "description": "Levels up the hero, true or false to play effects."
    },
    "CDOTABaseGameMode:SetCustomXPRequiredToReachNextLevel": {
        "body": [
            "SetCustomXPRequiredToReachNextLevel( ${hTable} )",
            "-- Allows definition of a table of hero XP values."
        ],
        "prefix": "SetCustomXPRequiredToReachNextLevel",
        "description": "Allows definition of a table of hero XP values."
    },
    "CEntities:FindByClassname": {
        "body": [
            "FindByClassname( ${handle_1}, ${string_2} )",
            "-- Find entities by class name. Pass 'null' to start an iteration, or reference to a previously found entity to continue a search"
        ],
        "prefix": "FindByClassname",
        "description": "Find entities by class name. Pass 'null' to start an iteration, or reference to a previously found entity to continue a search"
    },
    "CDOTA_BaseNPC:MoveToTargetToAttack": {
        "body": [
            "MoveToTargetToAttack( ${hTarget} )",
            "-- Move to a target to attack."
        ],
        "prefix": "MoveToTargetToAttack",
        "description": "Move to a target to attack."
    },
    "CDOTA_Item_Lua:IsRefreshable": {
        "body": [
            "IsRefreshable(  )",
            "-- Returns true if this ability is refreshed by Refresher Orb."
        ],
        "prefix": "IsRefreshable",
        "description": "Returns true if this ability is refreshed by Refresher Orb."
    },
    "CDOTA_BaseNPC:GetAttackRange": {
        "body": [
            "GetAttackRange(  )",
            "-- Gets this unit's attack range after all modifiers."
        ],
        "prefix": "GetAttackRange",
        "description": "Gets this unit's attack range after all modifiers."
    },
    "CBaseEntity:SetConstraint": {
        "body": [
            "SetConstraint( ${vPos} )",
            "-- Set the position of the constraint."
        ],
        "prefix": "SetConstraint",
        "description": "Set the position of the constraint."
    },
    "DOTA_STASH_SLOT_2": {
        "body": [
            "DOTA_STASH_SLOT_2"
        ],
        "prefix": "DOTA_STASH_SLOT_2",
        "description": "(7) "
    },
    "CBaseEntity:SetContext": {
        "body": [
            "SetContext( ${pName}, ${pValue}, ${duration} )",
            "-- SetContext( name , value, duration ): store any key/value pair in this entity's dialog contexts. Value must be a string. Will last for duration (set 0 to mean 'forever')."
        ],
        "prefix": "SetContext",
        "description": "SetContext( name , value, duration ): store any key/value pair in this entity's dialog contexts. Value must be a string. Will last for duration (set 0 to mean 'forever')."
    },
    "CPointTemplate:SetSpawnCallback": {
        "body": [
            "SetSpawnCallback( ${hCallbackFunc}, ${hCallbackScope} )",
            "-- SetSpawnCallback( hCallbackFunc, hCallbackScope, hCallbackData ) : Set a callback for when the template spawns entities. The spawned entities will be passed in as an array."
        ],
        "prefix": "SetSpawnCallback",
        "description": "SetSpawnCallback( hCallbackFunc, hCallbackScope, hCallbackData ) : Set a callback for when the template spawns entities. The spawned entities will be passed in as an array."
    },
    "CDOTA_BaseNPC:InterruptMotionControllers": {
        "body": [
            "InterruptMotionControllers( ${bFindClearSpace} )",
            "-- "
        ],
        "prefix": "InterruptMotionControllers",
        "description": ""
    },
    "ABILITY_CANNOT_BE_UPGRADED_REQUIRES_LEVEL": {
        "body": [
            "ABILITY_CANNOT_BE_UPGRADED_REQUIRES_LEVEL"
        ],
        "prefix": "ABILITY_CANNOT_BE_UPGRADED_REQUIRES_LEVEL",
        "description": "(3) "
    },
    "DoScriptAssert": {
        "body": [
            "DoScriptAssert( ${bool_1}, ${string_2} )",
            "-- #ScriptAssert:Asserts the passed in value. Prints out a message and brings up the assert dialog."
        ],
        "prefix": "DoScriptAssert",
        "description": "#ScriptAssert:Asserts the passed in value. Prints out a message and brings up the assert dialog."
    },
    "CDOTA_Ability_Lua:GetCastAnimation": {
        "body": [
            "GetCastAnimation(  )",
            "-- Return casting animation of this ability."
        ],
        "prefix": "GetCastAnimation",
        "description": "Return casting animation of this ability."
    },
    "DOTA_UNIT_TARGET_CREEP": {
        "body": [
            "DOTA_UNIT_TARGET_CREEP"
        ],
        "prefix": "DOTA_UNIT_TARGET_CREEP",
        "description": "(2) "
    },
    "CDOTABaseGameMode:ClearBountyRunePickupFilter": {
        "body": [
            "ClearBountyRunePickupFilter(  )",
            "-- Clear the script filter that controls bounty rune pickup behavior."
        ],
        "prefix": "ClearBountyRunePickupFilter",
        "description": "Clear the script filter that controls bounty rune pickup behavior."
    },
    "DOTA_UNIT_TARGET_FLAG_MAGIC_IMMUNE_ENEMIES": {
        "body": [
            "DOTA_UNIT_TARGET_FLAG_MAGIC_IMMUNE_ENEMIES"
        ],
        "prefix": "DOTA_UNIT_TARGET_FLAG_MAGIC_IMMUNE_ENEMIES",
        "description": "(16) "
    },
    "CBaseEntity:GetAbsOrigin": {
        "body": [
            "GetAbsOrigin(  )",
            "-- "
        ],
        "prefix": "GetAbsOrigin",
        "description": ""
    },
    "DOTA_DAMAGE_FLAG_USE_COMBAT_PROFICIENCY": {
        "body": [
            "DOTA_DAMAGE_FLAG_USE_COMBAT_PROFICIENCY"
        ],
        "prefix": "DOTA_DAMAGE_FLAG_USE_COMBAT_PROFICIENCY",
        "description": "(256) "
    },
    "CDOTA_BaseNPC:GetHasteFactor": {
        "body": [
            "GetHasteFactor(  )",
            "-- "
        ],
        "prefix": "GetHasteFactor",
        "description": ""
    },
    "CDOTABaseGameMode:GetMinimumAttackSpeed": {
        "body": [
            "GetMinimumAttackSpeed(  )",
            "-- Get the minimum attack speed for units."
        ],
        "prefix": "GetMinimumAttackSpeed",
        "description": "Get the minimum attack speed for units."
    },
    "CDOTA_PlayerResource:AddRunePickup": {
        "body": [
            "AddRunePickup( ${iPlayerID} )",
            "-- "
        ],
        "prefix": "AddRunePickup",
        "description": ""
    },
    "CDebugOverlayScriptHelper:SweptBox": {
        "body": [
            "SweptBox( ${Vector_1}, ${Vector_2}, ${Vector_3}, ${Vector_4}, ${Quaternion_5}, ${int_6}, ${int_7}, ${int_8}, ${int_9}, ${float_10} )",
            "-- Draws a swept box. Specify endpoints in world space and the bounds in local space."
        ],
        "prefix": "SweptBox",
        "description": "Draws a swept box. Specify endpoints in world space and the bounds in local space."
    },
    "MODIFIER_PROPERTY_IGNORE_CAST_ANGLE": {
        "body": [
            "MODIFIER_PROPERTY_IGNORE_CAST_ANGLE"
        ],
        "prefix": "MODIFIER_PROPERTY_IGNORE_CAST_ANGLE",
        "description": "(143)  GetModifierIgnoreCastAngle"
    },
    "CDOTA_BaseNPC:SetBaseMoveSpeed": {
        "body": [
            "SetBaseMoveSpeed( ${iMoveSpeed} )",
            "-- "
        ],
        "prefix": "SetBaseMoveSpeed",
        "description": ""
    },
    "CDOTA_PlayerResource:GetTotalEarnedGold": {
        "body": [
            "GetTotalEarnedGold( ${iPlayerID} )",
            "-- "
        ],
        "prefix": "GetTotalEarnedGold",
        "description": ""
    },
    "MODIFIER_STATE_NOT_ON_MINIMAP": {
        "body": [
            "MODIFIER_STATE_NOT_ON_MINIMAP"
        ],
        "prefix": "MODIFIER_STATE_NOT_ON_MINIMAP",
        "description": "(19) "
    },
    "DOTA_LOADOUT_TYPE_ACTION_ITEM": {
        "body": [
            "DOTA_LOADOUT_TYPE_ACTION_ITEM"
        ],
        "prefix": "DOTA_LOADOUT_TYPE_ACTION_ITEM",
        "description": "(28) "
    },
    "DOTA_ABILITY_BEHAVIOR_POINT": {
        "body": [
            "DOTA_ABILITY_BEHAVIOR_POINT"
        ],
        "prefix": "DOTA_ABILITY_BEHAVIOR_POINT",
        "description": "(16) "
    },
    "MODIFIER_PROPERTY_MISS_PERCENTAGE": {
        "body": [
            "MODIFIER_PROPERTY_MISS_PERCENTAGE"
        ],
        "prefix": "MODIFIER_PROPERTY_MISS_PERCENTAGE",
        "description": "(36)  GetModifierMiss_Percentage"
    },
    "ACT_DOTA_RATTLETRAP_HOOKSHOT_LOOP": {
        "body": [
            "ACT_DOTA_RATTLETRAP_HOOKSHOT_LOOP"
        ],
        "prefix": "ACT_DOTA_RATTLETRAP_HOOKSHOT_LOOP",
        "description": "(1552) "
    },
    "ACT_DOTA_GREEVIL_BLINK_BONE": {
        "body": [
            "ACT_DOTA_GREEVIL_BLINK_BONE"
        ],
        "prefix": "ACT_DOTA_GREEVIL_BLINK_BONE",
        "description": "(1621) "
    },
    "DOTA_HUD_VISIBILITY_TOP_HEROES": {
        "body": [
            "DOTA_HUD_VISIBILITY_TOP_HEROES"
        ],
        "prefix": "DOTA_HUD_VISIBILITY_TOP_HEROES",
        "description": "(1) "
    },
    "CDOTA_PlayerResource:GetClaimedDenies": {
        "body": [
            "GetClaimedDenies( ${iPlayerID} )",
            "-- "
        ],
        "prefix": "GetClaimedDenies",
        "description": ""
    },
    "GridNav:RegrowAllTrees": {
        "body": [
            "RegrowAllTrees(  )",
            "-- Causes all trees in the map to regrow"
        ],
        "prefix": "RegrowAllTrees",
        "description": "Causes all trees in the map to regrow"
    },
    "DOTA_ModifyXP_Unspecified": {
        "body": [
            "DOTA_ModifyXP_Unspecified"
        ],
        "prefix": "DOTA_ModifyXP_Unspecified",
        "description": "(0) "
    },
    "ACT_DOTA_DIE_SPECIAL": {
        "body": [
            "ACT_DOTA_DIE_SPECIAL"
        ],
        "prefix": "ACT_DOTA_DIE_SPECIAL",
        "description": "(1548) "
    },
    "CDOTA_BaseNPC:IsPhantomBlocker": {
        "body": [
            "IsPhantomBlocker(  )",
            "-- "
        ],
        "prefix": "IsPhantomBlocker",
        "description": ""
    },
    "MODIFIER_PROPERTY_PROCATTACK_FEEDBACK": {
        "body": [
            "MODIFIER_PROPERTY_PROCATTACK_FEEDBACK"
        ],
        "prefix": "MODIFIER_PROPERTY_PROCATTACK_FEEDBACK",
        "description": "(6)  GetModifierProcAttack_Feedback"
    },
    "EmitSoundOnClient": {
        "body": [
            "EmitSoundOnClient( ${string_1}, ${handle_2} )",
            "-- Play named sound only on the client for the passed in player"
        ],
        "prefix": "EmitSoundOnClient",
        "description": "Play named sound only on the client for the passed in player"
    },
    "ACT_DOTA_CAST_FORGE_SPIRIT": {
        "body": [
            "ACT_DOTA_CAST_FORGE_SPIRIT"
        ],
        "prefix": "ACT_DOTA_CAST_FORGE_SPIRIT",
        "description": "(1588) "
    },
    "CDOTA_Item_Lua:GetPlaybackRateOverride": {
        "body": [
            "GetPlaybackRateOverride(  )",
            "-- Return the animation rate of the cast animation."
        ],
        "prefix": "GetPlaybackRateOverride",
        "description": "Return the animation rate of the cast animation."
    },
    "CDOTABaseAbility:GetAbilityTargetType": {
        "body": [
            "GetAbilityTargetType(  )",
            "-- "
        ],
        "prefix": "GetAbilityTargetType",
        "description": ""
    },
    "DOTA_HEROPICK_STATE_SD_SELECT": {
        "body": [
            "DOTA_HEROPICK_STATE_SD_SELECT"
        ],
        "prefix": "DOTA_HEROPICK_STATE_SD_SELECT",
        "description": "(2) "
    },
    "ACT_DOTA_RELAX_LOOP": {
        "body": [
            "ACT_DOTA_RELAX_LOOP"
        ],
        "prefix": "ACT_DOTA_RELAX_LOOP",
        "description": "(1609) "
    },
    "UF_FAIL_CREEP": {
        "body": [
            "UF_FAIL_CREEP"
        ],
        "prefix": "UF_FAIL_CREEP",
        "description": "(5) "
    },
    "CDOTAPlayer:SetKillCamUnit": {
        "body": [
            "SetKillCamUnit( ${hEntity} )",
            "-- Set the kill cam unit for this hero."
        ],
        "prefix": "SetKillCamUnit",
        "description": "Set the kill cam unit for this hero."
    },
    "CDOTA_PlayerResource:GetLastHits": {
        "body": [
            "GetLastHits( ${iPlayerID} )",
            "-- "
        ],
        "prefix": "GetLastHits",
        "description": ""
    },
    "MODIFIER_PROPERTY_DAMAGEOUTGOING_PERCENTAGE_ILLUSION": {
        "body": [
            "MODIFIER_PROPERTY_DAMAGEOUTGOING_PERCENTAGE_ILLUSION"
        ],
        "prefix": "MODIFIER_PROPERTY_DAMAGEOUTGOING_PERCENTAGE_ILLUSION",
        "description": "(26)  GetModifierDamageOutgoing_Percentage_Illusion"
    },
    "DOTA_STASH_SLOT_1": {
        "body": [
            "DOTA_STASH_SLOT_1"
        ],
        "prefix": "DOTA_STASH_SLOT_1",
        "description": "(6) "
    },
    "CDOTABaseAbility:GetAutoCastState": {
        "body": [
            "GetAutoCastState(  )",
            "-- "
        ],
        "prefix": "GetAutoCastState",
        "description": ""
    },
    "DOTA_MINIMAP_EVENT_TEAMMATE_UNDER_ATTACK": {
        "body": [
            "DOTA_MINIMAP_EVENT_TEAMMATE_UNDER_ATTACK"
        ],
        "prefix": "DOTA_MINIMAP_EVENT_TEAMMATE_UNDER_ATTACK",
        "description": "(16) "
    },
    "CEntities:FindAllByNameWithin": {
        "body": [
            "FindAllByNameWithin( ${string_1}, ${Vector_2}, ${float_3} )",
            "-- Find entities by name within a radius."
        ],
        "prefix": "FindAllByNameWithin",
        "description": "Find entities by name within a radius."
    },
    "DOTA_TEAM_CUSTOM_2": {
        "body": [
            "DOTA_TEAM_CUSTOM_2"
        ],
        "prefix": "DOTA_TEAM_CUSTOM_2",
        "description": "(7) "
    },
    "CDOTA_BaseNPC_Hero:SetPlayerID": {
        "body": [
            "SetPlayerID( ${iPlayerID} )",
            "-- "
        ],
        "prefix": "SetPlayerID",
        "description": ""
    },
    "CEntities:FindByClassnameWithin": {
        "body": [
            "FindByClassnameWithin( ${handle_1}, ${string_2}, ${Vector_3}, ${float_4} )",
            "-- Find entities by class name within a radius. Pass 'null' to start an iteration, or reference to a previously found entity to continue a search"
        ],
        "prefix": "FindByClassnameWithin",
        "description": "Find entities by class name within a radius. Pass 'null' to start an iteration, or reference to a previously found entity to continue a search"
    },
    "CScriptParticleManager:CreateParticleForTeam": {
        "body": [
            "CreateParticleForTeam( ${string_1}, ${int_2}, ${handle_3}, ${int_4} )",
            "-- Creates a new particle effect that only plays for the specified team"
        ],
        "prefix": "CreateParticleForTeam",
        "description": "Creates a new particle effect that only plays for the specified team"
    },
    "CDOTA_Ability_Lua:OnItemEquipped": {
        "body": [
            "OnItemEquipped( ${hItem} )",
            "-- ( HSCRIPT hItem ) Caster equipped item."
        ],
        "prefix": "OnItemEquipped",
        "description": "( HSCRIPT hItem ) Caster equipped item."
    },
    "ACT_DOTA_CAST_ABILITY_2_END": {
        "body": [
            "ACT_DOTA_CAST_ABILITY_2_END"
        ],
        "prefix": "ACT_DOTA_CAST_ABILITY_2_END",
        "description": "(1541) "
    },
    "RemoveSpawnGroupFilterProxy": {
        "body": [
            "RemoveSpawnGroupFilterProxy( ${string_1} )",
            "-- Remove the C proxy for a script-based spawn group filter"
        ],
        "prefix": "RemoveSpawnGroupFilterProxy",
        "description": "Remove the C proxy for a script-based spawn group filter"
    },
    "CDOTA_BaseNPC:ProvidesVision": {
        "body": [
            "ProvidesVision(  )",
            "-- "
        ],
        "prefix": "ProvidesVision",
        "description": ""
    },
    "GetGoldFrostyBoostAmount": {
        "body": [
            "GetGoldFrostyBoostAmount( ${int_1}, ${int_2} )",
            "-- "
        ],
        "prefix": "GetGoldFrostyBoostAmount",
        "description": ""
    },
    "CDOTA_BaseNPC:Purge": {
        "body": [
            "Purge( ${bRemovePositiveBuffs}, ${bRemoveDebuffs}, ${bFrameOnly}, ${bRemoveStuns}, ${bRemoveExceptions} )",
            "-- (bool RemovePositiveBuffs, bool RemoveDebuffs, bool BuffsCreatedThisFrameOnly, bool RemoveStuns, bool RemoveExceptions"
        ],
        "prefix": "Purge",
        "description": "(bool RemovePositiveBuffs, bool RemoveDebuffs, bool BuffsCreatedThisFrameOnly, bool RemoveStuns, bool RemoveExceptions"
    },
    "GridNav:GetAllTreesAroundPoint": {
        "body": [
            "GetAllTreesAroundPoint( ${Vector_1}, ${float_2}, ${bool_3} )",
            "-- Returns a table full of tree HSCRIPTS (vPosition, flRadius, bFullCollision)."
        ],
        "prefix": "GetAllTreesAroundPoint",
        "description": "Returns a table full of tree HSCRIPTS (vPosition, flRadius, bFullCollision)."
    },
    "ACT_DOTA_CAST_ABILITY_4_END": {
        "body": [
            "ACT_DOTA_CAST_ABILITY_4_END"
        ],
        "prefix": "ACT_DOTA_CAST_ABILITY_4_END",
        "description": "(1543) "
    },
    "UF_FAIL_MAGIC_IMMUNE_ENEMY": {
        "body": [
            "UF_FAIL_MAGIC_IMMUNE_ENEMY"
        ],
        "prefix": "UF_FAIL_MAGIC_IMMUNE_ENEMY",
        "description": "(18) "
    },
    "CDOTA_BaseNPC_Hero:SetBaseIntellect": {
        "body": [
            "SetBaseIntellect( ${flIntellect} )",
            "-- "
        ],
        "prefix": "SetBaseIntellect",
        "description": ""
    },
    "DOTA_UNIT_TARGET_COURIER": {
        "body": [
            "DOTA_UNIT_TARGET_COURIER"
        ],
        "prefix": "DOTA_UNIT_TARGET_COURIER",
        "description": "(16) "
    },
    "CDOTA_BaseNPC:FindModifierByNameAndCaster": {
        "body": [
            "FindModifierByNameAndCaster( ${pszScriptName}, ${hCaster} )",
            "-- Return a handle to the modifier of the given name from the passed caster if found, else nil ( string Name, hCaster )"
        ],
        "prefix": "FindModifierByNameAndCaster",
        "description": "Return a handle to the modifier of the given name from the passed caster if found, else nil ( string Name, hCaster )"
    },
    "CBaseEntity:GetCenter": {
        "body": [
            "GetCenter(  )",
            "-- Get vector to center of object - absolute coords"
        ],
        "prefix": "GetCenter",
        "description": "Get vector to center of object - absolute coords"
    },
    "CDOTA_PlayerResource:GetNumConsumablesPurchased": {
        "body": [
            "GetNumConsumablesPurchased( ${iPlayerID} )",
            "-- "
        ],
        "prefix": "GetNumConsumablesPurchased",
        "description": ""
    },
    "CDOTA_BaseNPC_Hero:IncrementKills": {
        "body": [
            "IncrementKills( ${iVictimID} )",
            "-- Passed ID is for the victim, killer ID is ID of the current hero.  Value is stored in PlayerResource."
        ],
        "prefix": "IncrementKills",
        "description": "Passed ID is for the victim, killer ID is ID of the current hero.  Value is stored in PlayerResource."
    },
    "QUEST_TEXT_REPLACE_VALUE_CURRENT_VALUE": {
        "body": [
            "QUEST_TEXT_REPLACE_VALUE_CURRENT_VALUE"
        ],
        "prefix": "QUEST_TEXT_REPLACE_VALUE_CURRENT_VALUE",
        "description": "(0) "
    },
    "CEntityInstance:GetClassname": {
        "body": [
            "GetClassname(  )",
            "-- "
        ],
        "prefix": "GetClassname",
        "description": ""
    },
    "DOTA_HEROPICK_STATE_CD_SELECT8": {
        "body": [
            "DOTA_HEROPICK_STATE_CD_SELECT8"
        ],
        "prefix": "DOTA_HEROPICK_STATE_CD_SELECT8",
        "description": "(46) "
    },
    "CBodyComponent:GetSequence": {
        "body": [
            "GetSequence(  )",
            "-- Returns the active seque"
        ],
        "prefix": "GetSequence",
        "description": "Returns the active seque"
    },
    "CScriptParticleManager:DestroyParticle": {
        "body": [
            "DestroyParticle( ${int_1}, ${bool_2} )",
            "-- (int index, bool bDestroyImmediately) - Destroy a particle, if bDestroyImmediately destroy it without playing end caps."
        ],
        "prefix": "DestroyParticle",
        "description": "(int index, bool bDestroyImmediately) - Destroy a particle, if bDestroyImmediately destroy it without playing end caps."
    },
    "CDOTA_BaseNPC:SetForceAttackTarget": {
        "body": [
            "SetForceAttackTarget( ${hNPC} )",
            "-- "
        ],
        "prefix": "SetForceAttackTarget",
        "description": ""
    },
    "DOTA_RUNE_HASTE": {
        "body": [
            "DOTA_RUNE_HASTE"
        ],
        "prefix": "DOTA_RUNE_HASTE",
        "description": "(1) "
    },
    "CDOTABaseAbility:EndChannel": {
        "body": [
            "EndChannel( ${bInterrupted} )",
            "-- "
        ],
        "prefix": "EndChannel",
        "description": ""
    },
    "ACT_DOTA_CAST_EMP": {
        "body": [
            "ACT_DOTA_CAST_EMP"
        ],
        "prefix": "ACT_DOTA_CAST_EMP",
        "description": "(1584) "
    },
    "CBaseEntity:GetModelName": {
        "body": [
            "GetModelName(  )",
            "-- Returns the name of the model."
        ],
        "prefix": "GetModelName",
        "description": "Returns the name of the model."
    },
    "CDOTABaseAbility:OnChannelThink": {
        "body": [
            "OnChannelThink( ${flInterval} )",
            "-- "
        ],
        "prefix": "OnChannelThink",
        "description": ""
    },
    "DOTA_SPEECH_USER_TEAM_NEARBY": {
        "body": [
            "DOTA_SPEECH_USER_TEAM_NEARBY"
        ],
        "prefix": "DOTA_SPEECH_USER_TEAM_NEARBY",
        "description": "(3) "
    },
    "DOTA_ABILITY_BEHAVIOR_IGNORE_BACKSWING": {
        "body": [
            "DOTA_ABILITY_BEHAVIOR_IGNORE_BACKSWING"
        ],
        "prefix": "DOTA_ABILITY_BEHAVIOR_IGNORE_BACKSWING",
        "description": "(134217728) "
    },
    "MODIFIER_EVENT_ON_ATTACK": {
        "body": [
            "MODIFIER_EVENT_ON_ATTACK"
        ],
        "prefix": "MODIFIER_EVENT_ON_ATTACK",
        "description": "(101)  OnAttack"
    },
    "CDOTA_PlayerResource:IsDisableHelpSetForPlayerID": {
        "body": [
            "IsDisableHelpSetForPlayerID( ${nPlayerID}, ${nOtherPlayerID} )",
            "-- "
        ],
        "prefix": "IsDisableHelpSetForPlayerID",
        "description": ""
    },
    "CDOTA_Item:SetCurrentCharges": {
        "body": [
            "SetCurrentCharges( ${iCharges} )",
            "-- Set the number of charges on this item"
        ],
        "prefix": "SetCurrentCharges",
        "description": "Set the number of charges on this item"
    },
    "CInfoData:QueryString": {
        "body": [
            "QueryString( ${tok}, ${pDefault} )",
            "-- Query string data for this key"
        ],
        "prefix": "QueryString",
        "description": "Query string data for this key"
    },
    "CDOTA_PlayerResource:GetUnitShareMaskForPlayer": {
        "body": [
            "GetUnitShareMaskForPlayer( ${nPlayerID}, ${nOtherPlayerID} )",
            "-- "
        ],
        "prefix": "GetUnitShareMaskForPlayer",
        "description": ""
    },
    "DOTA_LOADOUT_TYPE_ABILITY_ATTACK": {
        "body": [
            "DOTA_LOADOUT_TYPE_ABILITY_ATTACK"
        ],
        "prefix": "DOTA_LOADOUT_TYPE_ABILITY_ATTACK",
        "description": "(21) "
    },
    "GetFrostyBoostAmount": {
        "body": [
            "GetFrostyBoostAmount( ${int_1}, ${int_2} )",
            "-- "
        ],
        "prefix": "GetFrostyBoostAmount",
        "description": ""
    },
    "MODIFIER_EVENT_ON_HERO_KILLED": {
        "body": [
            "MODIFIER_EVENT_ON_HERO_KILLED"
        ],
        "prefix": "MODIFIER_EVENT_ON_HERO_KILLED",
        "description": "(128)  OnHeroKilled"
    },
    "DOTA_UNIT_TARGET_TREE": {
        "body": [
            "DOTA_UNIT_TARGET_TREE"
        ],
        "prefix": "DOTA_UNIT_TARGET_TREE",
        "description": "(64) "
    },
    "DOTA_STASH_SLOT_4": {
        "body": [
            "DOTA_STASH_SLOT_4"
        ],
        "prefix": "DOTA_STASH_SLOT_4",
        "description": "(9) "
    },
    "CDOTA_BaseNPC:SetCanSellItems": {
        "body": [
            "SetCanSellItems( ${bCanSell} )",
            "-- Set whether or not this unit is allowed to sell items (bCanSellItems)"
        ],
        "prefix": "SetCanSellItems",
        "description": "Set whether or not this unit is allowed to sell items (bCanSellItems)"
    },
    "CDOTA_Item:GetContainer": {
        "body": [
            "GetContainer(  )",
            "-- Get the container for this item."
        ],
        "prefix": "GetContainer",
        "description": "Get the container for this item."
    },
    "ExecuteOrderFromTable": {
        "body": [
            "ExecuteOrderFromTable( ${handle_1} )",
            "-- Issue an order from a script table"
        ],
        "prefix": "ExecuteOrderFromTable",
        "description": "Issue an order from a script table"
    },
    "DOTA_GAMERULES_STATE_WAIT_FOR_PLAYERS_TO_LOAD": {
        "body": [
            "DOTA_GAMERULES_STATE_WAIT_FOR_PLAYERS_TO_LOAD"
        ],
        "prefix": "DOTA_GAMERULES_STATE_WAIT_FOR_PLAYERS_TO_LOAD",
        "description": "(1) "
    },
    "CDOTA_Item:IsItem": {
        "body": [
            "IsItem(  )",
            "-- "
        ],
        "prefix": "IsItem",
        "description": ""
    },
    "ACT_DOTA_RELAX_START": {
        "body": [
            "ACT_DOTA_RELAX_START"
        ],
        "prefix": "ACT_DOTA_RELAX_START",
        "description": "(1608) "
    },
    "ACT_DOTA_ALCHEMIST_CHEMICAL_RAGE_END": {
        "body": [
            "ACT_DOTA_ALCHEMIST_CHEMICAL_RAGE_END"
        ],
        "prefix": "ACT_DOTA_ALCHEMIST_CHEMICAL_RAGE_END",
        "description": "(1580) "
    },
    "CDOTA_BaseNPC:SetMustReachEachGoalEntity": {
        "body": [
            "SetMustReachEachGoalEntity( ${must} )",
            "-- Set whether this NPC is required to reach each goal entity, rather than being allowed to unkink their path."
        ],
        "prefix": "SetMustReachEachGoalEntity",
        "description": "Set whether this NPC is required to reach each goal entity, rather than being allowed to unkink their path."
    },
    "MODIFIER_PROPERTY_ATTACKSPEED_BONUS_CONSTANT": {
        "body": [
            "MODIFIER_PROPERTY_ATTACKSPEED_BONUS_CONSTANT"
        ],
        "prefix": "MODIFIER_PROPERTY_ATTACKSPEED_BONUS_CONSTANT",
        "description": "(19)  GetModifierAttackSpeedBonus_Constant"
    },
    "DOTA_HEROPICK_STATE_INTRO_SELECT": {
        "body": [
            "DOTA_HEROPICK_STATE_INTRO_SELECT"
        ],
        "prefix": "DOTA_HEROPICK_STATE_INTRO_SELECT",
        "description": "(3) "
    },
    "DOTA_LOADOUT_TYPE_AMBIENT_EFFECTS": {
        "body": [
            "DOTA_LOADOUT_TYPE_AMBIENT_EFFECTS"
        ],
        "prefix": "DOTA_LOADOUT_TYPE_AMBIENT_EFFECTS",
        "description": "(20) "
    },
    "DOTA_ATTRIBUTE_INVALID": {
        "body": [
            "DOTA_ATTRIBUTE_INVALID"
        ],
        "prefix": "DOTA_ATTRIBUTE_INVALID",
        "description": "(-1) "
    },
    "MODIFIER_STATE_EVADE_DISABLED": {
        "body": [
            "MODIFIER_STATE_EVADE_DISABLED"
        ],
        "prefix": "MODIFIER_STATE_EVADE_DISABLED",
        "description": "(13) "
    },
    "CBaseEntity:SetVelocity": {
        "body": [
            "SetVelocity( ${vecVelocity} )",
            "-- "
        ],
        "prefix": "SetVelocity",
        "description": ""
    },
    "ScreenShake": {
        "body": [
            "ScreenShake( ${Vector_1}, ${float_2}, ${float_3}, ${float_4}, ${float_5}, ${int_6}, ${bool_7} )",
            "-- Start a screenshake with the following parameters. vecCenter, flAmplitude, flFrequency, flDuration, flRadius, eCommand( SHAKE_START = 0, SHAKE_STOP = 1 ), bAirShake"
        ],
        "prefix": "ScreenShake",
        "description": "Start a screenshake with the following parameters. vecCenter, flAmplitude, flFrequency, flDuration, flRadius, eCommand( SHAKE_START = 0, SHAKE_STOP = 1 ), bAirShake"
    },
    "CDOTA_BaseNPC:GetConstantBasedManaRegen": {
        "body": [
            "GetConstantBasedManaRegen(  )",
            "-- This Mana regen is derived from constant bonuses like Basilius."
        ],
        "prefix": "GetConstantBasedManaRegen",
        "description": "This Mana regen is derived from constant bonuses like Basilius."
    },
    "DOTA_ABILITY_BEHAVIOR_NO_TARGET": {
        "body": [
            "DOTA_ABILITY_BEHAVIOR_NO_TARGET"
        ],
        "prefix": "DOTA_ABILITY_BEHAVIOR_NO_TARGET",
        "description": "(4) "
    },
    "Convars:GetCommandClient": {
        "body": [
            "GetCommandClient(  )",
            "-- GetCommandClient() : returns the player who issued this console command."
        ],
        "prefix": "GetCommandClient",
        "description": "GetCommandClient() : returns the player who issued this console command."
    },
    "CDOTA_PlayerResource:ClearKillsMatrix": {
        "body": [
            "ClearKillsMatrix( ${iPlayerID} )",
            "-- "
        ],
        "prefix": "ClearKillsMatrix",
        "description": ""
    },
    "CDOTA_BaseNPC_Hero:SetBaseStrength": {
        "body": [
            "SetBaseStrength( ${flStrength} )",
            "-- "
        ],
        "prefix": "SetBaseStrength",
        "description": ""
    },
    "CScriptParticleManager:GetParticleReplacement": {
        "body": [
            "GetParticleReplacement( ${string_1}, ${handle_2} )",
            "-- "
        ],
        "prefix": "GetParticleReplacement",
        "description": ""
    },
    "MakeStringToken": {
        "body": [
            "MakeStringToken( ${string_1} )",
            "-- Checks to see if the given hScript is a valid entity"
        ],
        "prefix": "MakeStringToken",
        "description": "Checks to see if the given hScript is a valid entity"
    },
    "CDOTA_Modifier_Lua:StatusEffectPriority": {
        "body": [
            "StatusEffectPriority(  )",
            "-- Relationship of this status effect with those from other buffs (higher is more likely to be shown)."
        ],
        "prefix": "StatusEffectPriority",
        "description": "Relationship of this status effect with those from other buffs (higher is more likely to be shown)."
    },
    "CDOTA_BaseNPC:GetAttackSpeed": {
        "body": [
            "GetAttackSpeed(  )",
            "-- "
        ],
        "prefix": "GetAttackSpeed",
        "description": ""
    },
    "CEntities:FindAllByName": {
        "body": [
            "FindAllByName( ${string_1} )",
            "-- Find all entities by name. Returns an array containing all the found entities in it."
        ],
        "prefix": "FindAllByName",
        "description": "Find all entities by name. Returns an array containing all the found entities in it."
    },
    "CDOTA_Buff:GetClass": {
        "body": [
            "GetClass(  )",
            "-- "
        ],
        "prefix": "GetClass",
        "description": ""
    },
    "DOTA_ATTRIBUTE_AGILITY": {
        "body": [
            "DOTA_ATTRIBUTE_AGILITY"
        ],
        "prefix": "DOTA_ATTRIBUTE_AGILITY",
        "description": "(1) "
    },
    "LUA_MODIFIER_INVALID": {
        "body": [
            "LUA_MODIFIER_INVALID"
        ],
        "prefix": "LUA_MODIFIER_INVALID",
        "description": "(4) "
    },
    "CDOTABaseGameMode:SetRuneEnabled": {
        "body": [
            "SetRuneEnabled( ${nRune}, ${bEnabled} )",
            "-- Set if a given type of rune is enabled."
        ],
        "prefix": "SetRuneEnabled",
        "description": "Set if a given type of rune is enabled."
    },
    "CDebugOverlayScriptHelper:EntitySkeleton": {
        "body": [
            "EntitySkeleton( ${ehandle_1}, ${float_2} )",
            "-- Draws the skeleton of the entity"
        ],
        "prefix": "EntitySkeleton",
        "description": "Draws the skeleton of the entity"
    },
    "CToneMapControllerComponent:SetBloomScale": {
        "body": [
            "SetBloomScale( ${float_1} )",
            "-- Sets bloom scale for this tonemap controller"
        ],
        "prefix": "SetBloomScale",
        "description": "Sets bloom scale for this tonemap controller"
    },
    "ACT_DOTA_CAST_ABILITY_1_END": {
        "body": [
            "ACT_DOTA_CAST_ABILITY_1_END"
        ],
        "prefix": "ACT_DOTA_CAST_ABILITY_1_END",
        "description": "(1540) "
    },
    "StartSoundEventUnreliable": {
        "body": [
            "StartSoundEventUnreliable( ${string_1}, ${handle_2} )",
            "-- Start a sound event with optional delivery"
        ],
        "prefix": "StartSoundEventUnreliable",
        "description": "Start a sound event with optional delivery"
    },
    "ACT_DOTA_CAST_LIFE_BREAK_END": {
        "body": [
            "ACT_DOTA_CAST_LIFE_BREAK_END"
        ],
        "prefix": "ACT_DOTA_CAST_LIFE_BREAK_END",
        "description": "(1564) "
    },
    "MODIFIER_PROPERTY_MANA_REGEN_CONSTANT_UNIQUE": {
        "body": [
            "MODIFIER_PROPERTY_MANA_REGEN_CONSTANT_UNIQUE"
        ],
        "prefix": "MODIFIER_PROPERTY_MANA_REGEN_CONSTANT_UNIQUE",
        "description": "(46)  GetModifierConstantManaRegenUnique"
    },
    "CDebugOverlayScriptHelper:PushAndClearDebugOverlayScope": {
        "body": [
            "PushAndClearDebugOverlayScope( ${utlstringtoken_1} )",
            "-- Pushes an identifier used to group overlays. Deletes all existing overlays using this overlay id."
        ],
        "prefix": "PushAndClearDebugOverlayScope",
        "description": "Pushes an identifier used to group overlays. Deletes all existing overlays using this overlay id."
    },
    "MODIFIER_PROPERTY_IS_SCEPTER": {
        "body": [
            "MODIFIER_PROPERTY_IS_SCEPTER"
        ],
        "prefix": "MODIFIER_PROPERTY_IS_SCEPTER",
        "description": "(135)  GetModifierScepter"
    },
    "CDOTA_Item_Lua:GetConceptRecipientType": {
        "body": [
            "GetConceptRecipientType(  )",
            "-- Return who hears speech when this spell is cast."
        ],
        "prefix": "GetConceptRecipientType",
        "description": "Return who hears speech when this spell is cast."
    },
    "CDotaQuest:RemoveSubquest": {
        "body": [
            "RemoveSubquest( ${hSubquest} )",
            "-- Remove a subquest from this quest"
        ],
        "prefix": "RemoveSubquest",
        "description": "Remove a subquest from this quest"
    },
    "CDOTA_BaseNPC:RespawnUnit": {
        "body": [
            "RespawnUnit(  )",
            "-- Respawns the target unit if it can be respawned."
        ],
        "prefix": "RespawnUnit",
        "description": "Respawns the target unit if it can be respawned."
    },
    "CDOTA_PlayerResource:GetGoldSpentOnConsumables": {
        "body": [
            "GetGoldSpentOnConsumables( ${iPlayerID} )",
            "-- "
        ],
        "prefix": "GetGoldSpentOnConsumables",
        "description": ""
    },
    "CDOTA_PlayerResource:IncrementStreak": {
        "body": [
            "IncrementStreak( ${iPlayerID} )",
            "-- "
        ],
        "prefix": "IncrementStreak",
        "description": ""
    },
    "CCustomGameEventManager:RegisterListener": {
        "body": [
            "RegisterListener( ${string_1}, ${handle_2} )",
            "-- ( string EventName, func CallbackFunction ) - Register a callback to be called when a particular custom event arrives. Returns a listener ID that can be used to unregister later."
        ],
        "prefix": "RegisterListener",
        "description": "( string EventName, func CallbackFunction ) - Register a callback to be called when a particular custom event arrives. Returns a listener ID that can be used to unregister later."
    },
    "CDOTA_BaseNPC:MoveToPosition": {
        "body": [
            "MoveToPosition( ${vDest} )",
            "-- Issue a Move-To command."
        ],
        "prefix": "MoveToPosition",
        "description": "Issue a Move-To command."
    },
    "GetSystemTime": {
        "body": [
            "GetSystemTime(  )",
            "-- Get the current real world time"
        ],
        "prefix": "GetSystemTime",
        "description": "Get the current real world time"
    },
    "CDOTABaseGameMode:SetDamageFilter": {
        "body": [
            "SetDamageFilter( ${hFunction}, ${hContext} )",
            "-- Set a filter function to control the behavior when a unit takes damage. (Modify the table and Return true to use new values, return false to cancel the event)"
        ],
        "prefix": "SetDamageFilter",
        "description": "Set a filter function to control the behavior when a unit takes damage. (Modify the table and Return true to use new values, return false to cancel the event)"
    },
    "CEntities:FindAllByClassnameWithin": {
        "body": [
            "FindAllByClassnameWithin( ${string_1}, ${Vector_2}, ${float_3} )",
            "-- Find entities by class name within a radius."
        ],
        "prefix": "FindAllByClassnameWithin",
        "description": "Find entities by class name within a radius."
    },
    "ACT_DOTA_TELEPORT_COOP_START": {
        "body": [
            "ACT_DOTA_TELEPORT_COOP_START"
        ],
        "prefix": "ACT_DOTA_TELEPORT_COOP_START",
        "description": "(1691) "
    },
    "MODIFIER_STATE_COMMAND_RESTRICTED": {
        "body": [
            "MODIFIER_STATE_COMMAND_RESTRICTED"
        ],
        "prefix": "MODIFIER_STATE_COMMAND_RESTRICTED",
        "description": "(18) "
    },
    "MODIFIER_PROPERTY_DISABLE_HEALING": {
        "body": [
            "MODIFIER_PROPERTY_DISABLE_HEALING"
        ],
        "prefix": "MODIFIER_PROPERTY_DISABLE_HEALING",
        "description": "(94)  GetDisableHealing"
    },
    "DOTA_ITEM_SLOT_6": {
        "body": [
            "DOTA_ITEM_SLOT_6"
        ],
        "prefix": "DOTA_ITEM_SLOT_6",
        "description": "(5) "
    },
    "CDOTA_PlayerResource:SetLastBuybackTime": {
        "body": [
            "SetLastBuybackTime( ${iPlayerID}, ${iLastBuybackTime} )",
            "-- "
        ],
        "prefix": "SetLastBuybackTime",
        "description": ""
    },
    "EmitAnnouncerSoundForTeam": {
        "body": [
            "EmitAnnouncerSoundForTeam( ${string_1}, ${int_2} )",
            "-- Emit an announcer sound for a team."
        ],
        "prefix": "EmitAnnouncerSoundForTeam",
        "description": "Emit an announcer sound for a team."
    },
    "ABILITY_NOT_LEARNABLE": {
        "body": [
            "ABILITY_NOT_LEARNABLE"
        ],
        "prefix": "ABILITY_NOT_LEARNABLE",
        "description": "(4) "
    },
    "CDOTA_Buff:Destroy": {
        "body": [
            "Destroy(  )",
            "-- Run all associated destroy functions, then remove the modifier."
        ],
        "prefix": "Destroy",
        "description": "Run all associated destroy functions, then remove the modifier."
    },
    "CDOTA_Ability_Nian_Leap:SetPlaybackRate": {
        "body": [
            "SetPlaybackRate( ${flRate} )",
            "-- Override playbackrate"
        ],
        "prefix": "SetPlaybackRate",
        "description": "Override playbackrate"
    },
    "GetTeamName": {
        "body": [
            "GetTeamName( ${int_1} )",
            "-- ( int teamID )"
        ],
        "prefix": "GetTeamName",
        "description": "( int teamID )"
    },
    "CDOTA_PlayerResource:GetPlayerCount": {
        "body": [
            "GetPlayerCount(  )",
            "-- Includes spectators and players not assigned to a team"
        ],
        "prefix": "GetPlayerCount",
        "description": "Includes spectators and players not assigned to a team"
    },
    "CDOTA_BaseNPC:SetAdditionalBattleMusicWeight": {
        "body": [
            "SetAdditionalBattleMusicWeight( ${flWeight} )",
            "-- Combat involving this creature will have this weight added to the music calcuations."
        ],
        "prefix": "SetAdditionalBattleMusicWeight",
        "description": "Combat involving this creature will have this weight added to the music calcuations."
    },
    "CDOTA_BaseNPC_Hero:GetKills": {
        "body": [
            "GetKills(  )",
            "-- Value is stored in PlayerResource."
        ],
        "prefix": "GetKills",
        "description": "Value is stored in PlayerResource."
    },
    "ACT_DOTA_CAST_COLD_SNAP": {
        "body": [
            "ACT_DOTA_CAST_COLD_SNAP"
        ],
        "prefix": "ACT_DOTA_CAST_COLD_SNAP",
        "description": "(1581) "
    },
    "CDOTA_Unit_Nian:IsTailAlive": {
        "body": [
            "IsTailAlive(  )",
            "-- Is the Nian's tail broken?"
        ],
        "prefix": "IsTailAlive",
        "description": "Is the Nian's tail broken?"
    },
    "rr_CommitAIResponse": {
        "body": [
            "rr_CommitAIResponse( ${handle_1}, ${handle_2} )",
            "-- Commit the result of QueryBestResponse back to the given entity to play. Call with params (entity, airesponse)"
        ],
        "prefix": "rr_CommitAIResponse",
        "description": "Commit the result of QueryBestResponse back to the given entity to play. Call with params (entity, airesponse)"
    },
    "ACT_DOTA_SPIRIT_BREAKER_CHARGE_END": {
        "body": [
            "ACT_DOTA_SPIRIT_BREAKER_CHARGE_END"
        ],
        "prefix": "ACT_DOTA_SPIRIT_BREAKER_CHARGE_END",
        "description": "(1594) "
    },
    "CDOTA_Item:GetShareability": {
        "body": [
            "GetShareability(  )",
            "-- "
        ],
        "prefix": "GetShareability",
        "description": ""
    },
    "DOTA_HEROPICK_STATE_CD_BAN4": {
        "body": [
            "DOTA_HEROPICK_STATE_CD_BAN4"
        ],
        "prefix": "DOTA_HEROPICK_STATE_CD_BAN4",
        "description": "(36) "
    },
    "SetTeamCustomHealthbarColor": {
        "body": [
            "SetTeamCustomHealthbarColor( ${int_1}, ${int_2}, ${int_3}, ${int_4} )",
            "-- ( teamNumber, r, g, b )"
        ],
        "prefix": "SetTeamCustomHealthbarColor",
        "description": "( teamNumber, r, g, b )"
    },
    "CDOTA_Item:GetCost": {
        "body": [
            "GetCost(  )",
            "-- "
        ],
        "prefix": "GetCost",
        "description": ""
    },
    "CDOTABaseAbility:SetOverrideCastPoint": {
        "body": [
            "SetOverrideCastPoint( ${flCastPoint} )",
            "-- "
        ],
        "prefix": "SetOverrideCastPoint",
        "description": ""
    },
    "DOTA_UNIT_TARGET_HERO": {
        "body": [
            "DOTA_UNIT_TARGET_HERO"
        ],
        "prefix": "DOTA_UNIT_TARGET_HERO",
        "description": "(1) "
    },
    "CDOTA_BaseNPC:HasFlyMovementCapability": {
        "body": [
            "HasFlyMovementCapability(  )",
            "-- "
        ],
        "prefix": "HasFlyMovementCapability",
        "description": ""
    },
    "DOTA_ModifyGold_GameTick": {
        "body": [
            "DOTA_ModifyGold_GameTick"
        ],
        "prefix": "DOTA_ModifyGold_GameTick",
        "description": "(10) "
    },
    "ACT_DOTA_WAIT_IDLE": {
        "body": [
            "ACT_DOTA_WAIT_IDLE"
        ],
        "prefix": "ACT_DOTA_WAIT_IDLE",
        "description": "(1689) "
    },
    "CDOTA_Modifier_Lua_Motion_Both:ApplyVerticalMotionController": {
        "body": [
            "ApplyVerticalMotionController(  )",
            "-- Starts the vertical motion controller effects for this buff.  Returns true if successful."
        ],
        "prefix": "ApplyVerticalMotionController",
        "description": "Starts the vertical motion controller effects for this buff.  Returns true if successful."
    },
    "CDOTABaseAbility:PayGoldCostForUpgrade": {
        "body": [
            "PayGoldCostForUpgrade(  )",
            "-- "
        ],
        "prefix": "PayGoldCostForUpgrade",
        "description": ""
    },
    "CCustomGameEventManager:Send_ServerToPlayer": {
        "body": [
            "Send_ServerToPlayer( ${handle_1}, ${string_2}, ${handle_3} )",
            "-- ( Entity Player, string EventName, table EventData )"
        ],
        "prefix": "Send_ServerToPlayer",
        "description": "( Entity Player, string EventName, table EventData )"
    },
    "CDOTABaseGameMode:SetRuneSpawnFilter": {
        "body": [
            "SetRuneSpawnFilter( ${hFunction}, ${hContext} )",
            "-- Set a filter function to control what rune spawns. (Modify the table and Return true to use new values, return false to cancel the event)"
        ],
        "prefix": "SetRuneSpawnFilter",
        "description": "Set a filter function to control what rune spawns. (Modify the table and Return true to use new values, return false to cancel the event)"
    },
    "CDOTA_BaseNPC:GetAttacksPerSecond": {
        "body": [
            "GetAttacksPerSecond(  )",
            "-- "
        ],
        "prefix": "GetAttacksPerSecond",
        "description": ""
    },
    "CDOTABaseAbility:OnAbilityPhaseInterrupted": {
        "body": [
            "OnAbilityPhaseInterrupted(  )",
            "-- "
        ],
        "prefix": "OnAbilityPhaseInterrupted",
        "description": ""
    }
}